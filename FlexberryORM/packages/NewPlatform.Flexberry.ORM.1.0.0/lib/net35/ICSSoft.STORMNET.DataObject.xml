<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSSoft.STORMNET.DataObject</name>
    </assembly>
    <members>
        <member name="T:ICSSoft.STORMNET.EnumCaption">
            <summary>
            Класс для работы с заголовками перечислений.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.EnumCaption.captions">
            <summary>
            Кеш заголовков для перечислений.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.EnumCaption.values">
            <summary>
            Кеш значений перечислений, которые соответствуют заголовкам.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.EnumCaption.#ctor">
            <summary>
            Создание инстанций данного класса запрещаем.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.EnumCaption.GetCaptionFor(System.Object)">
            <summary>
            Получить заголовок по значению перечислимого типа из CaptionAttribute.
            </summary>
            <param name="value">Значение перечислимого типа.</param>
            <returns>Соответствующий заголовок.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.EnumCaption.GetValueFor(System.String,System.Type)">
            <summary>
            Получить enum-значение по заголовку.
            </summary>
            <param name="caption">Заголовок значения перечисления.</param>
            <param name="enumType">Тип перечисления.</param>
            <returns>Значение перечислимого типа, соответствующее заголовку.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.EnumCaption.TryGetValueFor``1(System.String,``0@)">
            <summary>
            Метод для получения значения перечисления по заголовку без генерации исключений.
            </summary>
            <typeparam name="TEnum">Перечислимый тип.</typeparam>
            <param name="caption">Заголовок значения перечислимого типа.</param>
            <param name="enumValue">Значение перечислимого типа, соответствующее заголовку <paramref name="caption"/>.</param>
            <returns>Если удалось найти соответствие, то <c>true</c>, иначе - <c>false</c>.</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.IsHTMLAttribute">
            <summary>
            Атрибут, указывающий на то, что свойство содержит HTML.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.IsHTMLAttribute.#ctor(System.Boolean)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса IsHTML.
            </summary>
            <param name="isHtml">Содержит HTML - <c>true</c>, не содержит HTML - <c>false</c>.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.IsHTMLAttribute.#ctor">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса IsHTML.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.IsHTMLAttribute.Value">
            <summary>
            Нехранимое / хранимое.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Windows.Forms.Binders.ControlProviderAttribute">
            <summary>
            Атрибут, позволяющий указать ControlProvider для типа
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Windows.Forms.Binders.ControlProviderAttribute.ControlProviderType">
            <summary>
            Тип ControlProvider'а
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Windows.Forms.Binders.ControlProviderAttribute.#ctor(System.Type)">
            <summary>
            Конструктор
            </summary>
            <param name="provType">Тип ControlProvider'а</param>
        </member>
        <member name="M:ICSSoft.STORMNET.Windows.Forms.Binders.ControlProviderAttribute.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="typeName">Тип ControlProvider'а строкой.</param>
        </member>
        <member name="T:ICSSoft.STORMNET.DataObjectExtension">
            <summary>
            Класс с linq-расширениями для DataObject и его потомков.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectExtension.IsAlteredProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Проверить, было ли изменено свойство в сравнении с копией данных.
            </summary>
            <typeparam name="T">Тип объекта. Указывать явно не требуется.</typeparam>
            <param name="dataObject">Сам объект, над которым будем проводить проверку.</param>
            <param name="propertyExpression">Выражение, которое будет возвращать поле объекта. Например, "x => x.Свойство1".</param>
            <returns><c>True</c>, если значение отличается от значения в копии данных.</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.DOCacheNotFoundException">
            <summary>
            Кеш не найден.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.DOCacheObjectAlreadyExistsException">
            <summary>
            Объект уже присутствует в кеше.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.GetHandler">
            <summary>
            делегат для GetProperty
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.SetHandler">
            <summary>
            делегат для SetProperty
            </summary>
            <param name="source"></param>
            <param name="value"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.InstantiateObjectHandler">
            <summary>
            Делегат для создания
            </summary>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.DynamicMethodCompiler">
            <summary>
            Класс для замены рефлекшена (работает быстрее)
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.ExtendedView">
            <summary>
            Класс для хранения собственных свойств, мастеров и детейлов представления + псевдодетейлов с учётом их порядка.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ExtendedView.op_Implicit(ICSSoft.STORMNET.View)~ICSSoft.STORMNET.ExtendedView">
            <summary>
            Неявное преобразование из View в ExtendedView.
            </summary>
            <param name="view"> Представление. </param>
            <returns> ExtendedView с автоматически сформированным order-лист. </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.ExtendedView.#ctor(ICSSoft.STORMNET.View,System.Collections.ArrayList)">
            <summary>
            Конструктор класса.
            </summary>
            <param name="view"> Представление, откуда будут сохранены имя, тип и, если упорядоченный список не задан, то его свойства и детейлы будут добавлены в упорядоченный список. </param>
            <param name="viewPropertiesOrderedList"> Упорядоченный список. </param>
        </member>
        <member name="M:ICSSoft.STORMNET.ExtendedView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор класса при десериализации.
            </summary>
            <param name="info"> Сериализованные данные. </param>
            <param name="context"> Контекст сериализации. </param>
        </member>
        <member name="M:ICSSoft.STORMNET.ExtendedView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Метод, сериализующий данный объект.
            </summary>
            <param name="info"> Сериализованные данные. </param>
            <param name="context"> Контекст сериализации. </param>
        </member>
        <member name="P:ICSSoft.STORMNET.ExtendedView.View">
            <summary>
            Получение представления, на базе которого сформирован ExtendedView.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.ExtendedView.ViewName">
            <summary>
            Имя представления.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.ExtendedView.DefineClassType">
            <summary>
            Тип, для которого задано представление.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.ExtendedView.ViewPropertiesOrderedList">
            <summary>
            Упорядоченный список собственных свойств, мастеров и детейлов представления + псевдодетейлов.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Convertors.Formatter">
            <summary>
            Позволяет использовать в строке форматирования параметр вида {* ,}.
            Пример: 
            "Результат: {*, }" c параметрами object[]{1,2,3} ->
            "Результат: 1, 2, 3",
            а формат вида: "Преобразование: {*->}" ->
            "Преобразование: 1->2->3".
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Convertors.Formatter.formats">
            <summary>
            Кеш форматов.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.Formatter.#ctor">
            <summary>
            Запрет создания экземпляров данного класса.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.Formatter.Format(System.String,System.Object[])">
            <summary>
            Отформатировать параметры <see cref="T:ICSSoft.STORMNET.Convertors.Formatter"/>.
            </summary>
            <param name="format">Формат параметров.</param>
            <param name="parameters">Параметры для форматирования.</param>
            <returns>Отформатированные параметры.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.Formatter.transfertformat(System.String,System.Int32)">
            <summary>
            Преобразовать строку форматирования к стандартному виду.
            Пример:
            "Результат: {*, }" 
            с parameterscount=3 дает
            "Результат: {0}, {1}, {2}".
            </summary>
            <param name="format">Формат для преобразования.</param>
            <param name="parameterscount">Количество параметров.</param>
            <returns>Преобразованная строка.</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.IComparableType">
            <summary>
            Интерфейс для пользовательских типов, которые должны иметь специальную логику сравнения (по умолчанию для кастом-типов вызывается ToString() и сравнение по строкам). Сравнение выполняется хотя бы для определения изменённых свойств.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.IComparableType.Compare(System.Object)">
            <summary>
            Сравнить текущий объект с переданным параметром. Если 0, значит объекты равны.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.IContainsAcceptablePossibleValues">
            <summary>
            Интерфейс для пользовательских типов, которые содержат домен (список) допустимых значений
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.IContainsAcceptablePossibleValues.GetListOfPossibleValues">
            <summary>
            Получить список допустимых значений note: [static]
            </summary>
            <remarks>Желательно, чтобы метод должен был статическим (либо иметь конструктор без параметров)</remarks>
            <returns>Список допустимых значений, поддерживаемый объектом пользовательского типа</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.ISpecialEmptyValue">
            <summary>
            Интерфейс определяет значение, рассматриваемое в качестве пустого для данного типа.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ISpecialEmptyValue.IsEmptyValue(System.Object)">
            <summary>
            Является ли значение пустым
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator">
            <summary>
            Абстрактный генератор ключей
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator.Generate(System.Type)">
            <summary>
            Генерировать первичный ключ
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator.Generate(System.Type,System.Object)">
            <summary>
            Генерировать первичный ключ
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator.GenerateUniqe(System.Type)">
            <summary>
            Генерировать первичный ключ
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator.GenerateUniqe(System.Type,System.Object)">
            <summary>
            Генерировать первичный ключ
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator.KeyType">
            <summary>
            Вернуть тип ключа
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator.Unique">
            <summary>
            Уникален ли первичный ключ
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.KeyGen.GUIDGenerator">
            <summary>
            Генератор ключей типа GUID
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.GUIDGenerator.Generate(System.Type)">
            <summary>
            Генерировать Guid
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.GUIDGenerator.Generate(System.Type,System.Object)">
            <summary>
            Генерировать Guid
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.GUIDGenerator.GenerateUniqe(System.Type)">
            <summary>
            Генерировать Guid
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.GUIDGenerator.GenerateUniqe(System.Type,System.Object)">
            <summary>
            Генерировать Guid
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.KeyGen.GUIDGenerator.KeyType">
            <summary>
            Вернуть тип ключа
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.KeyGen.GUIDGenerator.Unique">
            <summary>
            Уникален ли первичный ключ
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.KeyGen.KeyGuid">
            <summary>
            Guid, отличающийся от стандартного наличием метода Parse
            и отсутствием половины ненужных конструкторов.
            Кому надо другой конструктор -- передайте в конструктор KeyGuid Guid,
            созданный его собственным конструктором.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.KeyGen.KeyGuid.guid">
            <summary>
            Значение ключевого поля.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.#ctor">
            <summary>
            Создать новый уникальный идентификатор. Равносильно <code>Guid.NewGuid()</code>.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.#ctor(System.Guid)">
            <summary>
            Создать новый уникальный идентификатор по образцу.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.Parse(System.String)">
            <summary>
            преобрзовать string->keyGuid
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.IsGuid(System.String)">
            <summary>
            Проверка на гуидность
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.NewGuid">
            <summary>
            генерация нового KeyGuid
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.CompareTo(System.Object)">
            <summary>
            Метод сравнения KeyGuid.
            </summary>
            <param name="obj">KeyGuid с которым сравниваем.</param>
            <returns>Результат сравнения см. Guid.CompareTo(o).</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(System.Guid)~ICSSoft.STORMNET.KeyGen.KeyGuid">
            <summary>
            Неявно преобразовать из Guid в KeyGuid
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(ICSSoft.STORMNET.KeyGen.KeyGuid)~System.Guid">
            <summary>
            Неявно преобразовать из KeyGuid в Guid.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(System.Nullable{System.Guid})~ICSSoft.STORMNET.KeyGen.KeyGuid">
            <summary>
            Неявно преобразовать из Guid? в KeyGuid
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(ICSSoft.STORMNET.KeyGen.KeyGuid)~System.Nullable{System.Guid}">
            <summary>
            Неявно преобразовать из KeyGuid в Guid?.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(System.String)~ICSSoft.STORMNET.KeyGen.KeyGuid">
            <summary>
            Неявно преобразовать из String в KeyGuid.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(ICSSoft.STORMNET.KeyGen.KeyGuid)~System.String">
            <summary>
            Неявно преобразовать из KeyGuid в string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(System.Byte[])~ICSSoft.STORMNET.KeyGen.KeyGuid">
            <summary>
            Неявно преобразовать из String в KeyGuid
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Implicit(ICSSoft.STORMNET.KeyGen.KeyGuid)~System.Byte[]">
            <summary>
            Неявно преобразовать из KeyGuid в string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.Equals(System.Object)">
            <summary>
            Сравнение инстанций. Сравнение происходит по значению <see cref="P:ICSSoft.STORMNET.KeyGen.KeyGuid.Guid"/>.
            </summary>
            <param name="obj">Объект для сравнения.</param>
            <returns>Результат сравнения объектов. Если равны, то <c>true</c></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.GetHashCode">
            <summary>
            Получить значение хэш-функции. Результат напрямую зависит от значения <see cref="P:ICSSoft.STORMNET.KeyGen.KeyGuid.Guid"/>. Если в процессе жизни инстанции этого объекта кто-то поменяет <see cref="P:ICSSoft.STORMNET.KeyGen.KeyGuid.Guid"/>, то и этот метод будет возвращать уже другое значение.
            </summary>
            <returns>Значение хэш-функции.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Equality(ICSSoft.STORMNET.KeyGen.KeyGuid,ICSSoft.STORMNET.KeyGen.KeyGuid)">
            <summary>
            ==
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGuid.op_Inequality(ICSSoft.STORMNET.KeyGen.KeyGuid,ICSSoft.STORMNET.KeyGen.KeyGuid)">
            <summary>
            !=
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:ICSSoft.STORMNET.KeyGen.KeyGuid.Guid">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.MasterPropertyPath">
            <summary>
            Обертка для работы с путем до мастерового свойства.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.MasterPropertyPath.DefaultSeparator">
            <summary>
            Разделитель по умолчанию между частями пути к мастеровому свойству.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.MasterPropertyPath._masterPropertyPath">
            <summary>
            Путь до мастерового свойства.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.#ctor(System.String)">
            <summary>
            Создать экземпляр обертки для работы с путем до мастерового свойства.
            </summary>
            <param name="value">
            Путь до мастерового поля, с которым будет идти в последующем работа.
            </param>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.GetMasterPropertyPath(System.String[])">
            <summary>
            Получить путь до мастерового свойства из его частей.
            </summary>
            <param name="propertyPathParts">
            Части пути до мастерового свойства.
            <example>"MasterClass", "MasterClass2", "Attribute" = MasterClass.MasterClass2.Attribute</example>
            </param>
            <returns>Путь до мастерового свойства.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.IsMasterPath(System.String)">
            <summary>
            Проверяет, является ли переданный путь мастеровым.
            При проверке используется разделитель по умолчанию.
            </summary>
            <param name="propertyPath">Путь, который необходимо проверить.</param>
            <returns>Является ли переданный путь мастеровым.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.GetMasterLevel(System.String)">
            <summary>
            Получить уровень мастера из пути до его свойства.
            </summary>
            <param name="masterName">
            Наименование мастера в пути, уровень которого необходимо получить.
            Если не указан, то метод возвращает максимальный уровень мастера.
            </param>
            <returns>
            Уровень мастера из пути до его свойства.
            Вернет -1, если указанное имя мастера не было найдено в пути.
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.GetMasterPropertyName">
            <summary>
            Получить наименование свойства мастера из его пути.
            </summary>
            <returns>Наименование свойства мастера из его пути.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.ReplacePart(System.Int32,System.String)">
            <summary>
            Заменить определенную часть пути.
            </summary>
            <param name="partLevel">Номер части пути. Начинается с 1.</param>
            <param name="replacementString">Строка для замены части пути.</param>
            <returns>Путь до мастерового свойства с замененной частью.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.ChangeSeparator(System.String)">
            <summary>
            Заменить разделитель частей пути до мастерового свойства.
            </summary>
            <param name="newSeparator">Новый разделитель для частей пути.</param>
            <returns>Путь до мастерового свойства с замененным разделителем.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.GetMaster(System.Int32)">
            <summary>
            Получить мастера из пути до его свойства. Путь без самого свойства.
            </summary>
            <param name="level">
            Уровень мастера из пути, путь которого необходимо получить.
            По умолчанию берется мастер максимального уровня.
            Уровень считается с 1.
            </param>
            <returns>
            Мастер полученный из пути до его свойства.
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.GetMasterName(System.Int32)">
            <summary>
            Получить наименование мастера из пути до его свойства. Часть пути до мастера.
            </summary>
            <param name="level">
            Уровень мастера из пути, наименование которого необходимо получить.
            По умолчанию берется мастер максимального уровня.
            Уровень считается с 1.
            </param>
            <returns>
            Наименование мастера полученное из пути до его свойства.
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterPropertyPath.GetMasterPropertyPathParts">
            <summary>
            Получить части пути до мастерового свойства.
            </summary>
            <returns>Части пути до мастерового свойства.</returns>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterPropertyPath.Separator">
            <summary>
            Разделитель между частями пути к мастеровому свойству.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterPropertyPath.Value">
            <summary>
            Путь до мастерового свойства.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.ObjectCreator">
            <summary>
            Класс для создания объектов. Скажи кого и я его создам.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ObjectCreator.CacheInstantiateObjectHandler">
            <summary>
            Кеш для хендлеров создания объектов указанного типа.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ObjectCreator.CreateObject(System.Type)">
            <summary>
            Создать объект заданного типа.
            </summary>
            <param name="tp">Тип создаваемого объекта.</param>
            <returns>Созданный объект.</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.PseudoDetailInExtendedView">
            <summary>
            Псевдодетейл для добавления в упорядоченный список ExtendedView.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.PseudoDetailInExtendedView.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="pseudoDetailViewName">Имя представления, определяющего псевдодетейл.</param>
            <param name="pseudoDetailType">Тип псевдодетейла.</param>
            <param name="masterLinkName">Свойство, по которому идёт связь от псевдодетейла к детейлу.</param>
            <param name="masterToDetailPseudoProperty">Имя псевдосвойства, по которому идёт связь от мастера к детейлу.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.PseudoDetailInExtendedView.#ctor(ICSSoft.STORMNET.View,System.String,System.String)">
            <summary>
            Конструктор.
            </summary>
            <param name="pseudoDetailView">Представление, определяющее псевдодетейл.</param>
            <param name="masterLinkName">Свойство, по которому идёт связь от псевдодетейла к детейлу.</param>
            <param name="masterToDetailPseudoProperty">Имя псевдосвойства, по которому идёт связь от мастера к детейлу.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.PseudoDetailInExtendedView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор класса при десериализации.
            </summary>
            <param name="info"> Сериализованные данные. </param>
            <param name="context"> Контекст сериализации. </param>
        </member>
        <member name="M:ICSSoft.STORMNET.PseudoDetailInExtendedView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Метод, сериализующий данный объект.
            </summary>
            <param name="info"> Сериализованные данные. </param>
            <param name="context"> Контекст сериализации. </param>
        </member>
        <member name="P:ICSSoft.STORMNET.PseudoDetailInExtendedView.PseudoDetailViewName">
            <summary>
            Имя представления, определяющего псевдодетейл.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.PseudoDetailInExtendedView.PseudoDetailType">
            <summary>
            Тип псевдодетейла.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.PseudoDetailInExtendedView.MasterLinkName">
            <summary>
            Свойство, по которому идёт связь от псевдодетейла к детейлу.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.PseudoDetailInExtendedView.MasterToDetailPseudoProperty">
            <summary>
            Имя псевдосвойства, по которому идёт связь от мастера к детейлу.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Security.RoleWithAccesses">
            <summary>
            Класс для инкапсуляции имени роли с доступными этой роли правами доступа + ограничения
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.RoleWithAccesses.RoleName">
            <summary>
            Имя роли
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.RoleWithAccesses.Accesses">
            <summary>
            Права доступа с описание ограничений
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.RoleWithAccesses.TypeName">
            <summary>
            Имя типа, для которого ищем ограничения
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.AccessType">
            <summary>
            Тип проверки полномочий для объекта
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AccessType.none">
            <summary>
            не производится никакой проверки
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AccessType.this">
            <summary>
            производится проверка только над текущим классом
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AccessType.base">
            <summary>
            производится проверка для базового класса
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AccessType.this_and_base">
            <summary>
            производится проверка как для базового класса, так и для текущего
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.AccessTypeAttribute">
            <summary>
            Помещать ли свойство в автоматически генерируемые прадставления
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AccessTypeAttribute.value">
            <summary>
            Значение (true/false)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AccessTypeAttribute.#ctor(ICSSoft.STORMNET.AccessType)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.SubobjectAttribute">
            <summary>
            Указывает объект, являющийся частью вышестоящего объекта.
            логика работы не реализована
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.SubobjectAttribute.#ctor">
            <summary>
            Возможно вам понадобится этот конструетор для создания экземпляра класса SubobjectAttribute
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.AgregatorAttribute">
            <summary>
            Указывает Агрегирующий объект для детейлового объекта
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AgregatorAttribute.#ctor">
            <summary>
            Возможно вам понадобится этот конструетор для создания экземпляра класса AgregatorAttribute
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.NotNullAttribute">
            <summary>
            Указывает, что данный атрибут не может принимать значения Null
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.NotNullAttribute.#ctor">
            <summary>
            Используется для указания недопустимости пустого значения
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.NotNullAttribute.#ctor(System.Boolean)">
            <summary>
            Используется для отмены NotNull в наследнике для свойства, в предке указанного как NotNull.
            Для отмены пишите false;
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.NotNullAttribute.NotNull">
            <summary>
            Значение атрибута. Если false, то пустое значение допустимо.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.StrLenAttribute">
            <summary>
            Указывает, что данный атрибут не может принимать значения длиннее явно определённого
            (Проверка будет осуществляться при присваивании объекту)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.StrLenAttribute.#ctor">
            <summary>
            Используется для указания отсутствия проверки на длину
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.StrLenAttribute.#ctor(System.Int32)">
            <summary>
            Используется для указания допустимой длины строки
            Для отмены пишите -1;
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.StrLenAttribute.StrLen">
            <summary>
            Значение атрибута. Если -1, то проверки не будет.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.OrderAttribute">
            <summary>
            Указывает порядок атрибутов, в соответствии с которым упорядочены объекты в свойстве-массиве объектов
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.OrderAttribute.#ctor">
            <summary>
            Возможно вам понадобится этот конструетор для создания экземпляра класса OrderAttribute
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.TypeUsageAttribute">
            <summary>
            Укеазывает допустимые по присваиванию объекты объектов данных 
            для мастеровых свойств и детайловых классов
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsageAttribute.#ctor(System.String,System.String[])">
            <summary>
            Конструктор с именами типов в конкретной сборке
            </summary>
            <param name="assemblyName">Имя сборки</param>
            <param name="typeNames">Имена типов</param>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsageAttribute.#ctor(System.String[])">
            <summary>
            Возможно вам понадобится этот конструетор для создания экземпляра класса TypeUsageAttribute
            </summary>
            <param name="types"> перечислим типы, допустимые по использованию</param>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsageAttribute.#ctor(System.Type[])">
            <summary>
            Возможно вам понадобится этот конструетор для создания экземпляра класса TypeUsageAttribute
            </summary>
            <param name="types"> перечислим типы, допустимые по использованию</param>
        </member>
        <member name="P:ICSSoft.STORMNET.TypeUsageAttribute.UseTypes">
            <summary>
            список типов, используемых в свойстве
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.PropertyTypeUsageAttribute">
            <summary>
            <see cref="T:ICSSoft.STORMNET.TypeUsageAttribute"/>, только указывается не непосредственно у свойства,а у класса
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.PropertyTypeUsageAttribute.#ctor(System.String,System.Type[])">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса PropertyTypeUsageAttribute
            </summary>
            <param name="propertyName">Свойство,для которого назначаются типы</param>
            <param name="types">список типов, используемых в свойстве</param>
        </member>
        <member name="M:ICSSoft.STORMNET.PropertyTypeUsageAttribute.#ctor(System.String,System.String[])">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса PropertyTypeUsageAttribute
            </summary>
            <param name="propertyName">Свойство,для которого назначаются типы</param>
            <param name="types">список типов, используемых в свойстве</param>
        </member>
        <member name="P:ICSSoft.STORMNET.PropertyTypeUsageAttribute.Property">
            <summary>
            Свойство,для которого назначаются типы
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.AssemblyStorageAttribute">
            <summary>
            Место сохранения объектов данных в данной сборке.
            Указывается имя сервиса данных, использующихся для хранения
            и параметры к этому сервису данных.
            Например, для реляционного сервиса данных -- это DSN
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AssemblyStorageAttribute.#ctor(System.String,System.Type)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса AssemblyStorageAttribute
            </summary>
            <param name="StorageName">наименование хранилища</param>
            <param name="StorageDataServiceName">сервис данных для работы с указанным хранилищем</param>
        </member>
        <member name="P:ICSSoft.STORMNET.AssemblyStorageAttribute.Name">
            <summary>
            наименование хранилища
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssemblyStorageAttribute.DataServiceType">
            <summary>
            сервис данных для работы с указанным хранилищем
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.ClassStorageAttribute">
            <summary>
            Некоторое логическое имя, под которым хранятся экземпляры объектов данных,
            например, для реляционного хранения это -- имя таблицы.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ClassStorageAttribute.#ctor(System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса ClassStorageAttribute
            </summary>
            <param name="StorageName">Наименование хранилища для класса</param>
        </member>
        <member name="P:ICSSoft.STORMNET.ClassStorageAttribute.Name">
            <summary>
            Наименование хранилища для класса
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.KeyGeneratorAttribute">
            <summary>
            Прописывается тип(класс) генератора первичных ключей
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGeneratorAttribute.#ctor(System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса KeyGeneratorAttribute
            </summary>
            <param name="typeofgenerator">тип генератора ключей</param>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGeneratorAttribute.#ctor(System.Type)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса KeyGeneratorAttribute
            </summary>
            <param name="typeofgenerator">тип генератора ключей</param>
        </member>
        <member name="P:ICSSoft.STORMNET.KeyGeneratorAttribute.TypeOfGenerator">
            <summary>
            тип генератора ключей
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.PropertyStorageAttribute">
            <summary>
            Некоторое логическое имя, под которым хранятся свойства (атрибуты и ассоциации),
            например, для реляционного хранения это -- имя поля в таблице.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.PropertyStorageAttribute.#ctor(System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса PropertyStorageAttribute
            </summary>
            <param name="StorageName">наименование хранилища атрибута</param>
        </member>
        <member name="M:ICSSoft.STORMNET.PropertyStorageAttribute.#ctor(System.String[])">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса PropertyStorageAttribute
            </summary>
            <param name="StorageNames">наименование хранилищ атрибута для классов, указанных в TypeUsage</param>
        </member>
        <member name="P:ICSSoft.STORMNET.PropertyStorageAttribute.Name">
            <summary>
            наименование хранилища атрибута
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.PropertyStorageAttribute.Names">
            <summary>
            наименование хранилища для множественного связывания
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.PrimaryKeyStorageAttribute">
            <summary>
            Некоторое логическое имя, под которым хранится первичный ключ,
            например, для реляционного хранения это -- имя поля в таблице.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.PrimaryKeyStorageAttribute.#ctor(System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса PrimaryKeyStorageAttribute
            </summary>
            <param name="StorageName">наименование хранилища первичного ключа</param>
        </member>
        <member name="P:ICSSoft.STORMNET.PrimaryKeyStorageAttribute.Name">
            <summary>
            наименование хранилища первичного ключа
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.TypeStorageAttribute">
            <summary>
            Некоторое логическое имя, под которым хранится тип,
            например, для реляционного хранения это -- имя таблицы.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeStorageAttribute.#ctor(System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса PrimaryKeyStorageAttribute
            </summary>
            <param name="StorageName">наименование хранилища первичного ключа</param>
        </member>
        <member name="P:ICSSoft.STORMNET.TypeStorageAttribute.Name">
            <summary>
            наименование хранилища для типа
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.AutoStoreMasterDisabled">
            <summary>
            Отключить автоматическое сохранение мастерового объекта данных при сохранении основного объекта
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AutoStoreMasterDisabled.#ctor(System.Boolean)">
            <summary>
            Отключить автоматическое сохранение мастерового объекта данных при сохранении основного объекта
            </summary>
            <param name="fAutoCreateMasterDisabled">если false - обратно включить автосохранение</param>
        </member>
        <member name="M:ICSSoft.STORMNET.AutoStoreMasterDisabled.#ctor">
            <summary>
            Отключить автоматическое сохранение мастерового объекта данных при сохранении основного объекта
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.NotStoredAttribute">
            <summary>
            Указывает нехранимый(вычислимый) атрибут (то есть он не сохраняется)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.NotStoredAttribute.#ctor(System.Boolean)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса NotStoredAttribute
            </summary>
            <param name="notStored">нехранимое-true,хранимое - false</param>
        </member>
        <member name="M:ICSSoft.STORMNET.NotStoredAttribute.#ctor">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса NotStoredAttribute
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.NotStoredAttribute.Value">
            <summary>
            нехранимое/хранимое
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.DataServiceExpressionAttribute">
            <summary>
            Указывает формулу вычисления атрибута - для стрингованных данных (для конкретного типа сервиса данных)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataServiceExpressionAttribute.#ctor(System.Type,System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса DataServiceExpressionAttribute
            </summary>
            <param name="DataServiceType">тип датасервиса</param>
            <param name="StorageExpression">запрос-формула</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataServiceExpressionAttribute.#ctor(System.String,System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса DataServiceExpressionAttribute
            </summary>
            <param name="DataServiceType">тип датасервиса</param>
            <param name="StorageExpression">запрос-формула</param>
        </member>
        <member name="P:ICSSoft.STORMNET.DataServiceExpressionAttribute.Expression">
            <summary>
            запрос-формула
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DataServiceExpressionAttribute.TypeofDataService">
             <summary>
            тип датасервиса
             </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.LoadingOrderAttribute">
            <summary>
            Определение порядка загрузки атрибутов, для тех случаев, 
            например, часть объектов детейлов является мастерами других детейлов,
            либо, например, для правильного счёта вычислимых атрибутов.
            Важно помнить, что принципиальный порядок загрузки остается следующим
            - вначале создаются мастера
            - затем заполняются свои-мастеровые атрибуты (В заданном порядке)
            - заполняются детейлы(в порядке заданном во View)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.LoadingOrderAttribute.#ctor(System.String[])">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса LoadingOrderAttribute
            </summary>
            <param name="order"></param>
        </member>
        <member name="P:ICSSoft.STORMNET.LoadingOrderAttribute.Order">
            <summary>
            порядок загрузки атрибутов
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.StoreInstancesInTypeAttribute">
            <summary>
            Как хранить в конкретном хранилище указанный тип или свойство.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.StoreInstancesInTypeAttribute.DataServiceType">
            <summary>
            Тип сервиса данных
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.StoreInstancesInTypeAttribute.StorageType">
            <summary>
            Тип хранения
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.StoreInstancesInTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса StoreInstancesInTypeAttribute
            Если тип сервиса не найден, исключение выброшено не будет
            </summary>
            <param name="dataservice">тип сервиса данных</param>
            <param name="type">как хранится</param>
        </member>
        <member name="M:ICSSoft.STORMNET.StoreInstancesInTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Возможно вам понадобится этот конструктор для создания экземпляра класса StoreInstancesInTypeAttribute
            </summary>
            <param name="dataservice">тип сервиса данных</param>
            <param name="type">как хранится</param>
        </member>
        <member name="T:ICSSoft.STORMNET.TrimmedStringStorageAttribute">
            <summary>
            происходит обрубание строк(применять функцию Trim()) при работе со строковыми данными через 
            <see cref="M:ICSSoft.STORMNET.Information.GetPropValueByName(ICSSoft.STORMNET.DataObject,System.String)"/>  и <see cref="M:ICSSoft.STORMNET.Information.GetPropValueByName(ICSSoft.STORMNET.DataObject,System.String)"/> 
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TrimmedStringStorageAttribute.#ctor(System.Boolean)">
            <summary>
            обрубать строки,или нет
            </summary>
            <param name="trimmedStrings">обрубать строки,или нет</param>
        </member>
        <member name="M:ICSSoft.STORMNET.TrimmedStringStorageAttribute.#ctor">
            <summary>
            обрубать строки
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.TrimmedStringStorageAttribute.TrimmedStrings">
            <summary>
            обрубать строки,или нет
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.ViewAttribute">
            <summary>
            Указывает представление для класса объекта данных
            формат указания: [Имя мастера].[Имя мастера мастера].[Имя мастера мастера мастера ...].[Имя атрибута] as [пользовательское имя атрибута]
            Пользовательское имя атрибута может включать пробелы
            В исходный код этот атрибут полностью генерируется CASE
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ViewAttribute.#ctor(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="ViewName">имя представления</param>
            <param name="properties">свойства в представлении</param>
        </member>
        <member name="P:ICSSoft.STORMNET.ViewAttribute.Name">
            <summary>
            имя представления
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.ViewAttribute.Properties">
            <summary>
            состав атрибутов
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.ViewAttribute.Hidden">
            <summary>
            невидимые атрибуты
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.AssociatedDetailViewAttribute">
            <summary>
            Указывает для представления класса шапки представление детейла.
            В сущности, представление шапки включает в себя представления детейлов.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AssociatedDetailViewAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            
            </summary>
            <param name="viewname">представление шапки</param>
            <param name="detailname">имя детейла</param>
            <param name="detailviewname">представление детейла</param>
            <param name="detailLoadOnLoadAgregator">читать ли детейл при чтении агрегирующего объекта</param>
            <param name="detailPath">путь на форме</param>
            <param name="detailCaption">заголовок</param>
            <param name="detailVisible">видимость</param>
            <param name="AggregateOperations">агр.функции</param>
        </member>
        <member name="M:ICSSoft.STORMNET.AssociatedDetailViewAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="viewname">представление</param>
            <param name="detailname">имя детейла</param>
            <param name="detailviewname">представление детейла</param>
            <param name="detailLoadOnLoadAgregator">прочитывать ли при загрузке</param>
        </member>
        <member name="M:ICSSoft.STORMNET.AssociatedDetailViewAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="viewname">представление</param>
            <param name="detailname">имя детейла</param>
            <param name="detailviewname">представление детейла</param>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.UseAdaptiveViewsLoading">
            <summary>
            использовать ли адаптивную вычитку
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.DetailName">
            <summary>
            имя детейла
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.DetailViewName">
            <summary>
            представление детейла
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.ViewName">
            <summary>
            представление шапки
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.LoadOnLoadAgregator">
            <summary>
            читать ли детейл при чтении агрегирующего объекта
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.FormPath">
            <summary>
            где располагается на форме
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.Caption">
            <summary>
            Заголовок на форме
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.Visible">
            <summary>
            видимость контрола на форме
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.AssociatedDetailViewAttribute.AggregateOperations">
            <summary>
            аггрегирующие операции доступные в этом представлении
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.CaptionAttribute">
            <summary>
            Указывает пользовательское имя для значения перечислимого типа, для класса данных, для свойства класса данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.CaptionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="caption">заголовок</param>
        </member>
        <member name="P:ICSSoft.STORMNET.CaptionAttribute.Value">
            <summary>
            заголовок
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.OnlyShowSelectedValueAttribute">
            <summary>
            Если true, то значения перечислимого типа
            должны быть отображены в виде ComboBox,
            иначе группа RadioButton.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.OnlyShowSelectedValueAttribute.#ctor(System.Boolean)">
            <summary>
            показывать только выделенное значение
            </summary>
            <param name="showSelected">показывать только выделенное значение?</param>
        </member>
        <member name="P:ICSSoft.STORMNET.OnlyShowSelectedValueAttribute.Value">
            <summary>
            показывать только выделенное значение?
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.EmptyEnumValueAttribute">
            <summary>
            Атрибут, указывающий значение перечисления, рассматриваемое как незаполненное
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.DisableAutoViewedAttribute">
            <summary>
            Помещать ли свойство в автоматически генерируемые прадставления
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DisableAutoViewedAttribute.value">
            <summary>
            Значение (true/false)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DisableAutoViewedAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DisableAutoViewedAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.DisableInsertPropertyAttribute">
            <summary>
            Помещать ли свойство в Insert-ы
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DisableInsertPropertyAttribute.Value">
            <summary>
            Значение (true/false)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DisableInsertPropertyAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DisableInsertPropertyAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.AutoAlteredAttribute">
            <summary>
            Автоматическое вычисление статуса Altered
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AutoAlteredAttribute.value">
            <summary>
            автоматическое вычисление статуса Altered
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AutoAlteredAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AutoAlteredAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="avalue">Если True, статус Altered вычисляется автоматически</param>
        </member>
        <member name="T:ICSSoft.STORMNET.ClassImageFileAttribute">
            <summary>
            Картинка для класса. 
            Должна лежать в этой же сборке как embedded ресурс
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ClassImageFileAttribute.fileName">
            <summary>
            Имя картинки
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ClassImageFileAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fName">Имя картинки</param>
        </member>
        <member name="T:ICSSoft.STORMNET.ClassImagePropertyAttribute">
            <summary>
            Свойство, предоставляющее картинку для экземпляров этого класса
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ClassImagePropertyAttribute.property">
            <summary>
            название свойства
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ClassImagePropertyAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="fproperty">название свойства</param>
        </member>
        <member name="T:ICSSoft.STORMNET.InstanceCaptionPropertyAttribute">
            <summary>
            Свойство, предоставляющее заголовок для экземпляров этого класса
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.InstanceCaptionPropertyAttribute.fieldCaptionProperty">
            <summary>
            название свойства
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.InstanceCaptionPropertyAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="CaptionProperty">название свойства</param>
        </member>
        <member name="T:ICSSoft.STORMNET.ExternalImageProviderAttribute">
            <summary>
            Внешний провайдер картинок
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ExternalImageProviderAttribute.fieldInstanceSignatureProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ExternalImageProviderAttribute.fieldImageBySignatureProviderType">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ExternalImageProviderAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ImageBySignatureProviderType">ImageBySignatureProvider провайдер</param>
            <param name="InstanceSignatureProperty">Если InstanceSignatureProperty начинается с @ тогда для всех интстанций будет провайдер
             вызываться именно с этой сигнатурой(без @), иначе будет браться значение(острингованное) из свойства InstanceSignatureProperty</param>
        </member>
        <member name="M:ICSSoft.STORMNET.ExternalImageProviderAttribute.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="ImageBySignatureProviderType">ImageBySignatureProvider провайдер</param>
            <param name="InstanceSignatureProperty">Если InstanceSignatureProperty начинается с @ тогда для всех интстанций будет провайдер
             вызываться именно с этой сигнатурой(без @), иначе будет браться значение(острингованное) из свойства InstanceSignatureProperty</param>
        </member>
        <member name="T:ICSSoft.STORMNET.AggregationFunctionAttribute">
            <summary>
            Агрегирующая функция в DetailArray
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AggregationFunctionAttribute.CaptionFormat">
            <summary>
            как выводить результат ( типа "сумма = {0} или больше")
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.AggregationFunctionAttribute.PropertyName">
            <summary>
            под каким свойством выводить в табличных контролах
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.AggregationFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="captionFormat">как выводить результат ( типа "сумма = {0} или больше")</param>
            <param name="propertyName">под каким свойством выводить в табличных контролах</param>
        </member>
        <member name="T:ICSSoft.STORMNET.LookupTypeEnum">
            <summary>
            Типы выбора связанного объекта
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.LookupTypeEnum.Combo">
            <summary>
            Выпадающий список - комбобокс
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.LookupTypeEnum.Standard">
            <summary>
            По умолчанию, в отдельном списке
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.LookupTypeEnum.Quick">
            <summary>
            Коротенький список по представлению
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.LookupTypeEnum.Custom">
            <summary>
            Другой, произвольный
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.MasterViewDefineAttribute">
            <summary>
            Дополнительная настройка мастера в представлении
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterViewDefineAttribute.#ctor(System.String,System.String,ICSSoft.STORMNET.LookupTypeEnum,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="viewname">имя представления</param>
            <param name="mastername">имя свойства - мастера</param>
            <param name="lookuptype">тип лукапа</param>
            <param name="customizationstring">настройка лукапа</param>
            <param name="lookupProperty">отображаемое свойство</param>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterViewDefineAttribute.#ctor(System.String,System.String,ICSSoft.STORMNET.LookupTypeEnum)">
            <summary>
            
            </summary>
            <param name="viewname"></param>
            <param name="mastername"></param>
            <param name="lookuptype"></param>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterViewDefineAttribute.ViewName">
            <summary>
            имя представления
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterViewDefineAttribute.MasterName">
            <summary>
            имя свойства - мастера
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterViewDefineAttribute.CustomizationString">
            <summary>
            настройка лукапа
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterViewDefineAttribute.LookupType">
            <summary>
            тип лукапа
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterViewDefineAttribute.LookupProperty">
            <summary>
            отображаемое свойство
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.EventArgCatcherTypeAttribute">
            <summary>
            Тип для кэтчера
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.EventArgCatcherTypeAttribute.value">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.EventArgCatcherTypeAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.ObjectStatus">
            <summary>
            Статус объекта данных
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ObjectStatus.Created">
            <summary>
            Создан
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ObjectStatus.Deleted">
            <summary>
            Удалён
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ObjectStatus.UnAltered">
            <summary>
            Не изменён
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.ObjectStatus.Altered">
            <summary>
            Изменён
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.LoadingState">
            <summary>
            Состояние загрузки объекта данных
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.LoadingState.NotLoaded">
            <summary>
            Не загружен
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.LoadingState.LightLoaded">
            <summary>
            Загружен частично, 
            подробности выясняются методами <see cref="M:ICSSoft.STORMNET.DataObject.GetLoadedProperties"/> 
            и <see cref="M:ICSSoft.STORMNET.DataObject.CheckLoadedProperty(System.String)"/>
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.LoadingState.Loaded">
            <summary>
            Полностью загружен
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.DataObject">
            <summary>
            Базовый абстрактный класс, от которого наследуются все объекты данных STORM.NET
            </summary>	
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.primaryKey">
            <summary>
            Первичный ключ
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.state">
            <summary>
            Состояние объекта (иногда лучше перевычислить, а не брать это значение)
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.loading">
            <summary>
            Состояние загруженности объекта. По-умолчанию LoadingState.NotLoaded
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.LoadedProperties">
            <summary>
            Массив имён загруженных свойств объекта
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.dataCopy">
            <summary>
            Копия данных
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.array">
            <summary>
            Ссылка на DetailArray, в котором находится объект
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.CheckDetail">
            <summary>
            Нужно ли проверять детейларрей в его сеттере
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.readKey">
            <summary>
            Ключ блокировки объекта. Используется для ReadOnly на формах. Не связан с LockService
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.fieldAlteredpropertyNames">
            <summary>
            Массив изменённых свойств
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.prototypeKey">
            <summary>
            Ключ прототипизации
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.fieldDynamicProperties">
            <summary>
            Dynamic Properties
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.PrimaryKeyIsUnique">
            <summary>
            Первичный ключ является уникальным
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.cacheSetHandler">
            <summary>
            кэш для делегатов присвоения по полям
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.cacheGetHandler">
            <summary>
            кэш для делегатов получения значения поля
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.SetExistObjectPrimaryKey(System.Object)">
            <summary>
            Установить первичный ключ в объект данных.
            Выполняется операция Clear() для объекта, присваивается первичный ключ,
            SetLoadingState(LoadingState.LightLoaded);
            SetLoadedProperties("__PrimaryKey");
            </summary>
            <param name="primaryKey">Первичный ключ</param>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.IsDataCopy">
            <summary>
            является ли объект копией
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.GetPresentationValueDelegate">
            <summary>
            Делегат для получения презентационного значения объекта. Если не прописан или возвращает null, то будет использована стандартная логика получения этого значения
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetDefaultPresentationValue">
            <summary>
            Функция для получения презентационного значения для объекта по умолчанию. 
            Презентационное значение используется в случаях, когда необходимо каким-либо образом 
            с максимальной степенью адекватности отобразить объект, а средства настройки этого отображения недоступны.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetPresentationValue">
            <summary>
            Функция для получения презентационного значения для объекта. Используется, как минимум, в ярлыках на рабочем столе.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.LockObject(System.Object)">
            <summary>
            Заблокировать объект
            </summary>
            <param name="key">ключ блокировки объекта</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CheckReadOnly">
            <summary>
            Процедура проверки объекта на заблокированность
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.UnLockObject(System.Object)">
            <summary>
            Разблокировать объект
            </summary>
            <param name="key">ключ блокировки объекта</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.#ctor">
            <summary>
            Базовый конструктор по-умолчанию
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.Finalize">
            <summary>
            Финализатор, обеспечивающий уничтожение объекта данных из кеша
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetInitializedProperties">
            <summary>
            Получить проинициализированные свойства, собственные и мастеровые (загруженные+означенные)
            </summary>
            <returns>строковый массив имён свойств</returns>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.bInGetInitializedProperties">
            <summary>
            Выполняется метод получения проинициализированных свойств public string[] GetInitializedProperties(bool WithMasters)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetInitializedProperties(System.Boolean)">
            <summary>
            Получить проинициализированные свойства (загруженные+означенные).
            </summary>
            <param name="withMasters">Если True, мастеровые учитываются.</param>
            <returns>Строковый массив имён свойств.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.SetKey1(System.Object,ICSSoft.STORMNET.DataObjectCache)">
            <summary>
            Установить первичный ключ
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.SetKey(System.Object)">
            <summary>
            Установить первичный ключ
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetStatus">
            <summary>
            Получение статуса
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetStatus(System.Boolean)">
            <summary>
            Получение статуса (можно отменить автоматическое вычисление статуса)
            </summary>
            <param name="recountIfAutoaltered">перевычислять если класс с автоматическим вычислением статуса </param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetLoadingState">
            <summary>
            Получение состояния загрузки
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.SetStatus(ICSSoft.STORMNET.ObjectStatus)">
            <summary>
            Установка статуса
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.SetLoadingState(ICSSoft.STORMNET.LoadingState)">
            <summary>
            Установка состояния загрузки.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetLoadedProperties">
            <summary>
            Получение списка свойств, значения в которые установлены 
            (требуется в случае, когда состояние загрузки -- LightLoaded).
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetLoadedPropertiesList">
            <summary>
            Получение списка свойств, значения в которые установлены 
            (требуется в случае, когда состояние загрузки -- LightLoaded).
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.SetLoadedProperties(System.String[])">
            <summary>
            Установить список свойств, значения в которые установлены 
            (требуется в случае, когда состояние загрузки -- LightLoaded).
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.AddLoadedProperties(System.String[])">
            <summary>
            Добавить список свойств, значения в которые установлены 
            (требуется в случае, когда состояние загрузки -- LightLoaded).
            </summary>
            <param name="addingLoadedProperties">Массив добавляемых свойств.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.AddLoadedProperties(System.Collections.Generic.List{System.String})">
            <summary>
            Добавить список свойств, значения в которые установлены 
            (требуется в случае, когда состояние загрузки -- LightLoaded).
            </summary>
            <param name="propertyNamesList">Массив добавляемых свойств.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CheckLoadedProperty(System.String)">
            <summary>
            Проверить, установлено ли значение в указанное свойство
            (требуется в случае, когда состояние загрузки -- LightLoaded).
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CopyToObjectWithoutCache(ICSSoft.STORMNET.DataObject@,System.Boolean,System.Boolean)">
            <summary>
             Копирование объектов без применения кэширования
            </summary>
            <param name="toObject">Объект, в который копируем (если будет null, то создадим по типу исходного)</param>
            <param name="createDataObjectsCopy">Запускать ли механизм копирования для мастеров и детейлов или ограничиться только своими свойствами (публичными и приватными)</param>
            <param name="primaryKeyCopy">Копировать ли первичный ключ</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.PrvCopyToObjectWithoutCache(ICSSoft.STORMNET.DataObject@,System.Boolean,System.Boolean,System.Collections.Hashtable)">
            <summary>
             Копирование объектов без применения кэширования
            </summary>
            <param name="toObject">Объект, в который копируем (если будет null, то создадим по типу исходного)</param>
            <param name="createDataObjectsCopy">Запускать ли механизм копирования для мастеров и детейлов или ограничиться только своими свойствами (публичными и приватными)</param>
            <param name="primaryKeyCopy">Копировать ли первичный ключ</param>
            <param name="usedDobjs">Список объектов, которые уже скопировали - борьба с зацикливанием</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CopyTo(ICSSoft.STORMNET.DataObject,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Создать копию этого объекта данных (не забудьте вызвать InitDataCopy или ClearDataCopy если планируете обновлять объект в БД)
            </summary>
            <param name="toObject">куда копировать</param>
            <param name="CreateDataObjectsCopy">создавать ли копии связанных объектов 
            или ограничиться копированием ссылки</param>
            <param name="PrimaryKeyCopy">Копировать ли первичные ключи</param>
            <param name="UseParentCaching">Использовать ли вышеустановленное кеширование</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CopyTo(ICSSoft.STORMNET.DataObject,System.Boolean,System.Boolean,System.Boolean,ICSSoft.STORMNET.DataObjectCache)">
            <summary>
            Создать копию этого объекта данных (не забудьте вызвать InitDataCopy или ClearDataCopy если планируете обновлять объект в БД)
            </summary>
            <param name="toObject">куда копировать</param>
            <param name="CreateDataObjectsCopy">создавать ли копии связанных объектов 
            или ограничиться копированием ссылки</param>
            <param name="PrimaryKeyCopy">Копировать ли первичные ключи</param>
            <param name="UseParentCaching">Использовать ли вышеустановленное кеширование</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CopySysProps(ICSSoft.STORMNET.DataObject)">
            <summary>
            Скопировать только системные свойства ("primaryKey", "prototypeKey", "readKey", "CheckDetail", "state", "DisabledInitDataCopy")
            </summary>
            <param name="toObject"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ClearPrototyping">
            <summary>
            Сбросить прототипизацию объекта (очистить все что относится к прототипу)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ClearPrototyping(System.Boolean)">
            <summary>
            Сбросить прототипизацию объекта (очистить все что относится к прототипу)
            </summary>
            <param name="withDetails">с детейлами или без</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.Prototyping">
            <summary>
            Прототипизировать
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.Prototyping(System.Boolean)">
            <summary>
            Прототипизировать
            </summary>
            <param name="withDetails">с детейлами или без</param>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.ClippingCacheOnCopy">
            <summary>
            обрезать кэш при копировании
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.DisabledInitDataCopy">
            <summary>
            Не инициализировать копию данных объекта при зачитке. По-умолчанию инициализируется.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.DisableInitDataCopy">
            <summary>
            Не инициализировать копию данных объекта при зачитке. По-умолчанию инициализируется.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.EnableInitDataCopy">
            <summary>
            Включить инициализацию копии данных объекта при зачитке. По-умолчанию инициализируется.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.inInitDataCopy">
            <summary>
            Инициализация внутренней копии данных объекта данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.InitDataCopy">
            <summary>
            Проинициализировать копию данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.InitDataCopy(ICSSoft.STORMNET.DataObjectCache)">
            <summary>
            Проинициализировать копию данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.clearDataCopy">
            <summary>
            Очистить внутреннюю копию данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.FullClearDataCopy">
            <summary>
            Очистка внутренней копии данных в собственном объекте, а также рекурсивно копии мастеровых и детейловых объектов
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetDataCopy">
            <summary>
            Получить внутреннюю копию объекта данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.SetDataCopy(ICSSoft.STORMNET.DataObject)">
            <summary>
            Установить внутреннюю копию объекта данных
            </summary>
            <param name="value">Устанавливаемый объект как копия существующего </param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetAlteredPropertyNames(System.Boolean)">
            <summary>
            Возвращает список свойств (атрибутов, мастеров, детейлов),
            чьи значения изменились по сравнению с внутренней копией
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetAlteredPropertyNames">
            <summary>
            Возвращает список свойств (атрибутов, мастеров, детейлов),
            чьи значения изменились по сравнению с внутренней копией
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.IsAlteredProperty(System.String)">
            <summary>
             Проверить, есть ли это свойство в списке изменённых. Выполняется полная проверка каждый раз, поэтому метод не очень производительный. 
            </summary>
            <param name="propName"></param>
             <remarks>Если этого свойства нет в объекте, то не упадёт, а просто скажет что оно не менялось, имейте в виду</remarks>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ContainsAlteredProps">
            <summary>
            Было ли изменение значений свойств по сравнению с внутренней копией
            </summary>
            <returns></returns>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.fieldsCollection">
            <summary>
            Кэш массивов приватных полей
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObject.m_ObjNull">
            <summary>
            константа для блокирования межпотокового доступа
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.GetPrivateFields">
            <summary>
            Возвращает массив приватных полей
            </summary>
            <returns>массив приватных полей</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.Clear">
            <summary>
            Очистка объекта данных.
            Остается означеным только первичный ключ и вычислимые свойства (если такая возможность предусмотрена)
            Объект получает статусы ObjectStatus.UnAltered,LoadingState.NotLoaded
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ToString">
            <summary>
            Преобразуем объект данных в его строковое представление.
            При этом включаются все свойства объекта, в том числе динамические; нединамические свойства сортируются по алфавиту.
            </summary>
            <returns>Сформированное строковое представление объекта данных.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ToString(System.String[])">
            <summary>
            Преобразуем объект данных в его строковое представление.
            При этом не включаются динамические свойства, свойства сортируются по алфавиту.
            </summary>
            <param name="propNames">
            Свойства, значения которых будут включены в строковое представление.
            Если будет передано <c>null</c>, то в результате не будет отображаться ни одно свойство.
            </param>
            <returns>Сформированное строковое представление объекта данных.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ToStringForAudit(ICSSoft.STORMNET.View)">
            <summary>
            Преобразование к строке только по видимым нединамическим свойствам (используется в аудите).
            При этом не включаются динамические свойства, свойства не сортируются по алфавиту (пишутся по представлению уже так, как пользователь задал).
            </summary>
            <param name="stringView">
            Представление, по которому нужно создавать строковое представление (берётся видимость полей и заголовки классов).
            Если передано <c>null</c>, то будут взяты все загруженные свойства и записаны в алфавитном порядке.
            </param>
            <returns> Представление объекта данных в виде строки. </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ToStringPropertyWithCaption(System.String,System.String)">
            <summary>
            Преобразование в строковое представление собственных, нединамических свойств объекта.
            </summary>
            <param name="propertyName">Имя свойства.</param>
            <param name="propertyCaption">Заголовок для свойства.</param>
            <returns>Сформированное строковое представление для значения свойства объекта.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ToStringFormResult(System.String)">
            <summary>
            Формируем из строки, сгенерированной для строкового представления значений свойств объекта, итоговое строковое представление объекта. 
            </summary>
            <param name="propertiesString">Строка, сгенерированная для строкового представления значений свойств объекта.</param>
            <returns>Строковое представление объекта данных.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.ToStringAllData(System.String[],System.Boolean,System.Boolean)">
            <summary>
            Перевод объекта данных в строковое представление.
            </summary>
            <param name="propNamesArray"> Имена свойств, которые должны попасть в строковое представление. </param>
            <param name="includeDynamicProperties"> Включать ли динамические свойства. </param>
            <param name="needOrder"> Должны ли быть свойства в строковом представлении отсортированы по алфавиту. </param>
            <returns> Строковое представление объекта данных. </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CheckNotNullProperties(System.Collections.Generic.Dictionary{System.Type,System.Boolean})">
            <summary>
            Найти незаполненные поля
            </summary>
            <param name="detailSkip">Не обращать внимания на удаленные детейлы. Если детейла нет в этом словаре или значение для него False, то пропущен не будет. Может быть null</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CheckNotNullProperties">
            <summary>
            Поискать незаполенные поля
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CheckNotNullProperties(ICSSoft.STORMNET.View,System.Boolean,System.Collections.Generic.Dictionary{System.Type,System.Boolean})">
            <summary>
            Найти незаполненные поля и вернуть заголовки свойств по представлению
            </summary>
            <param name="view">Представление</param>
            <param name="returnCaptions">Если True, то вернутся заголовки свойств. Иначе имена</param>
            <param name="detailSkip">Не обращать внимания на удаленные детейлы. Если детейла нет в этом словаре или значение для него False, то пропущен не будет. Может быть null</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObject.CheckNotNullProperties(ICSSoft.STORMNET.View,System.Boolean)">
            <summary>
            Поискать незаполенные поля и возвращать заголовки свойств по представлению
            </summary>
            <param name="view">представление</param>
            <param name="returnCaptions">возвращать имена свойст или заголовки</param>
            <returns></returns>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObject.IsReadOnly">
            <summary>
            Проверка что объект залочен
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObject.DynamicProperties">
            <summary>
            Динамические свойства объекта
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObject.__PrototypeKey">
            <summary>
            Ключ прототипа
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObject.Prototyped">
            <summary>
            Прототипизированный ли объект
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObject.DetailArray">
            <summary>
            Ссылка на DetailArray, в котором находится объект
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObject.__PrimaryKey">
            <summary>
            Установка/получение первичного ключа
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.GetPresentationValueDelegate">
            <summary>
            Делегат для получения презентационного значения
            </summary>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.DetailArray">
            <summary>
            Контейнер (массив) детейловых объектов
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.Clear">
            <summary>
            Очистить массив
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.Insert(System.Int32,ICSSoft.STORMNET.DataObject)">
            <summary>
            Вставить объект
            </summary>
            <param name="Index">позиция</param>
            <param name="obj">что вставляем</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.Move(System.Int32,System.Int32)">
            <summary>
            Переместить объект внутри массива - remove,insert
            </summary>
            <param name="oldIndex">старая позиция</param>
            <param name="newIndex">новая позиция</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.Renumerate">
            <summary>
            Перевычисление автонумеруемых объектов
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.Ordering">
            <summary>
            Переупорядочить объекты данных в соответствии с автонумерацией
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.#ctor(System.Type,ICSSoft.STORMNET.DataObject)">
            <summary>
            Создать по типу хранимых объектов и мастеровому объекту данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.#ctor(System.Type,ICSSoft.STORMNET.DataObject,System.Int64)">
            <summary>
            Создать по типу хранимых объектов, мастеровому объекту данных, фиксированного размера
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.#ctor(System.Type,System.Reflection.PropertyInfo,ICSSoft.STORMNET.DataObject)">
            <summary>
            Создать по типу хранимых объектов, информации о свойстве первичного ключа мастера и объекте данных мастера
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.#ctor(System.Type,System.Reflection.PropertyInfo,ICSSoft.STORMNET.DataObject,System.Int64)">
            <summary>
            Создать по типу хранимых объектов, информации о свойстве первичного ключа мастера и объекте данных мастера, фиксированного размера
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.GetAllObjects">
            <summary>
            Получить все объекты в виде одномерного массива
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.ItemByIndex(System.Int32)">
            <summary>
            Получить объект данных по индексу
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.GetByKey(System.Object)">
            <summary>
            Получить объект данных по первичному ключу.
            У конкретного прикладного DetailArray можно получить объект по ключу через операцию []
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.SetByKey(System.Object,ICSSoft.STORMNET.DataObject)">
            <summary>
            Установить объект данных по первичному ключу.
            У конкретного прикладного DetailArray можно установить объект по ключу через операцию []
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.AddRange(ICSSoft.STORMNET.DataObject[])">
            <summary>
            Добавить объекты данных
            Если у объекта данных первичный ключ будет равен null, то будет сгенерирован новый ключ.
            </summary>
            <param name="dataobjects">Массив объектов данных</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.AddObject(ICSSoft.STORMNET.DataObject)">
            <summary>
            Добавить объект данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.Remove(ICSSoft.STORMNET.DataObject)">
            <summary>
            Удалить объект данных
            </summary>		
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.RemoveByIndex(System.Int32)">
            <summary>
            Удалить объект данных по индексу
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.RemoveByKey(System.Object)">
            <summary>
            Удалить объект данных по первичному ключу
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.prv_SetAggregator(ICSSoft.STORMNET.DataObject)">
            <summary>
            Установить объект агрегатор
            </summary>
            <param name="dataobject"> объект-шапка</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailArray.OnItemsAdded(ICSSoft.STORMNET.ItemsAddedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:ICSSoft.STORMNET.DetailArray.ItemsAdded">
            <summary>
            Добавление объектов в коллекцию
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailArray.AgregatorObject">
            <summary>
            Ссылка на шапку (задается при создании массива)
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailArray.ItemType">
            <summary>
            Возвращает тип элементов DetailArray
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailArray.FixedSize">
            <summary>
            Размер зафиксированный для данного массива объектов
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailArray.Count">
            <summary>
            Количество объектов
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.DetailArray.DetailEnumumerator">
            <summary>
            Енумератор
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.ItemsAddedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.ItemsAddedEventArgs.DataObjects">
            <summary>
            Добавленные в массив объекты данных
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Design.ClassWithDinamicProperties">
            <summary>
            Абстрактный класс позволяющий потомкам иметь динамический состав 
            свойств отображаемый в PropertyEditor
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.ClassWithDinamicProperties.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Design.ClassWithDinamicProperties.properties">
            <summary>
            коллекция динамических свойств
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.ClassWithDinamicProperties.GetProperties(System.Attribute[])">
            <summary>
            Свойства соответствующие составу атрибутов
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor">
            <summary>
            Описатель динамического свойства
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.propertyType">
            <summary>
            тип свойства
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.value">
            <summary>
            значение свойства
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.#ctor(System.String,System.Type,System.Object,System.Attribute[])">
            <summary>
            создаватель экземпляров класса DinamicPropertyDescriptor
            </summary>
            <param name="name">имя свойства</param>
            <param name="propType">тип свойства</param>
            <param name="initValue">начальное значение</param>
            <param name="attrs">атрибуты свойства</param>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            можно ли вернуть начальные значения (False)
            </summary>
            <param name="component"></param>
            <returns>ложь</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Взять значение
            </summary>
            <param name="component">компонент у которого берется значение</param>
            <returns>значение</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Вернуть начальное значение
            </summary>
            <param name="component">объект у которого устанавливается свойство</param>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Установить значение
            </summary>
            <param name="component">объект</param>
            <param name="value">значение</param>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Можно ли сериализовать свойство
            </summary>
            <param name="component">объект</param>
            <returns>ложь</returns>
        </member>
        <member name="P:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.ComponentType">
            <summary>
            Тип компонента
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.IsReadOnly">
            <summary>
            Только на чтение ?
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Design.DinamicPropertyDescriptor.PropertyType">
            <summary>
            Тип свойства
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Design.DropDownEditor">
            <summary>
            Редактор свойств - выпадающий контрол
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DropDownEditor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Design.DropDownEditor.edSvc">
            <summary>
            Для общения с Редактором форм
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DropDownEditor.GetControl(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            контрол, который будет выпадать
            </summary>
            <param name="context">контекст вызовва</param>
            <param name="provider">ServiceProvider</param>
            <param name="value">объект редактирования</param>
            <returns>контрол, который будет выпадать</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DropDownEditor.GetValue(System.Object,System.Windows.Forms.Control)">
            <summary>
            После редактирования возвращаем значение
            </summary>
            <param name="value"></param>
            <param name="cntrl"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DropDownEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Редактировать значение
            </summary>
            <param name="context">конекст вызова</param>
            <param name="provider">провайдер сервисов</param>
            <param name="value">значение для редактирования</param>
            <returns>результат редактирования</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.DropDownEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            стиль редактирования, возвращает UITypeEditorEditStyle.DropDown
            </summary>
            <param name="context"></param>
            <returns>UITypeEditorEditStyle.DropDown</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.Design.SelectValueEditor">
            <summary>
            Редактор свойства - выбор из выпадающего списка
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Design.SelectValueEditor.ItemSelected">
            <summary>
            Выбрана ли строчка в списке
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.SelectValueEditor.GetValues(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Все возможные значения
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.SelectValueEditor.GetControl(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Возвращает ListBox
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Design.SelectValueEditor.GetValue(System.Object,System.Windows.Forms.Control)">
            <summary>
            Возвращает выбранное значение
            </summary>
            <param name="value"></param>
            <param name="cntrl"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.DataObjectCache">
            <summary>
            Кеш объектов данных, ключ кешей контекст вызова.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.#ctor">
            <summary>
            Кеш объектов данных.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObjectCache._objectCreator">
            <summary>
            The m_ object creator.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObjectCache._objectCaches">
            <summary>
            Кеш объектов данных.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObjectCache._objectCachesUseCounter">
            <summary>
            Кэш объектов данных с использованием счётчиков.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DataObjectCache._lastCacheIndex">
            <summary>
            Индекс последнего кеша.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.StartCaching(System.Boolean)">
            <summary>
            Начать кеширование.
            </summary>
            <param name="clipParentCache">
            Запретить использовать родительский кеш.
            </param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.StopCaching">
            <summary>
            Закончить кеширование.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.GetLivingDataObject(System.Type,System.Object)">
            <summary>
            Get the living data object.
            </summary>
            <param name="typeofdataobject">
            The type of data object.
            </param>
            <param name="key">
            The key of data object.
            </param>
            <returns>
            The <see cref="T:ICSSoft.STORMNET.DataObject"/>.
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.CreateDataObject(System.Type,System.Object)">
            <summary>
            Получить "живой" внутри приложения объект данных по указанию
            типа объекта данных и первичного ключа.
            Возвращается <c>null</c>, если объект не найден или он уже "умер".
            </summary>
            <param name="typeofdataobject">
            Тип объекта данных.
            </param>
            <param name="key">
            Ключ объекта данных.
            </param>
            <returns>
            Объект данных.
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.AddDataObject(ICSSoft.STORMNET.DataObject)">
            <summary>
            Добавить объект в кеш.
            </summary>
            <param name="dobj">
            Объект для добавления.
            </param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.ChangeKeyForLivingDataObject(ICSSoft.STORMNET.DataObject,System.Object)">
            <summary>
            Изменить ключ у кешированного объекта.
            </summary>
            <param name="dataobject">
            Объект данных.
            </param>
            <param name="oldkey">
            Предыдущий ключ.
            </param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.RemoveLivingDataObject(System.Type,System.Object)">
            <summary>
            Удалить объект из кеша.
            </summary>
            <param name="typeofdataobject">
            Тип объекта.
            </param>
            <param name="key">
            Первичный ключ.
            </param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.PrvRemoveLivingDataObject(System.Type,System.Object)">
            <summary>
            Удалить "живой" объект данных из кеша.
            </summary>
            <param name="typeofdataobject">
            Тип объекта данных.
            </param>
            <param name="key">
            Ключ объекта данных.
            </param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.AddLivingDataObject(ICSSoft.STORMNET.DataObject)">
            <summary>
            Добавить объект в кеш.
            </summary>
            <param name="dataobject">
            Объект данных.
            </param>
        </member>
        <member name="M:ICSSoft.STORMNET.DataObjectCache.PrvGetLivingDataObject(System.Type,System.Object)">
            <summary>
            Получить "живой" внутри приложения объект данных по указанию
            типа объекта данных и первичного ключа.
            Возвращается null, если объект не найден или он уже "умер".
            </summary>
            <param name="typeofdataobject">
            The typeofdataobject.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:ICSSoft.STORMNET.DataObject"/>.
            </returns>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObjectCache.Creator">
            <summary>
            Создавалка объектов.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DataObjectCache.NoCaches">
            <summary>
            Есть объекты в кеше.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.NoSuchPropertyException">
            <summary>
            Нет такого свойства (Исключительная ситуация)
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.NoSuchPropertyException.Type">
            <summary>
            Где нет
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.NoSuchPropertyException.PropName">
            <summary>
            Чего нет
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.NoSuchPropertyException.#ctor(System.Type,System.String)">
            <summary>
            Нет такого свойства
            </summary>
            <param name="Type">Где нет</param>
            <param name="PropName">Чего нет</param>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.NoSuchPropertyException.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.CantFindViewException">
            <summary>
            Нет такого представления
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.CantFindViewException.#ctor(System.Type,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="type">Тип</param>
            <param name="viewName">Имя представления</param>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.CantFindViewException.Type">
            <summary>
            Тип, в котором искали представление
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.CantFindViewException.ViewName">
            <summary>
            Имя представления
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.CantFindViewException.Message">
            <summary>
            Сообщение
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.UnlockObjectDifferentKeyException">
            <summary>
            При разблокировке объекта используется неверный ключ
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.UnlockObjectDifferentKeyException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.DataObjectIsReadOnlyException">
            <summary>
            Объект заблокирован
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.DataObjectIsReadOnlyException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.NotSortableOrderColumnsType">
            <summary>
            Невозможно отсортировать объектв по этому свойству
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.NotSortableOrderColumnsType.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.NotSortableDetailArrayException">
            <summary>
            Этот DetailArray нельзя отсортировать
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.NotSortableDetailArrayException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.ObjectAlreadyInDetailArrayException">
            <summary>
            объект уже в DetailArray
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.ObjectAlreadyInDetailArrayException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.DetailArrayAlreadyContainsObjectWithThatKeyException">
            <summary>
            DetailArray уже содержиться объект с такимже калючем
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.DetailArrayAlreadyContainsObjectWithThatKeyException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.UncompatibleViewForClassException">
            <summary>
            представление не подходит для класса
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.UncompatibleViewForClassException.viewName">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.UncompatibleViewForClassException.classType">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.UncompatibleViewForClassException.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="viewN"></param>
            <param name="classT"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.ClassIsNotSubclassOfOtherException">
            <summary>
            Один класс не является потомком другого класса
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.ClassIsNotSubclassOfOtherException.checkedType">
            <summary>
            проверяемый
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.ClassIsNotSubclassOfOtherException.baseType">
            <summary>
            с чем сравниваем
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.ClassIsNotSubclassOfOtherException.#ctor(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="checkedT"></param>
            <param name="baseT"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.CantFindPropertyException">
            <summary>
            Не обнаружено свойство
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.CantFindPropertyException.propertyName">
            <summary>
            имя свойства
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.CantFindPropertyException.classType">
            <summary>
            в каком типе
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.CantFindPropertyException.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="prop">имя свойства</param>
            <param name="type">в каком типе</param>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.AgregatorPropertyMustBeDataObjectTypeException">
            <summary>
            Агрегатор должен быть приводим к DataObject
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.AgregatorPropertyMustBeDataObjectTypeException.DefinitionType">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.AgregatorPropertyMustBeDataObjectTypeException.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="defType"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.OnCreationDetailArrayAgregatorObjectCantBeNullException">
            <summary>
            при создании DetailArray необходимо передать объект-владелец
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.OnCreationDetailArrayAgregatorObjectCantBeNullException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.CantProcessingNonDataobjectTypeException">
            <summary>
            нет возможности обработать не DataObject
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.CantProcessingNonDataobjectTypeException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.DifferentDataObjectTypesException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.DifferentDataObjectTypesException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.PrimaryKeyTypeException">
            <summary>
            Неверный тип первичного ключа
            </summary>	
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.PrimaryKeyTypeException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.IncompatibleTypesForViewOperationException">
            <summary>
            Исключение,возникающее в операциях над представлениями пи несовместимости представлений
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.IncompatibleTypesForViewOperationException.FirstViewType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.IncompatibleTypesForViewOperationException.SecondViewType">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.IncompatibleTypesForViewOperationException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="FirstViewType"></param>
            <param name="SecondViewType"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.IncompatibleTypeException">
            <summary>
            Исключение,возникающее программной несовмести типов (например при присваивании мастероваму свойству объекта типе, не включенного в UsingType)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.IncompatibleTypeException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sObjectType">тип объекта в котором возникло исключение</param>
            <param name="sPropName">свойство в котором возникло исключение</param>
            <param name="sTypeName">имя типа на котором возникло исключение</param>
            <param name="sMustBeTypes">должны бать следующие типы</param>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.IncompatibleTypeException.TypeName">
            <summary>
            тип объекта в котором возникло исключение
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.IncompatibleTypeException.MustBeTypes">
            <summary>
            олжны бать следующие типы
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.IncompatibleTypeException.ObjectType">
            <summary>
            имя типа на котором возникло исключение
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Exceptions.IncompatibleTypeException.PropName">
            <summary>
            свойство в котором возникло исключение
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.IncomatibleCheckingTypeException">
            <summary>
             Тип проверяемого объекта не соответствует типу в TypeUsageAttribute
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.IncomatibleCheckingTypeException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.NotEnumTypeException">
            <summary>
            Тип не является перечислимым типом
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.NotEnumTypeException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="TypeName"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.NotFoundAggregatorProperty">
            <summary>
            не смогли найти свойство указывающее на объект-владелец
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.NotFoundAggregatorProperty.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Exceptions.NotFoundInTypeUsageException">
            <summary>
            Не нашли в типах
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.NotFoundInTypeUsageException.ObjectType">
            <summary>
            Тип для свойсва которого установлен TypeUsage
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.NotFoundInTypeUsageException.Property">
            <summary>
            Свойство для которого установлен TypeUsage
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Exceptions.NotFoundInTypeUsageException.CheckedType">
            <summary>
            Проверяемый тип
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Exceptions.NotFoundInTypeUsageException.#ctor(System.Type,System.String,System.Type)">
            <summary>
            Не нашли в типах
            </summary>
            <param name="objectType"> Тип для свойсва которого установлен TypeUsage</param>
            <param name="property">Свойство для которого установлен TypeUsage</param>
            <param name="checkedType">Проверяемый тип</param>
        </member>
        <member name="T:ICSSoft.STORMNET.ImageBySignatureProvider">
            <summary>
            Класс для предоставления картинок по типу и сигнатуре
            используется совместно с <see cref="T:ICSSoft.STORMNET.ExternalImageProviderAttribute"/> 
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ImageBySignatureProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.ImageBySignatureProvider.GetImage(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="DataObjectType"></param>
            <param name="objectsignature"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.Information">
            <summary>
            Доступ к метаданным
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Information.cacheGetKeyGeneratorType">
            <summary>
            Получить .Net-тип генератора первичных ключей, указываемого атрибутом KeyGeneratorAttribute
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetKeyGeneratorType(System.Type)">
            <summary>
            Получить тип генератора ключей
            </summary>
            <param name="typeofdataobject">для какого типа</param>
            <returns></returns>
        </member>
        <member name="F:ICSSoft.STORMNET.Information.cacheGetPropValueByNameHandler">
            <summary>
            кэш для делегатов получения значения свойств из объектов
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropValueByName(ICSSoft.STORMNET.DataObject,System.String)">
            <summary>
            Получить значение свойства объекта данных по имени этого свойства
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.TrimmedStringStorage(System.Type,System.String)">
            <summary>
            Обрезать ли строки для данного свойства
            </summary>
            <param name="tp">тип</param>
            <param name="propname">свойство</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.SetPropValueByName(ICSSoft.STORMNET.DataObject,System.String,System.String)">
            <summary>
            Установить значение свойства объекта данных по имени этого свойства,
            значение передаётся строкой.
            При установке свойства выполняется попытка преобразовать строковое значение
            в значение соответствующего типа путём вызова статического метода Parse(string)
            у этого типа.
            </summary>      
             <param name="obj">Объект данных, значение свойства которого кстанавливается данным методом </param>
            <param name="propName">Имя свойства объекта данных, значение которого устанавливается данным методом</param>
            <param name="PropValue">Значение свойства объекта данных, которое будет установлено данным методом</param>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.isSystemType(System.Type)">
            <summary>
            Проверка: является ли переданный тип определённым в namespace <see cref="N:System"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.SetPropValueByName(ICSSoft.STORMNET.DataObject,System.String,System.Object)">
            <summary>
            Установить значение свойства объекта данных по имени этого свойства,
            значение передаётся типизированно. Если попытка преобразования
            типа неудачна, возвращается сообщение об ошибке.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Information.cacheGetView">
            <summary>
            кэш для функции GetView
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetView(System.String,System.Type)">
            <summary>
            Получить представление по его имени и классу объекта данных.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetCompatibleView(System.String,System.Type[])">
            <summary>
            Получить представление, "совместимое" с переданными классами. 
            Ищет общего предка, затем пытается взять у него указанное представление.
            Если представление не найдено, возвращается null.
            </summary>
            <param name="ViewName">имя представления</param>
            <param name="types">одномерный массив типов классов данных</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.AllViews(System.Type)">
            <summary>
            Получить список имён представлений для указанного класса объекта данных
            </summary>
            <param name="type">Тип представления</param>
            <returns>Массив строк, содержащих имена представлений для указанного типа</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.AllViews(System.Type[])">
            <summary>
            Получить список имён общих представлений для указанных классов.
            Речь идёт о ситуации, когда образующие иерархию наследования классы
            имеют представления, что означает, что имеется множество представлений,
            общее для некоторого множества классов.
            Указывая в этот метод это множество классов, Вы и получите имена их общих представлений.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.CheckViewForClasses(System.String,System.Type[])">
            <summary>
            Проверить, доступно ли указанное по имени представление во всех перечисленных классах. 
            Речь идёт о ситуации, когда образующие иерархию наследования классы
            имеют представления, что означает, что имеется множество представлений,
            общее для некоторого множества классов.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAllTypesFromView(ICSSoft.STORMNET.View)">
            <summary>
            Вернуть список всех встречающихся в представлении типов, включая детейлы.
            </summary>
            <param name="view">Представление</param>
            <returns>Спосок типов без дублей</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAllTypesFromView(ICSSoft.STORMNET.ExtendedView)">
            <summary>
            Вернуть список всех встречающихся в представлении типов, включая детейлы и псевдодетейлы.
            </summary>
            <param name="view">Расширенное представление (с псевдодетейлами).</param>
            <returns>Спосок типов без дублей.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetTypeStorageName(System.Type)">
             <summary>
            Имя хранилища для типа
             </summary>
             <param name="type"></param>
             <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPrimaryKeyStorageName(System.Type)">
            <summary>
            Получить имя хранения первичного ключа, установленное атрибутом <see cref="T:ICSSoft.STORMNET.PrimaryKeyStorageAttribute"/>
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <returns>имя хранения первичного ключа</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetCompatibleTypesForProperty(System.Type,System.String)">
            <summary>
            Возвращает типы, совместимые с данным свойством(по TypeUsage)
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetItemType(System.Type,System.String)">
            <summary>
            Возвращает тип элемента DetailArray
            </summary>
            <param name="AgregatorType">объект-владелец</param>
            <param name="DetailPropertyName">свойство-DetailArray</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetCompatibleTypesForDetailProperty(System.Type,System.String)">
            <summary>
             возвращает типы, совместимые с детейловым свойством(по TypeUsage)
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyDisableAutoViewing(System.Type,System.String)">
            <summary>
            Вернуть является ли свойство автоматически включаемым в представления
            </summary>
            <param name="type">тип</param>
            <param name="property">свойство</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyStorageName(System.Type,System.String)">
            <summary>
            Получить имя хранения .Net-свойства, установленное атрибутом <see cref="T:ICSSoft.STORMNET.PropertyStorageAttribute"/>
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <param name="property">имя свойства</param>
            <returns>имя хранения</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyCaption(System.Type,System.String)">
            <summary>
            Вернуть заголовок свойства
            </summary>
            <param name="type">тип</param>
            <param name="property">свойство</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyStorageName(System.Type,System.String,System.Int32)">
            <summary>
            Получить имя хранения .Net-свойства, установленное атрибутом <see cref="T:ICSSoft.STORMNET.PropertyStorageAttribute"/>
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <param name="property">имя свойства</param>
            <param name="index">индекс в множественном</param>
            <returns>имя хранения</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyNotNull(System.Type,System.String)">
            <summary>
            Проверить, установлен ли для указанного .Net-свойства атрибут <see cref="T:ICSSoft.STORMNET.NotNullAttribute"/>.
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <param name="property">имя свойства</param>
            <returns>true, если установлен, иначе false</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyStrLen(System.Type,System.String)">
            <summary>
            Получить для указанного .Net-свойства атрибут <see cref="T:ICSSoft.STORMNET.StrLenAttribute"/>.
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <param name="property">имя свойства</param>
            <returns>Значение установленного атрибута (-1 если не установлено)</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.CheckNotNullAttributes(ICSSoft.STORMNET.DataObject)">
            <summary>
            Проверить, нет ли непустых значений в NotNull .Net-свойствах
            </summary>
            <param name="dataObject">объект данных</param>
            <returns>возвращает null, если непустых значений нет, 
            иначе одномерный строковый массив с именами свойств, где значения есть</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyDefineClassType(System.Type,System.String)">
            <summary>
            Вернуть тип в котором определено свойство
            </summary>
            <param name="declarationType">исходный тип</param>
            <param name="propname">исходное имя свойства</param>
            <returns>тип в котором определено свойство</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetCompatibleTypesForTypeConvertion(System.Type)">
            <summary>
            Куда можно мконвертировать тип
            </summary>
            <param name="type">из чего</param>
            <returns>куда</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyType(System.Type,System.String)">
            <summary>
            Получить .Net-тип свойства класса объекта данных по имени этого свойства
            </summary>
            <param name="declarationType">.Net-тип класса объекта данных</param>
            <param name="propname">имя свойства</param>
            <returns>.Net-тип свойства</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyType(System.Type,System.String,System.String,ICSSoft.STORMNET.Collections.NameObjectCollection)">
            <summary>
            ??????????????????
            </summary>
            <param name="declarationType"></param>
            <param name="propname"></param>
            <param name="masterpref"></param>
            <param name="masterTypes"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetStorageStructForView(ICSSoft.STORMNET.View,System.Type,ICSSoft.STORMNET.Business.StorageTypeEnum,ICSSoft.STORMNET.Information.GetPropertiesInExpressionDelegate,System.Type)">
            <summary>
            Вернуть структуру хранения для представления
            </summary>
            <param name="view">Пердставление <see cref="T:ICSSoft.STORMNET.View"/></param>
            <param name="type"></param>
            <param name="storageType">Тип хранилища <see cref="T:ICSSoft.STORMNET.Business.StorageTypeEnum"/></param>
            <param name="getPropertiesInExpression"></param>
            <param name="DataServiceType">Тип сервиса данных</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetSimpleStorageStructForView(ICSSoft.STORMNET.View,System.Type,ICSSoft.STORMNET.Information.GetPropertiesInExpressionDelegate,System.Type)">
            <summary>
            Получить структуру хранения данных в соответствии 
            с указанным представлением указанного .Net-типа класса объекта данных.
            </summary>
            <param name="view">представление</param>
            <param name="type">.Net-тип класса объекта данных</param>
            <param name="getPropertiesInExpression"></param>
            <param name="DataServiceType">тип сервиса данных</param>
            <returns></returns>
        </member>
        <member name="F:ICSSoft.STORMNET.Information.ChangeClassStorageName">
            <summary>
            Делегат для смены ClassStorageName (можно подставить имя_базы.dbo.имя_таблицы, например)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetClassStorageName(System.Type)">
            <summary>
            Получить имя хранения для .Net-типа класса объекта данных, заданное атрибутом <see cref="T:ICSSoft.STORMNET.ClassStorageAttribute"/>
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <returns>имя хранения в строке</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.AutoAlteredClass(System.Type)">
            <summary>
            Является ли класс AutoAltered
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAssemblyStorageName(System.Type)">
            <summary>
            Получить имя хранения для сборки, заданное атрибутом <see cref="T:ICSSoft.STORMNET.AssemblyStorageAttribute"/>.
            </summary>
            <param name="type">.Net-тип сборки</param>
            <returns>имя хранения</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.SortByLoadingOrder(System.Type,System.String[])">
            <summary>
            Отсортировать, согласно LoadingOrder для указанного класса.
            </summary>
            <param name="type"></param>
            <param name="props"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAlteredProperyNames(ICSSoft.STORMNET.DataObject,ICSSoft.STORMNET.DataObject,System.Boolean)">
            <summary>
             Используйте метод GetAlteredPropertyNames
            </summary>
            <param name="obj1"></param>
            <param name="obj2"></param>
            <param name="withDetailsComparing"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAlteredPropertyNames(ICSSoft.STORMNET.DataObject,ICSSoft.STORMNET.DataObject,System.Boolean)">
            <summary>
            Сравнить два объекта данных и вернуть список различающихся .Net-свойств. (Объект или свойство с атрибутом NotStored проверяться не будет)
            </summary>
            <param name="obj1">1-й объект данных</param>
            <param name="obj2">2-й объект данных</param>
            <param name="WithDetailsComparing">со сравниванием детейловах объектов</param>
            <returns>одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAlteredPropertyNamesWithNotStored(ICSSoft.STORMNET.DataObject,ICSSoft.STORMNET.DataObject,System.Boolean)">
            <summary>
            Сравнить два объекта данных и вернуть список различающихся .Net-свойств. (NotStored-атрибуты не игнорируются и тоже проверяются вместе с остальными)
            </summary>
            <param name="obj1">1-й объект данных</param>
            <param name="obj2">2-й объект данных</param>
            <param name="WithDetailsComparing">со сравниванием детейловах объектов</param>
            <returns>одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ContainsAlteredProps(ICSSoft.STORMNET.DataObject,ICSSoft.STORMNET.DataObject,System.Boolean)">
            <summary>
            Сравнить два объекта данных и вернуть true - если объекты различаются
            </summary>
            <param name="obj1">1-й объект данных</param>
            <param name="obj2">2-й объект данных</param>
            <param name="WithDetailsComparing">со сравниванием детейловах объектов</param>
            <returns>одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAllPropertyNames(System.Type)">
            <summary>
            Вернуть все имена .Net-свойств для .Net-типа класса объекта данных
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <returns>одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.CheckPropertyExist(System.Type,System.String)">
            <summary>
            Проверить есть ли такое свойство в указанном типе
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <param name="propName">Имя свойства</param>
            <returns>true - свойство есть, false - нет</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAutoStoreMastersDisabled(System.Type)">
            <summary>
            Вернуть имена .Net-свойств для .Net-типа класса объекта данных, мастеровых,
            для которых отключено автосохранение атрибутом <see cref="T:ICSSoft.STORMNET.AutoStoreMasterDisabled"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetStorablePropertyNames(System.Type)">
            <summary>
            Вернуть имена .Net-свойств для .Net-типа класса объекта данных, 
            которые хранятся (не содержат атрибут <see cref="T:ICSSoft.STORMNET.NotStoredAttribute"/>)
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <returns>одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyNamesForInsert(System.Type)">
            <summary>
            Получить все свойства объекта, которые являются хранимыми и требуются при создании экземпляра объекта в БД
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <returns>Одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetNotStorablePropertyNames(System.Type)">
            <summary>
            Вернуть имена .Net-свойств для .Net-типа класса объекта данных, 
            которые не хранятся (управление атрибутом <see cref="T:ICSSoft.STORMNET.NotStoredAttribute"/>)
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <returns>одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.IsStoredProperty(System.Type,System.String)">
            <summary>
            Хранимое ли свойство
            </summary>
            <param name="type">тип объекта данных</param>
            <param name="propName">свойство</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.IsStoredType(System.Type)">
            <summary>
            Хранимый ли класс
            </summary>
            <param name="type">тип объекта данных</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.CanWriteProperty(System.Type,System.String)">
            <summary>
            Можно ли писать в это свойство
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.CanReadProperty(System.Type,System.String)">
            <summary>
            Можно ли читать из этого свойства
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyNamesByType(System.Type,System.Type)">
            <summary>
            Возвращает список свойств указанного шаблонного типа для .Net-класса объекта данных
            </summary>
            <param name="typeofDataObject">.Net-тип класса объекта данных</param>
            <param name="templatetype">шаблонный тип свойства</param>
            <returns>одномерный строковый массив имён свойств</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetAgregatePropertyName(System.Type)">
            <summary>
            Получить имя свойства -- шапки, указанного атрибутом <see cref="T:ICSSoft.STORMNET.AgregatorAttribute"/>)
            </summary>
            <param name="type">.Net-тип класса объекта данных</param>
            <returns>имя свойства</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetDetailArrayPropertyName(System.Type,System.Type)">
            <summary>
            Получить имя свойства, в котором хранится массив детейлов определенного типа.
            </summary>
            <param name="aggregatorType">Тип агрегатора.</param>
            <param name="detailType">Тип детейлов.</param>
            <returns>Имя свойства. В случае отсутствия в типе агрегатора детейла указанного типа, будет возвращен null.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyName(System.Type,System.Type,System.Boolean)">
            <summary>
            Получить имя свойства, у которого установлен указанный атрибут.
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetOrderPropertyName(System.Type)">
            <summary>
            Вернуть свойство, по которому нужно упорядочивать
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetExpressionForProperty(System.Type,System.String)">
            <summary>
            Вернуть выражения, указанные атрибутами <see cref="T:ICSSoft.STORMNET.DataServiceExpressionAttribute"/> для свойства.
            </summary>
            <param name="type">тип</param>
            <param name="propName">свойство</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyExpression(System.Type,System.String,System.Type)">
            <summary>
            Вернуть выражение с учетом DataService. <see cref="T:ICSSoft.STORMNET.DataServiceExpressionAttribute"/> для свойства.
            </summary>
            <param name="type">Тип объекта.</param>
            <param name="propertyName">Имя свойства.</param>
            <param name="dataServiceType">Тип сервиса данных.</param>
            <returns>Строка выражения.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetLoadingOrder(System.Type)">
            <summary>
            Вернуть порядок (установленный <see cref="T:ICSSoft.STORMNET.LoadingOrderAttribute"/>), в соответствии с которым происходит загрузка свойств объекта данных.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.CheckUsingType(ICSSoft.STORMNET.DataObject)">
            <summary>
            Проверка на совместимость объекта данных в  методе, или свойстве, откуда вызвано.
            Проверяет мастеровые свойства объектов данных и детейлов
            </summary>
            <param name="testObj"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.prv_MakeGraph(System.String[][])">
            <summary>
            По массиву нескольких описаний порядков возвращает общий порядок
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetClassImage(System.Type)">
            <summary>
            Вернуть картинку для класса, установленную атрибутом <see cref="T:ICSSoft.STORMNET.ClassImageFileAttribute"/>.
            </summary>
            <param name="dataObjectType">Объект данных этого класса</param>
            <returns>Картинка</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetIconForClass(System.Type)">
            <summary>
            Вернуть иконку для класса, установленную атрибутом
            </summary>
            <param name="dataObjectType">Объект данных этого класса</param>
            <returns>иконка</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetClassCaptionProperty(System.Type)">
            <summary>
            Вернуть свойство - заголовок, установленное атрибутом <see cref="T:ICSSoft.STORMNET.InstanceCaptionPropertyAttribute"/>
            </summary>
            <param name="dataobjectType"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetExternalImageProvider(System.Type,System.String@,System.String@)">
            <summary>
            Вернуть провайдер картинок для класса
            </summary>
            <param name="dataobjectType"></param>
            <param name="SignatureValue"></param>
            <param name="SignaturePropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetClassImageProperty(System.Type)">
            <summary>
            Вернуть свойство-картинку, установленное атрибутом <see cref="T:ICSSoft.STORMNET.ClassImagePropertyAttribute"/>.
            </summary>
            <param name="dataobjectType"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetClassCustomAttr(System.Type,System.Type,System.Boolean)">
            <summary>
            Вернуть атрибут для класса.
            </summary>
            <param name="dataobjectType"></param>
            <param name="AtrType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetImageForInstance(ICSSoft.STORMNET.DataObject)">
            <summary>
            Вернуть картинку для объекта
            </summary>
            <param name="dobject"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetCachesInfo">
            <summary>
            Получить информацию о всех кэшах Information
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetClassCaption(System.Type)">
            <summary>
            Вернуть заголовок для класса.
            </summary>
            <param name="dataobjectType"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.TranslateValueToPrimaryKeyType(System.Type,System.Object)">
            <summary>
            Преобразовать значение к типу ключей объектов класса.
            </summary>
            <param name="dataobjecttype"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetMostCompatibleType(System.Type,System.Type[])">
            <summary>
            Возвращает общего предка.
            </summary>
            <param name="testType"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetStorageTypeForType(System.Type,System.Type)">
            <summary>
            Вернуть тип хранения для заданного типа.
            </summary>
            <param name="type"></param>
            <param name="DataServiceType"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetStorageType(System.Object,System.Type)">
            <summary>
            Вернуть тип хранения для заданного значения.
            </summary>
            <param name="value"></param>
            <param name="DataServiceType"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyStorageType(System.Type,System.String,System.Type)">
            <summary>
            Вернуть тип хранения для заданного свойства.
            </summary>
            <param name="dataobjecttype"></param>
            <param name="propname"></param>
            <param name="DataServiceType"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.IsEmptyPropertyValue(System.Object)">
            <summary>
            Является ли значение пустым (null)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.IsEmptyEnumValue(System.Object)">
            <summary>
            Является ли значение перечислимого пустым (null)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetMastersForDataObjectByView(ICSSoft.STORMNET.DataObject,System.String)">
            <summary>
            Возвращает все мастеровые объекты данных для указанного объекта данных.
            Анализ мастеров происходит по указанному представлению.
            Мастер попадет в список возвращаемых, если в представлении указано хотябы одно его свойство,
            иначе будет считаться, что загружается только ссылка, а не весь мастер.
            </summary>
            <param name="viewName">Наименование представления объекта данных.</param>
            <param name="dataObject">
            Объекта данных, у которого будет искаться указанное представление.
            Объект данных должен быть уже загружен по указанному представлению, тогда метод отработает правильно.
            </param>
            <returns>Список мастеров объекта данных.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetPropertyDataFormat(System.Type,System.String)">
            <summary>
            Получить формат представления данных в свойстве
            </summary>
            <param name="type">Тип объекта</param>
            <param name="property">Свойство, для которого ищется формат</param>
            <returns>Формат данных</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Извлечение свойства внутри текущего класса
            <code>
            // Пример использования:
            ExtractPropertyName[T](() => objectInstance.Name); // вернет "Name", T - тип объекта objectInstance
            ExtractPropertyName[T](() => objectInstance.Master.Name); // вернет "Name", T - тип объекта objectInstance
            </code>
            </summary>
            <typeparam name="TSource"> Тип класса - источника </typeparam>
            <param name="propertyExpression"> Лямбда - выражение для доступа к свойству </param>
            <returns> Имя свойства (одиночное!) </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Explicit извлечение свойства по типу
            <code>
            // Пример использования:
            ExtractPropertyName(a =&gt; a.Name); // вернет "Name"
            ExtractPropertyName(a =&gt; a.b.c.Name); // вернет "Name"
            </code>
            </summary>
            <typeparam name="TSource">
            Тип класса - источника 
            </typeparam>
            <param name="propertyExpression">
            Лямбда - выражение для доступа к свойству 
            </param>
            <returns>
            Имя свойства (одиночное!) 
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ExtractPropertyPath``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Рекурсивный метод получения пути для свойства, заданного через вложенную лямбду.
            Лямбда-выражение может содержать вложенные обращения к мастерам.
            <code>
            // Пример использования:
            ExtractPropertyPath[T](() => objectInstance.Name); // вернет "Name", T - тип объекта objectInstance
            ExtractPropertyPath[T](() => objectInstance.Master.Name); // вернет "Master.Name", T - тип объекта objectInstance
            </code>
            </summary>
            <typeparam name="TProperty"> Тип свойства </typeparam>
            <param name="propertyExpression"> Лямбда - выражение для доступа к свойству </param>
            <returns> Полный путь к свойству (разделение через точку) </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ExtractPropertyPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Рекурсивный метод получения пути для свойства, заданного через вложенную лямбду.
            Лямбда-выражение может содержать вложенные обращения к мастерам.
            <code>
            // Пример использования:
            ExtractPropertyPath(a => a.Name); // вернет "Name"
            ExtractPropertyPath(a => a.b.c.Name); // вернет "b.c.Name"
            </code>
            </summary>
            <typeparam name="TSource"> Тип класса - источника </typeparam>
            <param name="propertyExpression"> Лямбда - выражение для доступа к свойству </param>
            <returns>
            Полный путь к свойству (разделение через точку) 
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.InternalExtractPropertyPath(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Рекурсивный метод получения пути для свойства, заданного через вложенную лямбду.
            Лямбда-выражение может содержать вложенные обращения к мастерам.
            <code>
            Пример использования:
            ExtractPropertyPath(a => a.Name); // вернет "Name"
            ExtractPropertyPath(a => a.b.c.Name); // вернет "b.c.Name"
            ExtractPropertyPath[T](() => objectInstance.Name); // вернет "Name", T - тип объекта objectInstance
            ExtractPropertyPath[T](() => objectInstance.Master.Name); // вернет "Master.Name", T - тип объекта objectInstance
            </code>
            </summary>
            <param name="propertyExpression"> Лямбда - выражение для доступа к свойству </param>
            <returns> Полный путь к свойству (разделение через точку) </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.InternalExtractPropertyPath(System.Linq.Expressions.MemberExpression)">
            <summary>
            Рекурсивный метод получения пути для свойства, заданного через вложенную лямбду.
            Лямбда-выражение может содержать вложенные обращения к мастерам.
            </summary>
            <param name="propertyExpression"> Лямбда - выражение для доступа к свойству </param>
            <returns> Полный путь к свойству (разделение через точку) </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ExtractPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Explicit извлечение свойства по типу
            </summary>
            <typeparam name="TSource"> Тип класса - источника </typeparam>
            <param name="propertyExpression"> Лямбда - выражение для доступа к свойству </param>
            <returns> <see cref="T:System.Reflection.PropertyInfo"/> свойства (самого последнего) </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.InternalExtractPropertyInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            The internal extract property info.
            </summary>
            <param name="propertyExpression">
            The property expression.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/>.
            </returns>
            <exception cref="T:System.ArgumentException"> Выражение должно являться свойством </exception>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ExtractMemberExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Метод получения MemberExpression из лямбда-выражения
            </summary>
            <param name="propertyExpression"> Выражение для получения значения свойства. </param>
            <returns> <see cref="T:System.Linq.Expressions.MemberExpression"/> для получения значения </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.InternalExtractPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Получение названия свойства по лямбде
            </summary>
            <param name="propertyExpression">
            The property Expression.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.RetrieveLinkerTimestamp(System.String)">
            <summary>
            Получить дату компиляции сборки.
            </summary>
            <param name="filePath">
            Путь до сборки, для которой будет возвращена дата компиляции.
            </param>
            <returns>
            Дата компиляции сборки.
            </returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.RetrieveLinkerTimestamp">
            <summary>
            Получить дату линковки сборки, которая содержит метод, вызывающий данный метод.
            </summary>
            <returns>Дата линковки сборки.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.GetLookupCustomizationString(ICSSoft.STORMNET.View,System.String)">
            <summary>
            Получить описание лукапа из атрибутов объекта данных
            </summary>
            <param name="view">Представление</param>
            <param name="masterName">Имя мастера</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.ParsePropertyValue(System.Type,System.String,System.String)">
            <summary>
            Метод преобразования строкового значения с объектное значение.
            </summary>
            <param name="tp">Тип объекта данных.</param>
            <param name="propertyName">Имя свойства, значение которого необходимо преобразовать.</param>
            <param name="value">Строковое значение свойства.</param>
            <returns>Преобразованное в тип свойства строковое значение.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Information.CheckAccessToAttribute(System.Type,System.String,System.Object@)">
            <summary>
            Проверка прав на атрибуты объекта. Метод является оберткой для метода CheckAccessToAttribute класса <see cref="!:ICSSoft.STORMNET.RightManager"/> и используется для проверки прав в Get'ерах вычислимых свойств DataObject.
            Обработка мастеров не проиводится.
            </summary>
            <param name="type">Тип объекта данных.</param>
            <param name="propertyName">Имя свойства объекта данных, на которое проверяются права.</param>
            <param name="deniedAccessValue">Значение атрибута при отсутствии прав.</param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.Information.GetPropertiesInExpressionDelegate">
            <summary>
            Возвращает ???
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Information.ChangeClassStorageNameDelegate">
            <summary>
            Делегат для смены ClassStorageName (можно подставить имя_базы.dbo.имя_таблицы, например)
            </summary>
            <param name="classType">Тип класса</param>
            <param name="originalStorageName">Оригинальный StorageName</param>
            <returns>новый StorageName (если пустое или null, то возьмём оригинальное)</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.KeyGen.KeyGenerator">
            <summary>
            Статический класс генерации ключей, через который генерируются все первичные ключи
            Он использует для генерации ключа генераторы, наследуемые от BaseKeyGenerator.
            Этот конкретный генератор прописывается непосредственно объекту данных специальным атрибутом <see cref="T:ICSSoft.STORMNET.KeyGeneratorAttribute"/>.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:ICSSoft.STORMNET.KeyGen.KeyGenerator"/> class from being created.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.Generator(ICSSoft.STORMNET.DataObject)">
            <summary>
            Возвращает непосредственно генератор, производный от <see cref="T:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator"/>.
            Удобно, если требуется использовать у этого генератора методы,
            отличные от имеющихся в BaseKeyGenerator.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.Generator(System.Type)">
            <summary>
            Возвращает непосредственно генератор, производный от <see cref="T:ICSSoft.STORMNET.KeyGen.BaseKeyGenerator"/>.
            Удобно, если требуется использовать у этого генератора методы,
            отличные от имеющихся в BaseKeyGenerator.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.GenerateUnique(ICSSoft.STORMNET.DataObject,System.Object)">
            <summary>
            Сгенерировать ключ и установить его в объект данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.Generate(ICSSoft.STORMNET.DataObject,System.Object)">
            <summary>
            Сгенерировать ключ и установить его в объект данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.Generate(System.Type,System.Object)">
            <summary>
            Сгенерировать ключ
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.GenerateUnique(System.Type,System.Object)">
            <summary>
            Сгенерировать ключ
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.KeyType(ICSSoft.STORMNET.DataObject)">
            <summary>
            Возвращает тип ключа (например, для GUIDGenerator это typeof(Guid))
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.KeyGen.KeyGenerator.KeyType(System.Type)">
            <summary>
            Возвращает тип ключа (например, для GUIDGenerator это typeof(Guid))
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Convertors.InOperatorsConverter">
            <summary>
            Класс конвертации значений одного типа к другому типу посредством одного преобразования (Implicit или Explicit).
            Только статические методы работы.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.#ctor">
            <summary>
            Запретим создавать экземпляры этого класса.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Convertors.InOperatorsConverter.ParsedTypes">
            <summary>
            Кеш разобранных ранее типов.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeToTypeMethods">
            <summary>
            Кеш методов конвертации типов.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.CanConvert(System.Type,System.Type)">
            <summary>
            Можно ли преобразовать один тип к другому.
            </summary>
            <param name="fromType">Откуда будем преобразовывать.</param>
            <param name="toType">Куда будем преобразовывать.</param>
            <returns>Если можно преобразовать, то <c>true</c>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.Convert(System.Object,System.Type)">
            <summary>
            Преобразовать значение.
            </summary>
            <param name="value">Значение для преобразования.</param>
            <param name="toType">Тип, в который надо преобразовать.</param>
            <returns>Преобразованное значение.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.AddTypeOperator(System.Type)">
            <summary>
            Добавить тип и все его преобразования в кеш.
            </summary>
            <param name="type">Тип для добавления.</param>
        </member>
        <member name="T:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair">
            <summary>
            Пара типов, применяется для организации ключей в коллекции.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair.FromType">
            <summary>
            Первый тип в паре.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair.ToType">
            <summary>
            Второй тип в паре.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair.#ctor(System.Type,System.Type)">
            <summary>
            Пара типов, применяется для организации ключей в коллекции.
            </summary>
            <param name="fromType">Первый тип в паре.</param>
            <param name="toType">Второй тип в паре.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair.GetHashCode">
            <summary>
            Serves as a hash function for a type. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="T:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePairEqualityComparer">
            <summary>
            Класс для сравнения объектов типа <see cref="T:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair"/>.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePairEqualityComparer.Equals(ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair,ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair)">
            <summary>
            Determines whether two objects of type <see cref="T:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair"/> are equal.
            </summary>
            <returns>
            If the specified objects are equal then <c>true</c>; otherwise, <c>false</c>.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePairEqualityComparer.GetHashCode(ICSSoft.STORMNET.Convertors.InOperatorsConverter.TypeTypePair)">
            <summary>
            Serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
            </exception>
        </member>
        <member name="T:ICSSoft.STORMNET.Security.EmptySecurityManager">
            <summary>
            Менеджер полномочий без проверки полномочий.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Security.ISecurityManager">
            <summary>
            Интерфейс для менеджера полномочий. Является основным API для доступа к подсистеме полномочий со стороны программистов.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.AccessCheck(System.Int32)">
            <summary>
            Упрощённая проверка полномочий (на одну числовую операцию).
            </summary>
            <param name="operation">Идентификатор операции (такой, как указан для операции в AzMan или в имени операции).</param>
            <returns>Если у текущего пользователя есть доступ, то <c>true</c>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.AccessObjectCheck(System.Type,ICSSoft.STORMNET.Security.tTypeAccess,System.Boolean)">
            <summary> 
            Проверка операций с объектом по его типу. Работает только на тип целиком.
            </summary>
            <param name="type">Тип объекта данных.</param>
            <param name="operation">Тип операции.</param>
            <param name="throwException">Генерировать ли исключение.</param>
            <returns>Если у текущего пользователя есть доступ, то <c>true</c>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.AccessObjectCheck(System.Object,ICSSoft.STORMNET.Security.tTypeAccess,System.Boolean)">
            <summary> 
            Проверка операций с объектом.
            </summary>
            <param name="type">Объект данных.</param>
            <param name="operation">Тип операции.</param>
            <param name="throwException">Генерировать ли исключение.</param>
            <returns>Если у текущего пользователя есть доступ, то <c>true</c>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.GetLimitForAccess(System.Type,ICSSoft.STORMNET.Security.tTypeAccess,System.Object@,System.Boolean@)">
            <summary>
            Получить ограничение для текущего пользователя.
            </summary>
            <param name="subjectType">Тип объекта.</param>
            <param name="operation">Тип операции.</param>
            <param name="limit">Ограничение, которое есть для текущего пользователя.</param>
            <param name="canAccess">Есть ли доступ к этому типу у пользователя.</param>
            <returns>Результат выполнения операции.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.GetLimitStrForRoles(System.Type,System.Collections.Generic.List{ICSSoft.STORMNET.Security.RoleWithAccesses}@)">
            <summary>
            Получить роли с заданными ограничениями, которые реализуют функцию разграничения по объектам.
            </summary>
            <param name="subjectType">Класс, для которого получаем ограничения.</param>
            <param name="rolesWithAccesses">Роли с заданными ограничениями для этих ролей.</param>
            <returns>Результат выполнения операции.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.SetLimitStrForRole(System.Type,ICSSoft.STORMNET.Security.tTypeAccess,System.String,System.String)">
            <summary>
            Задать ограничение для указанной роли.
            </summary>
            <param name="typeName">Тип объектов данных, для которых будет применяться данный фильтр.</param>
            <param name="operation">Тип доступа, для которого применяется этот фильтр.</param>
            <param name="roleName">Название роли.</param>
            <param name="filter">Сериализованный фильтр, который будет применяться для указанной роли.</param>
            <returns>Результат выполнения операции.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.CheckExistLogin(System.String)">
            <summary>
            Проверить наличие в системе логина (чувствительность к регистру зависит от настроек источника данных). Уникальность проверяется без контроля доменов, то есть гарантируется уникальность в рамках всей таблицы. Отключенные пользователи тоже учитываются, как занимающие логин.
            </summary>
            <param name="login">Логин, который проверяем.</param>
            <returns>Если логин свободен, то <see cref="F:ICSSoft.STORMNET.Security.OperationResult.ЛогинСвободен"/>, если занят, то <see cref="F:ICSSoft.STORMNET.Security.OperationResult.ЛогинЗанят"/>, если произошла ошибка, то <see cref="F:ICSSoft.STORMNET.Security.OperationResult.ОшибкаВыполненияОперации"/>, если переданы неправильные аргументы, то <see cref="F:ICSSoft.STORMNET.Security.OperationResult.ОшибочныеАргументы"/>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityManager.CheckAccessToAttribute(System.String,System.String@)">
            <summary>
            Метод проверки прав на доступ текущего пользователя к операции, заданной в <see cref="T:ICSSoft.STORMNET.DataServiceExpressionAttribute"/> атрибута.
            </summary>
            <param name="expression">Строка <see cref="T:ICSSoft.STORMNET.DataServiceExpressionAttribute"/>.</param>
            <param name="deniedAccessValue">Значение, которое должен получить атрибут при отсутствии прав.</param>
            <returns>Если у текущего пользователя есть доступ, то <c>true</c>.</returns>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.ISecurityManager.Enabled">
            <summary>
            Полномочия включены.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.ISecurityManager.UseRightsOnObjects">
            <summary>
            Используется режим проверки вплоть до объектов (а не для всего типа сразу).
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.ISecurityManager.UseRightsOnAttribute">
            <summary>
            Используется режим проверки атрибутов объектов.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.ISecurityManager.AttributeCheckExpressionPattern">
            <summary>
            Регулярное выражение для извлечения информации о контроле прав на атрибуты из <see cref="!:DataServiceExpression"/>.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.AccessCheck(System.Int32)">
            <summary>
            Упрощённая проверка полномочий (на одну числовую операцию). Всегда возвращается <c>true</c>.
            </summary>
            <param name="operation">Идентификатор операции (такой, как указан для операции в AzMan или в имени операции).</param>
            <returns>Всегда возвращается <c>true</c>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.AccessObjectCheck(System.Type,ICSSoft.STORMNET.Security.tTypeAccess,System.Boolean)">
            <summary> 
            Проверка операций с объектом. Всегда возвращается <c>true</c>.
            </summary>
            <param name="type">Тип объекта данных.</param>
            <param name="operation">Тип операции.</param>
            <param name="throwException">Генерировать ли исключение.</param>
            <returns>Всегда возвращается <c>true</c>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.AccessObjectCheck(System.Object,ICSSoft.STORMNET.Security.tTypeAccess,System.Boolean)">
            <summary> 
            Проверка операций с объектом. Всегда возвращается <c>true</c>.
            </summary>
            <param name="type">Объект данных.</param>
            <param name="operation">Тип операции.</param>
            <param name="throwException">Генерировать ли исключение.</param>
            <returns>Всегда возвращается <c>true</c>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.GetLimitForAccess(System.Type,ICSSoft.STORMNET.Security.tTypeAccess,System.Object@,System.Boolean@)">
            <summary>
            Получить ограничение для текущего пользователя.
            </summary>
            <param name="subjectType">Тип объекта.</param>
            <param name="operation">Тип операции.</param>
            <param name="limit">Ограничение, которое есть для текущего пользователя. Всегда возвращается <c>null</c>.</param>
            <param name="canAccess">Есть ли доступ к этому типу у пользователя. Всегда возвращается <c>true</c>.</param>
            <returns>Всегда возвращается <see cref="F:ICSSoft.STORMNET.Security.OperationResult.Успешно"/>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.GetLimitStrForRoles(System.Type,System.Collections.Generic.List{ICSSoft.STORMNET.Security.RoleWithAccesses}@)">
            <summary>
            Получить роли с заданными ограничениями, которые реализуют функцию разграничения по объектам. Всегда возвращается <c>null</c>.
            </summary>
            <param name="subjectType">Класс, для которого получаем ограничения.</param>
            <param name="rolesWithAccesses">Роли с заданными ограничениями для этих ролей.</param>
            <returns>Всегда возвращается <see cref="F:ICSSoft.STORMNET.Security.OperationResult.Успешно"/>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.SetLimitStrForRole(System.Type,ICSSoft.STORMNET.Security.tTypeAccess,System.String,System.String)">
            <summary>
            Задать ограничение для указанной роли.
            </summary>
            <param name="typeName">Тип объектов данных, для которых будет применяться данный фильтр.</param>
            <param name="operation">Тип доступа, для которого применяется этот фильтр.</param>
            <param name="roleName">Название роли.</param>
            <param name="filter">Сериализованный фильтр, который будет применяться для указанной роли.</param>
            <returns>Всегда возвращается <see cref="F:ICSSoft.STORMNET.Security.OperationResult.Успешно"/>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.CheckExistLogin(System.String)">
            <summary>
            Проверить наличие в системе логина. Всегда возвращается <see cref="F:ICSSoft.STORMNET.Security.OperationResult.ЛогинСвободен"/>.
            </summary>
            <param name="login">Логин, который проверяем.</param>
            <returns>Всегда возвращается <see cref="F:ICSSoft.STORMNET.Security.OperationResult.ЛогинСвободен"/>.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.EmptySecurityManager.CheckAccessToAttribute(System.String,System.String@)">
            <summary>
            Метод проверки прав на доступ текущего пользователя к операции, заданной в <see cref="T:ICSSoft.STORMNET.DataServiceExpressionAttribute"/> атрибута.
            </summary>
            <param name="expression">Строка <see cref="T:ICSSoft.STORMNET.DataServiceExpressionAttribute"/>.</param>
            <param name="deniedAccessValue">Значение, которое должен получить атрибут при отсутствии прав.</param>
            <returns><c>true</c> - права есть, <c>false</c> - прав нет.</returns>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.EmptySecurityManager.Enabled">
            <summary>
            Полномочия выключены, всегда возвращается <c>false</c>.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.EmptySecurityManager.UseRightsOnObjects">
            <summary>
            Режим проверки вплоть до объектов, а не для всего типа сразу, выключен - всегда возвращается <c>false</c>.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.EmptySecurityManager.UseRightsOnAttribute">
            <summary>
            Режим проверки атрибутов объектов выключен - всегда возвращается <c>false</c>.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.Security.EmptySecurityManager.AttributeCheckExpressionPattern">
            <summary>
            Регулярное выражение для извлечения информации о контроле прав на атрибуты из DataServiceExpression.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Security.ISecurityService">
            <summary>
            Интерфейс для сервиса полномочий.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.GetProfileInfo(System.String,System.Nullable{System.Guid}@,System.String@)">
            <summary>
            Получить информацию о пользователе (ключ агента и имя в базе полномочий).
            </summary>
            <param name="login">Логин, по которому ищем.</param>
            <param name="agentKey">Ключ агента.</param>
            <param name="name">Дружественное имя, которое присутсвует в системе полномочий.</param>
            <returns>Успешность выполнения операции.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.CheckExistLogin(System.String)">
            <summary>
            Проверить наличие в системе логина (чувствительность к регистру зависит от настроек источника данных). Уникальность проверяется без контроля доменов, то есть гарантируется уникальность в рамках всей таблицы. Отключенные пользователи тоже учитываются, как занимающие логин.
            </summary>
            <param name="login">Логин, который проверяем.</param>
            <returns>OperationResult.ЛогинСвободен, OperationResult.ЛогинЗанят, OperationResult.ОшибкаВыполненияОперации, OperationResult.ОшибочныеАргументы.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.ChangePassword(System.Guid,System.String,System.String)">
            <summary>
            Проверить наличие в системе логина (чувствительность к регистру зависит от настроек источника данных). Уникальность проверяется без контроля доменов, то есть гарантируется уникальность в рамках всей таблицы. Отключенные пользователи тоже учитываются, как занимающие логин.
            </summary>
            <param name="userKey">Ключ пользователя.</param>
            <param name="oldPassword">Старый пароль.</param>
            <param name="newPassword">Новый пароль.</param>
            <returns>OperationResult.ЛогинСвободен, OperationResult.ЛогинЗанят, OperationResult.ОшибкаВыполненияОперации, OperationResult.ОшибочныеАргументы.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.CheckAccessClass(System.Guid,System.String,System.String)">
            <summary>
            Проверить полномочия на доступ к классу (проверяется как сам класс, так и все его роли и группы) ВАЖНО: Проверка на актуальность пользователя не производится, т.к. считается, что заблокированный пользователь отсекается на этапе логирования. Нужно будет сделать отключение сессии пользователя при его отключении в БД.
            </summary>
            <param name="userKey">Ключ пользователя.</param>
            <param name="subjectName">Имя объекта.</param>
            <param name="typeAccess">Запрашиваемый тип доступа.</param>
            <returns>Наличие данных полномочий.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.CheckAccessOperation(System.Guid,System.String)">
            <summary>
            Проверить операцию.
            </summary>
            <param name="userKey">Ключ пользователя.</param>
            <param name="operationName">Имя операции.</param>
            <returns>Наличие данных полномочий.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.GetAllPermitions(System.Guid,System.Collections.Generic.List{System.String}@)">
            <summary>
            Получить все субъекты, на которые есть права у данного пользователя.
            </summary>
            <param name="userKey">Ключ пользователя.</param>
            <param name="subjects">Список доступных субъектов.</param>
            <returns>Успешность выполнения операции.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.UpdateUser(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Обновить информацию о пользователе. Если такого логина не было, то будет создан новый пользователь.
            </summary>
            <param name="login">Логин пользователя.</param>
            <param name="name">Имя пользователя в человеческом варианте.</param>
            <param name="pwd">Пароль в чистом виде.</param>
            <param name="enabled">Активна ли учётная запись.</param>
            <returns>Успешность выполнения операции.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Security.ISecurityService.UpdateProfileInfo(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Обновить информацию о профиле пользователя. Можно обновить имя пользователя, а также управлять его активностью.
            </summary>
            <param name="login">Логин пользователя.</param>
            <param name="name">Имя пользователя в человеческом варианте.</param>
            <param name="enabled">Активна ли учётная запись.</param>
            <returns>Успешность выполнения операции.</returns>
        </member>
        <member name="T:ICSSoft.STORMNET.Security.OperationResult">
            <summary>
            Перечислимый тип для вывода результата операции.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.ОшибкаВыполненияОперации">
            <summary>
            Во время выполнения операции произошла ошибка.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.Успешно">
            <summary>
            Всё хорошо.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.НеправильныйПароль">
            <summary>
            Указан неверный пароль.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.ОшибочныеАргументы">
            <summary>
            Неправильно указаны аргументы.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.ВДоступеОтказать">
            <summary>
            В доступе отказать.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.ПользовательНеНайден">
            <summary>
            Данный пользователь в системе не найден.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.ЛогинЗанят">
            <summary>
            Логин занят другим пользователем.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.OperationResult.ЛогинСвободен">
            <summary>
            Логин доступен для регистрации.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.tTypeAccess.Full">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.tTypeAccess.Read">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.tTypeAccess.Insert">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.tTypeAccess.Update">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.tTypeAccess.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.tTypeAccess.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.tTypeAccess.Print">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Security.UpdateResult">
            <summary>
            Результат обновления пользователя.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.UpdateResult.ПользовательОбновлён">
            <summary>
            Всё сработало правильно и пользователь обновлён.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.UpdateResult.ПользовательСоздан">
            <summary>
            Всё сработало правильно и пользователь создан.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.UpdateResult.ЛогинЗапрещён">
            <summary>
            Данный логин запрещён.
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Security.UpdateResult.ОшибкаВыполнения">
            <summary>
            Во время выполнения операции произошла ошибка.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.TypeKeyPair">
            <summary>
            Вспомогательный класс для объединения в пары типа объекта и ключа.
            Используется в коллекции "живущих" сейчас объектов, собственно,
            для доступа к объекту.
            </summary> 
        </member>
        <member name="M:ICSSoft.STORMNET.TypeKeyPair.#ctor(System.Type,System.Object)">
            <summary>
            Вспомогательный класс для объединения в пары типа объекта и ключа
            Используется в коллекции "живущих" сейчас объектов, собственно,
            для доступа к объекту.
            </summary>
            <param name="type">Тип объекта.</param>
            <param name="key">Ключ объекта.</param>
        </member>
        <member name="F:ICSSoft.STORMNET.TypeKeyPair.Type">
            <summary>
            Тип объекта данных (.NET).
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.TypeKeyPair.Key">
            <summary>
            Первичный ключ объекта данных.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeKeyPair.CompareTo(System.Object)">
            <summary>
            Сравнение двух пар.
            </summary>
            <param name="obj">Объект для сравнения.</param>
            <returns>Результат сравнения.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeKeyPair.GetHashCode">
            <summary>
            Serves as a hash function for a type. 
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="T:ICSSoft.STORMNET.TypeKeyPairEqualityComparer">
            <summary>
            Класс для сравнения объектов типа <see cref="T:ICSSoft.STORMNET.TypeKeyPair"/>.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeKeyPairEqualityComparer.Equals(ICSSoft.STORMNET.TypeKeyPair,ICSSoft.STORMNET.TypeKeyPair)">
            <summary>
            Determines whether two objects of type <paramref name="x"/> are equal.
            </summary>
            <returns>
            True if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeKeyPairEqualityComparer.GetHashCode(ICSSoft.STORMNET.TypeKeyPair)">
            <summary>
            Serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param>
            <exception cref="T:System.ArgumentNullException">
            The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
            </exception>
        </member>
        <member name="T:ICSSoft.STORMNET.TypePropertyAtrValueCollection">
            <summary>
            коллекция с доступом по типу-свойству
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TypePropertyAtrValueCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.TypePropertyAtrValueCollection.Count">
            <summary>
            Количество элементов в коллекции
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.TypePropertyAtrValueCollection.Item(System.Type,System.String)">
            <summary>
            свойство-доступ
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.TypeAtrValueCollection">
            <summary>
            коллекция с доступом по типу
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeAtrValueCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.TypeAtrValueCollection.Count">
            <summary>
            Количество элементов в коллекции
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.TypeAtrValueCollection.Item(System.Type)">
            <summary>
            свойство-доступ
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.TypeUsage">
            <summary>
            Summary description for TypeUsageProvider.
            </summary>
            
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsage.GetUseTypesAs(System.Type)">
            <summary>
            вернуть используемые типы по шаблону
            </summary>
            <param name="dataObjectTypeTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsage.AddUseTypesAs(System.Type,System.Type[])">
            <summary>
            добавить типы по шаблону
            </summary>
            <param name="dataObjectTypeTmplate"></param>
            <param name="usageTypes"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsage.GetUsageTypes(System.Type,System.String)">
            <summary>
            вернуть UsageTypes для заданного типа-свойства
            </summary>
            <param name="DataObjectType"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsage.AddUsageTypes(System.Type,System.String,System.Type[])">
            <summary>
            добавить UsageTypes для заданного типа-свойства
            </summary>
            <param name="DataObjectType"></param>
            <param name="propertyName"></param>
            <param name="addtypes"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsage.SetUsageTypes(System.Type,System.String,System.Type[])">
            <summary>
            установить UsageTypes для заданного типа-свойства
            </summary>
            <param name="DataObjectType"></param>
            <param name="propertyName"></param>
            <param name="addtypes"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.TypeUsage.GetCombinedTypeUsage(System.Type,System.String)">
            <summary>
            вернуть с учетом пути и UsageType на каждом участке
            </summary>
            <param name="DataObjectType"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.TypeUsageProvider">
            <summary>
            класс для хранения статических TypeUsage
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.TypeUsageProvider.TypeUsage">
            <summary>
            
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Business.StorageTypeEnum">
            <summary>
            Тип структуры хранения
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageTypeEnum.SimpleStorage">
            <summary>
            Простое хранение (каждый класс в своем хранилище)
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageTypeEnum.HierarchicalStorage">
            <summary>
            Иерархическое хранение (Хранятся только свои атрибуты, 
            а атрибуты предка хранятся в его хранилище)
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.Business.StorageStructForView">
             <summary>
            структура для отображения представления в данные
             </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.props">
            <summary>
            свойства
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.sources">
            <summary>
            источники данных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.ID">
            <summary>
            ключ
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор для десериализации
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Данные для сериализации
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.Count">
            <summary>
            кличество раннее созданных
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.ToString">
            <summary>
            Как строка
            </summary>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef">
            <summary>
            описание хранилища для некоторого класса,в ветви наследованных объектов
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.Storage">
            <summary>
            название хранилища (ClassStorageName у класса)
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.PrimaryKeyStorageName">
            <summary>
            название хранилища для первичного ключа
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.objectLinkStorageName">
            <summary>
            название хранилища для свойства в классе,ссылающемся на данный
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.parentStorageindex">
            <summary>
            индекс хранилища для класса ссылающегося на данный в объемлющем PropSource
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.ownerType">
            <summary>
            тип класса с которым ассоциированно данное хранилище
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.TypeStorageName">
            <summary>
            Имя хранилища для типа
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Сздание при десериализации
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.ClassStorageDef.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Данные для сериализации
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage">
            <summary>
            хранилище для свойства
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.Name">
            <summary>
            имя свойства в представлении
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.source">
            <summary>
            в каком хранилище оно лежит
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.MastersTypes">
            <summary>
            для совойств DataObject-ного типа список типов мастеров для каждой  ветви выборки
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.MastersTypesCount">
            <summary>
            для совойств DataObject-ного,количество объектов в <see cref="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.MastersTypes"/>
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.storage">
            <summary>
            имя хранилища свойства, для каждой  ветви выборки
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.simpleName">
            <summary>
            имя свойств в объекте (без префикса доступа к объекту)
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.Stored">
            <summary>
            хранимый ли атрибут
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.Expression">
            <summary>
            формула для хранения вычислимых атрибутов
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.propertyType">
            <summary>
            тип свойства
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.MultipleProp">
            <summary>
            Используется ли это свойство несколько раз, и это уже не первый
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.AdditionalProp">
            <summary>
            Добавочное свойство (для вычислимых свойств, использующих свойства не загружаемые в представлении)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropStorage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:ICSSoft.STORMNET.Business.StorageStructForView.PropSource">
            <summary>
            описание хранилища для некоторого класса,в ветви мастеров
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.HierarchicalLink">
            <summary>
            Связь по иерархии
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.Name">
            <summary>
            имя источника данных с учетом влложенности
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.ObjectLink">
            <summary>
            имя мастера в объемдющем классе
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.storage">
            <summary>
            ветви наследования
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.LinckedStorages">
            <summary>
            ветви мастеров
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.Business.StorageStructForView.PropSource.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ICSSoft.STORMNET.DetailInView">
            <summary>
            описание представления для детейла в представлении шапки
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DetailInView.detailView">
            <summary>
            представление детейла
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DetailInView.detailName">
            <summary>
            имя детейла
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.DetailInView.detailLoadOnLoadAgregator">
            <summary>
            загружать ли детейл при загрузке шапки
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailInView.#ctor(System.String,ICSSoft.STORMNET.View,System.Boolean,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            
            </summary>
            <param name="detailname">имя детейла</param>
            <param name="detailview">представление детейла</param>
            <param name="detailLoadOnLoadAgregator">загружать ли детейл при загрузке шапки</param>
            <param name="detailPath">путь на форме</param>
            <param name="caption">заголовок</param>
            <param name="visible">видимость</param>
            <param name="aggregationfunctions">агр.функции</param>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailInView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.DetailInView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.UseAdaptiveTypeLoading">
            <summary>
            использовать ли адаптивную настройку представлений при загрузке данных
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.AdaptiveTypeViews">
            <summary>
            настройка адаптации
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.View">
            <summary>
            представление
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.Name">
            <summary>
            Имя детейлового свойства
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.Caption">
            <summary>
            Заголовок для детейла
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.FormPath">
            <summary>
            Путь на форме
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.LoadOnLoadAgregator">
            <summary>
            загружать ли вместе с владельцем
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.Visible">
            <summary>
            видимый-невидимый
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.DetailInView.AggregationFunctions">
            <summary>
            используемые агрегиррующие функции
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.MasterInView">
            <summary>
            настройка мастера (для визуальной части)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterInView.#ctor(System.String,ICSSoft.STORMNET.LookupTypeEnum,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="mastername">имя мастера</param>
            <param name="lookuptype">настройка лукапа</param>
            <param name="customizationstring"> тип лукапа</param>
            <param name="lookupProperty">свойство отображаемое при lookupe</param>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterInView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.MasterInView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterInView.MasterName">
            <summary>
            имя мастера
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterInView.CustomizationString">
            <summary>
            настройка лукапа
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterInView.LookupType">
            <summary>
            тип лукапа
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.MasterInView.LookupProperty">
            <summary>
            свойство отображаемое при lookupe
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.PropertyInView">
            <summary>
            Определение свойства в представлении.
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.PropertyInView.#ctor(System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="name">имя свойства</param>
            <param name="caption">заголовок</param>
            <param name="visible">видимость</param>
            <param name="formPath">путь на форме</param>
        </member>
        <member name="M:ICSSoft.STORMNET.PropertyInView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.PropertyInView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:ICSSoft.STORMNET.PropertyInView.Name">
            <summary>
            Имя аттрибута
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.PropertyInView.Caption">
            <summary>
            Заголовок для данного атрибута в данном представлении
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.PropertyInView.Visible">
            <summary>
            видимость атрибута
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.PropertyInView.FormPath">
            <summary>
            Путь на форме
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.View">
            <summary>
            Определение представления
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.View.Clone">
            <summary>
            Создание копии представления
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.#ctor">
            <summary>
            создать "заготовку" для представления
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.View.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.#ctor(ICSSoft.STORMNET.DataObject)">
            <summary>
            создать представление по объекту (вычитанным свойствам объекта)
            </summary>
            <param name="dobject"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.#ctor(System.Type,ICSSoft.STORMNET.View.ReadType)">
            <summary>
            создать представление по типу и критерию построения
            </summary>
            <param name="DataObjectType">тип</param>
            <param name="readType">как строить проедставление</param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetViewForMaster(System.String)">
            <summary>
            вернуть представление(ветку от текущего) для мастера
            </summary>
            <param name="master">имя свойства-мастера</param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetMaster(System.String)">
            <summary>
            вернуть описание мастера(настроичные данные)
            </summary>
            <param name="masterName"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.RemoveMaster(System.String)">
            <summary>
            удалить мастера
            </summary>
            <param name="masterName"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetDetail(System.String)">
            <summary>
            получить описание детейла
            </summary>
            <param name="detailName"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.RemoveDetail(System.String)">
            <summary>
            удалить детейл из представления
            </summary>
            <param name="detailname"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetProperty(System.String)">
            <summary>
            получить свойство из проедставления
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.CheckPropname(System.String)">
            <summary>
            Проверка наличия свойства в представлении.
            </summary>
            <param name="propName">Имя свойства.</param>
            <returns>Метод возвращает true, если переданное в качестве параметра свойство присутствует в представлении, и false в противном случае.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.CheckPropname(System.String,System.Boolean)">
            <summary>
            Проверка наличия свойства в представлении.
            </summary>
            <param name="propName">Имя свойства.</param>
            <param name="checkDetails">Искать ли имя свойства в детейлах, имеющихся в данном представлении.</param>
            <returns>Метод возвращает true, если переданное в качестве параметра свойство присутствует в представлении, и false в противном случае.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.RemoveProperty(System.String)">
            <summary>
            удалить свойство из представления
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.AddDetailInView(System.String,ICSSoft.STORMNET.View,System.Boolean)">
            <summary>
            Добавить detail в представление
            </summary>
            <param name="detailname"></param>
            <param name="detailview"></param>
            <param name="loadOnLoadAgregator"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.AddDetailInView(System.String,ICSSoft.STORMNET.View,System.Boolean,System.String,System.Boolean,System.String,System.String[])">
            <summary>
            Добавить detail в представление
            </summary>
            <param name="detailname"></param>
            <param name="detailview"></param>
            <param name="loadOnLoadAgregator"></param>
            <param name="path"></param>
            <param name="visible"></param>
            <param name="caption"></param>
            <param name="aggregateFunctions"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.AddMasterInView(System.String,ICSSoft.STORMNET.LookupTypeEnum,System.String,System.String)">
            <summary>
            Добавить описание мастера в представление
            </summary>
            <param name="masterName"></param>
            <param name="lookupType"></param>
            <param name="lookupcustomizationstring"></param>
            <param name="lookupProperty"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.AddMasterInView(System.String)">
            <summary>
            Добавить описание мастера в представление
            </summary>
            <param name="masterName"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.AddProperties(System.String[])">
            <summary>
            Добавить свойства
            </summary>
            <param name="propertyNames">Имена свойств</param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.AddProperty(System.String)">
            <summary>
            Добавить свойство
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.AddProperty(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Добавить свойство
            </summary>
            <param name="propName"></param>
            <param name="propCaption"></param>
            <param name="visible"></param>
            <param name="propPath"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.#ctor(ICSSoft.STORMNET.ViewAttribute,System.Type)">
            <summary>
            создать представление по описанию в атрибуте
            </summary>
            <param name="ViewDefAttribute"></param>
            <param name="ViewDefClass"></param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.LoadingAdaptation">
            <summary>
            Адаптировать представления для детейлов (в зависимости от типа)
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.View.LoadingAdaptation(System.Type)">
            <summary>
            Адаптировать представления для детейлов (в зависимости от типа)
            </summary>
            <param name="tp">тип по которому настраивать</param>
        </member>
        <member name="M:ICSSoft.STORMNET.View.SetAllAdaptive">
            <summary>
            Сделать все представление адаптируемым
            </summary>
        </member>
        <member name="M:ICSSoft.STORMNET.View.ToString">
            <summary>
            Строковое представление представления.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.ToString(System.Boolean)">
            <summary>
            в строку
            </summary>
            <param name="fullView"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.getViewForViews(ICSSoft.STORMNET.View,ICSSoft.STORMNET.View)">
            <summary>
            заготовка для 2-х представлений
            </summary>
            <param name="firstView"></param>
            <param name="secondView"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.op_BitwiseOr(ICSSoft.STORMNET.View,ICSSoft.STORMNET.View)">
            <summary>
            OR - Объединение
            </summary>
            <param name="firstView"></param>
            <param name="secondView"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.op_BitwiseAnd(ICSSoft.STORMNET.View,ICSSoft.STORMNET.View)">
            <summary>
            AND - Пересечение
            </summary>
            <param name="firstView"></param>
            <param name="secondView"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.op_Subtraction(ICSSoft.STORMNET.View,ICSSoft.STORMNET.View)">
            <summary>
            - Разность
            </summary>
            <param name="firstView"></param>
            <param name="secondView"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.op_ExclusiveOr(ICSSoft.STORMNET.View,ICSSoft.STORMNET.View)">
            <summary>
            exclusive-OR
            </summary>
            <param name="firstView"></param>
            <param name="secondView"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetOrderedIndexes(System.String[])">
            <summary>
            вернуть порядок упоминания свойств в представлении
            </summary>
            <param name="orderCols"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetPropertyIndex(System.String)">
            <summary>
            Получить индекс свойства в представлении.
            Метод был добавлен для удобства работы с LoadStringedVeiw,
            но убедитесь, что это именно то представление, которое 
            использовалось при загрузке и его никто не изменял
            </summary>
            <param name="PropertyName">Имя свойства</param>
            <returns>Индекс, начиная с 0. -1, если такого свойства нет</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.TestObjectForViewing(ICSSoft.STORMNET.DataObject)">
            <summary>
            Проверить объект на вычитанность по представлению.
            </summary>
            <param name="dobject">Объект данных, который проверяется по загруженности по представлению.</param>
            <returns><c>True</c>, если объект вычитан по представлению.</returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetCommonTypeForViews(ICSSoft.STORMNET.View[])">
            <summary>
            вернуть общий базовый класс для представлений
            </summary>
            <param name="views"></param>
            <returns></returns>
        </member>
        <member name="M:ICSSoft.STORMNET.View.GetLocalizedPropertyCaption(System.String,System.Globalization.CultureInfo)">
            <summary>
            Возвращает локализованную подпись свойства (в том числе и массива детейлов) из класса ресурсов Captions
            из пространства имен сборки с объектами
            </summary>
            <param name="propertyName">Имя свойства</param>
            <param name="culture">Культура (если не задать, то используется текущая культура)</param>
            <returns>Подпись (если не найден ресурс, то возвращается обычная Caption)</returns>
        </member>
        <member name="P:ICSSoft.STORMNET.View.MasterTypeFilters">
            <summary>
            ограничения по типам для вычитывания данных
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.View.GeneratedByType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.View.CreationReadType">
            <summary>
            
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.View.Name">
            <summary>
            Наименование представления.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.View.DefineClassType">
            <summary>
            тип, для которого определено пердставление
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.View.Details">
            <summary>
            Получить все детейлы.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.View.Masters">
            <summary>
            Получить все мастера.
            </summary>
        </member>
        <member name="P:ICSSoft.STORMNET.View.Properties">
            <summary>
            Список свойств входящих в представление.
            </summary>
        </member>
        <member name="T:ICSSoft.STORMNET.View.ReadType">
            <summary>
            как строить проедставление
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.View.ReadType.OnlyThatObject">
            <summary>
            только для заданного класса
            </summary>
        </member>
        <member name="F:ICSSoft.STORMNET.View.ReadType.WithRelated">
            <summary>
            для класса со всеми детейлами
            </summary>
        </member>
    </members>
</doc>
