<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Repository</name>
    </assembly>
    <members>
        <member name="M:STORMCASE.Repository.RepositoryChecker.#ctor">
            <summary>
            Создание экземпляра класса. В качестве сервиса данных используется DataServiceProvider.DataService.
            </summary>
            <param name="ds">Сервис данных.</param>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryChecker.#ctor(ICSSoft.STORMNET.Business.IDataService)">
            <summary>
            Создание экземпляра класса. В качестве сервиса данных используется переданный сервис.
            </summary>
            <param name="dataService">Сервис данных.</param>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryChecker.prv_GetUserName">
            <summary>
            получить текущее имя пользователя
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryChecker.AccessCheck(System.Object,System.String)">
            <summary>
            проверка прав доступа к объекту репозитария
            </summary>
            <param name="obj"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryChecker.DataService">
            <summary>
            Сервис данных, используемый экземпляром класса.
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.GlobalACL">
            <summary>
            глобальный список администраторов
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.GlobalACL.CheckAdmin">
            <summary>
            Проверяет, входит ли текущий пользователь в группу администраторов. Если не входит, генерируется исключение
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.GlobalACL.IsAdmin">
            <summary>
            Возвращает, входит ли текущий пользователь в группу администраторов
            </summary>
            <returns></returns>
        </member>
        <member name="T:STORMCASE.Repository.RepositoryACL">
            <summary>
            Список прав доступа для объекта репозитария
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.CaseProperties">
            <summary>
            для хранения свойств Caseberry в БД
            </summary>
        </member>
        <member name="T:Scriptizer.DataObjects.ActionScriptedParameter">
            <summary>
            Фактический параметр для скрипта, который привязан к ActionScriptedParameter.
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.RepositoryDataObject">
            <summary>
            Общий предок репозитарных классов
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryDataObject.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryDataObject.FindRepositoryObjectByName(ICSSoft.STORMNET.DetailArray,System.String)">
            <summary>
            Поиск объекта данных репозитарного объекта по его имени.
            Удобно использовать при поиске атрибутов в классах, параметров методов и т.п.
            Если не найдено, возвращается null.
            </summary>
            <param name="detailarray">массив репозитарных объектов данных</param>
            <param name="name">имя искомого репозитарного объекта</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryDataObject.SetDeletedStatusForAll(ICSSoft.STORMNET.DetailArray)">
            <summary>
            Установить всем объектам данных в <see cref="T:ICSSoft.STORMNET.DetailArray"/> статус <see cref="F:ICSSoft.STORMNET.ObjectStatus.Deleted"/>
            </summary>
            <param name="detailarray"></param>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryDataObject.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryDataObject.NameStr">
            <summary>
            Полное имя, как оно выглядит на диаграмме (с пометками типа хранимости, модификатора доступа)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryDataObject.Description">
            <summary>
            Описнание
            </summary>
        </member>
        <member name="T:Scriptizer.DataObjects.AssemblyInScript">
            <summary>
            Сборка в скрипте
            </summary>
        </member>
        <member name="T:Scriptizer.DataObjects.DetailArrayOfAssemblyInScript">
            <summary>
            Сборки скрипта
            </summary>
        </member>
        <member name="T:Scriptizer.DataObjects.CollectionAction">
            <summary>
            Класс для представления действий с коллекцией
            </summary>
        </member>
        <member name="M:Scriptizer.DataObjects.CommonAction.GetEventByName(System.String)">
            <summary>
            возвращает событие с указанным именем
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Scriptizer.DataObjects.EmptyAction">
            <summary>
            "Пустое" действие, специально для "подвязывания" к чему-либо обработчиков событий
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.MethodAction.stringedtypesofparams">
            <summary>
            параметры метода, через ','
            </summary>
        </member>
        <member name="T:Scriptizer.DataObjects.NoSuchTypeForMethodActionParameterException">
            <summary>
            невозможно в подключенных сборках найти тип для параметра MethodActionа
            </summary>
        </member>
        <member name="F:Scriptizer.DataObjects.NoSuchTypeForMethodActionParameterException.sTypeOfParam">
            <summary>
            тип параметра
            </summary>
        </member>
        <member name="M:Scriptizer.DataObjects.NoSuchTypeForMethodActionParameterException.#ctor(System.String)">
            <summary>
            конструктор исключения
            </summary>
            <param name="typeOfObject"></param>
        </member>
        <member name="T:Scriptizer.DataObjects.MethodActionScripted">
            <summary>
            Действие с привязанным к нему скриптом.
            Скрипт должен быть привязан к создаваемому объекту посредством имплементации интерфейса IScripted
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.MethodActionScripted.ParametersStr">
            <summary>
            видимая строка, отображающая состояние строчек
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.MethodActionWithCreate.ObjectVariableName">
            <summary>
            Имя переменной, с которым в переменные интерпретатора записывается созданный экземпляр типа type. 
            Если равно "", то не записывается.
            </summary>
        </member>
        <member name="T:Scriptizer.DataObjects.ParameterInScript">
            <summary>
            Параметр скрипта
            </summary>
        </member>
        <member name="F:Scriptizer.DataObjects.Script.assemblies">
            <summary>
            коллекция со сборками, участвующими в скрипте (классы которых будут подниматься в качестве действий)
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Script.Parameters">
            <summary>
            Параметры скрипта
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Script.ParametersStr">
            <summary>
            видимая строка, отображающая состояние строчек
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Script.Assemblies">
            <summary>
            коллекция со сборками, участвующими в скрипте (классы которых будут подниматься в качестве действий)
            </summary>
        </member>
        <member name="T:Scriptizer.DataObjects.DetailArrayOfScript">
            <summary>
            Скрипты
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Transition.objectvariable">
            <summary>
            переменная из глобальной коллекции, в которой хранится ссылка на передаваемый объект
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Transition.conditionvariable">
            <summary>
            булевская переменная глобальной коллекции, которая проверяется при переходе
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Transition.CollectionChanges">
            <summary>
            коллекция изменений глобальной коллекции (выполняется всегда, вне зависимости от условия)
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Transition.Parameters">
            <summary>
            коллекция параметров для дестинирующего действия
            </summary>
        </member>
        <member name="P:Scriptizer.DataObjects.Transition.ParametersStr">
            <summary>
            набор строчек вида paramname : varname
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.FileName">
            <summary>
            Summary description for FileName.
            </summary>
        </member>
        <member name="T:STORMCASE.RepositoryForms.GlobalACLAddRole">
            <summary>
            Summary description for RepositoryACLAddRole.
            </summary>
        </member>
        <member name="F:STORMCASE.RepositoryForms.GlobalACLAddRole.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.GlobalACLAddRole.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.GlobalACLAddRole.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:STORMCASE.RepositoryForms.GlobalACLEdit">
            <summary>
            Summary description for RepositoryACLEdit.
            </summary>
        </member>
        <member name="F:STORMCASE.RepositoryForms.GlobalACLEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.GlobalACLEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.GlobalACLEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:STORMCASE.Plugin.CasePlugin">
            <summary>
            Интерфейс плугина
            </summary>
        </member>
        <member name="M:STORMCASE.Plugin.CasePlugin.OnLoadObject(STORMCASE.Repository.RepositoryDataObject,STORMCASE.Plugin.LockInformation@)">
            <summary>
            Действия на загрузку объекта. 
            </summary>
            <param name="Object">Загружаемый объект</param>
            <param name="lockData">Информация о блокировке</param>
        </member>
        <member name="M:STORMCASE.Plugin.CasePlugin.OnSaveObject(STORMCASE.Repository.RepositoryDataObject)">
            <summary>
            Действия на сохранение объекта
            </summary>
            <param name="Object"></param>
        </member>
        <member name="M:STORMCASE.Plugin.CasePlugin.OnCloseObject(STORMCASE.Repository.RepositoryDataObject,System.Boolean)">
            <summary>
            Действия на закрытие объекта
            </summary>
            <param name="Object"></param>
        </member>
        <member name="P:STORMCASE.Plugin.CasePlugin.Name">
            <summary>
            Имя плугина
            </summary>
        </member>
        <member name="P:STORMCASE.Plugin.CasePlugin.Description">
            <summary>
            Описание плугина
            </summary>
        </member>
        <member name="T:STORMCASE.Plugin.NamedDoMethod">
            <summary>
            Пара -- название, делегат. 
            </summary>
        </member>
        <member name="P:STORMCASE.Plugin.NamedDoMethod.Name">
            <summary>
            Имя метода, которое отображается в меню.
            </summary>
        </member>
        <member name="P:STORMCASE.Plugin.NamedDoMethod.DoMethod">
            <summary>
            Делегат.
            </summary>
        </member>
        <member name="P:STORMCASE.Plugin.NamedDoMethod.DoMethodExt">
            <summary>
            Расширенный делегат.
            </summary>
        </member>
        <member name="T:STORMCASE.Plugin.EditDiagramClass">
            <summary>
            Специальный класс для определения того, что плагин хочет открыть диаграмму на редактирование
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.VisualControllerProperties">
            <summary>
            глобальное состояние контроллера. В данном классе перечислена вся необходимая информация о контроллере, которая может понадобиться примитивам
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.VisualControllerProperties.#ctor(System.Drawing.Graphics,System.Int32,System.Boolean,System.Collections.ArrayList,System.Collections.ArrayList,System.Boolean)">
            <summary>
            конструктор
            </summary>
            <param name="gr">graphics, в котором происходит рисование</param>
            <param name="GridSize">размер сетки</param>
            <param name="DesignMode">режим редактирования</param>
            <param name="primitives">список примитивов</param>
            <param name="bInitialFold">нужно ли создавать классы уже свернутыми</param>
        </member>
        <member name="F:STORMCASE.Primitives.VisualControllerProperties.graphics">
            <summary>
            графика, в которой мы рисуем
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.VisualControllerProperties.gridsize">
            <summary>
            шаг сетки
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.VisualControllerProperties.designmode">
            <summary>
            показывает, находимся ли мы сейчас в состоянии редактирования (обратные ему состояния - например печать или процедура экспорта в wmf)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.VisualControllerProperties.primitives">
            <summary>
            коллекция примитивов на форме 
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.VisualControllerProperties.interactors">
            <summary>
            список интеракторов
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.VisualControllerProperties.bNeedToPlusLocation">
            <summary>
            нужно ли увеличивать loaction при сериализации
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.VisualControllerProperties.firstcontextmenuhandling">
            <summary>
            идет ли сейчас обработка первого примитива из выделенных
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.FirstContextMenuHandling">
            <summary>
            идет ли сейчас обработка первого примитива из выделенных
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.BitmapGraphics">
            <summary>
            графика, где мы рисуем
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.DesignMode">
            <summary>
            показывает, находимся ли мы сейчас в состоянии редактирования (обратные ему состояния - например печать или процедура экспорта в wmf)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.GridSize">
            <summary>
            шаг сетки
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.Primitives">
            <summary>
            список примитивов на диаграмме
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.Interactors">
            <summary>
            список интеракторов на диаграмме
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.NeedToPlusLocation">
            <summary>
            нужно ли увеличивать location при десериализации
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.VisualControllerProperties.InitialPropertiesCollection">
            <summary>
            коллекция со значениями по умолчанию для некоторых визуальных свойств примитивов, которые могут настраниваться из тулбара диаграммы
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.LineEnder">
            <summary>
            Класс со статическими методами для получения массива точек всяческих окончаний линий (ромбик, треугольник, просто стрелка, ... )
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LineEnder.scaleconst">
            <summary>
            Коэффициент для масштабирования. Изменяя данную величину можно менять размеры всех 
            возможных окончаний линий.
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.RombPointsWithScale(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            возвращает полигон для ромба 
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <param name="scale">Коэффициент масштабирования. Позволяет дополнительно управлять размером получившегося полигона </param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.RombPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            возвращает полигон для ромба 
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.TrianglePointsWithScale(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            возвращает полигон для треугольника
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <param name="scale">Коэффициент масштабирования. Позволяет дополнительно управлять размером получившегося полигона </param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.TrianglePointsWithScale(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            возвращает полигон для треугольника
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <param name="scale">Коэффициент масштабирования. Позволяет дополнительно управлять размером получившегося полигона </param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.TrianglePoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            возвращает полигон для треугольника
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.ArrowPointsWithScale(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            возвращает полигон для стрелки
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <param name="scale">Коэффициент масштабирования. Позволяет дополнительно управлять размером получившегося полигона </param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.ArrowPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            возвращает полигон для стрелки
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.HalfArrowPointsWithScale(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            возвращает полигон для полустрелки
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <param name="scale">Коэффициент масштабирования. Позволяет дополнительно управлять размером получившегося полигона </param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.HalfArrowPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            возвращает полигон для полустрелки
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.PerpendicularPointsWithScale(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            возвращает полигон для перпендикулярной линии
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <param name="scale">Коэффициент масштабирования. Позволяет дополнительно управлять размером получившегося полигона </param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.PerpendicularPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            возвращает полигон для перпендикулярной линии
            </summary>
            <param name="StartPoint">Начальная точка (точка, которая предшествует концам)</param>
            <param name="EndPoint">Конечная точка. Обычно - borderpoint</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.prv_GetDirectedPoint(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            Возвращает точку, лежащую на данном отрезке, ближе к концу, отстоящую на некоторую константу
            </summary>
            <param name="a">Начальная точка</param>
            <param name="b">Конечная точка</param>
            <param name="k">Коэффициент 0..1. Удаленность точки</param>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.prv_GetDirectedPoint(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            Возвращает точку, лежащую на данном отрезке, ближе к концу, отстоящую на некоторую константу
            </summary>
            <param name="a">Начальная точка</param>
            <param name="b">Конечная точка</param>
            <param name="k">Коэффициент 0..1. Удаленность точки</param>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.prv_GetPerpendicularPoint(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            Возвращает точку, лежащую на перпендикуляре, выходящем из точки a данного отрезка 
            </summary>
            <param name="a">Начало отрезка</param>
            <param name="b">Конец отрезка</param>
            <param name="k">Коэффициент 0..1. Удаленность точки</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.LineEnder.prv_GetPerpendicularPoint(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            Возвращает точку, лежащую на перпендикуляре, выходящем из точки a данного отрезка 
            </summary>
            <param name="a">Начало отрезка</param>
            <param name="b">Конец отрезка</param>
            <param name="k">Коэффициент 0..1. Удаленность точки</param>
            <returns></returns>
        </member>
        <member name="T:STORMCASE.Primitives.GeometryFeatures">
            <summary>
            Класс со статическими методами всяких геометрических фич
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetTargetPointF(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Получает точку на линии, в которую упирается перпендикуляр из третьей точки
            </summary>
            <param name="a">точка №1 линии</param>
            <param name="b">точка №2 линии</param>
            <param name="c">точка, из которой падает перпендикуляр</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetTargetPointF(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Получает точку на линии, в которую упирается перпендикуляр из третьей точки
            </summary>
            <param name="a">точка №1 линии</param>
            <param name="b">точка №2 линии</param>
            <param name="c">точка, из которой падает перпендикуляр</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetPointOnArc(System.Drawing.PointF,System.Single,System.Single,System.Single)">
            <summary>
            получить точку на дуге эллипса
            </summary>
            <param name="center">центр эллипса</param>
            <param name="rx">радиус по ширине</param>
            <param name="ry">радиус по высоте</param>
            <param name="angle">угол</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetTargetPoint(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Получает точку на линии, в которую упирается перпендикуляр из третьей точки
            </summary>
            <param name="a">точка №1 линии</param>
            <param name="b">точка №2 линии</param>
            <param name="c">точка, из которой падает перпендикуляр</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLengthOfSegment(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Считает длину отрезка
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLengthOfSegment(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Считает длину отрезка
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLengthOfSegment(System.Drawing.Point,System.Drawing.PointF)">
            <summary>
            Считает длину отрезка
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLengthOfSegment(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Считает длину отрезка
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetDistanceBetweenPointAndSegment(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Считает расстояние между точкой и ОТРЕЗКОМ. Если перпендикуляр не упирается в отрезок, считается расстояние до
            ближайшей границы отрезка
            </summary>
            <param name="StartSegmentPoint">начало сегмента</param>
            <param name="EndSegmentPoint">конец сегмента</param>
            <param name="AlienPoint">точка, до которой нужно искать расстояни</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.DivideSegment(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            Делит отрезок в соответствии с долей от начала. Возвращает точку раздела 
            </summary>
            <param name="a">Начало отрезка</param>
            <param name="b">Конец отрезка</param>
            <param name="percent">0..1</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.DivideSegment(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            Делит отрезок в соответствии с долей от начала. Возвращает точку раздела 
            </summary>
            <param name="a">Начало отрезка</param>
            <param name="b">Конец отрезка</param>
            <param name="percent">0..1</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetDirectedPoint(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            Возвращает точку, лежащую на данном отрезке, ближе к концу, отстоящую на некоторую константу
            </summary>
            <param name="a">Начальная точка</param>
            <param name="b">Конечная точка</param>
            <param name="offset">Величина, на которую мы удалимся от конца отрезка</param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetDefaultDashPattern">
            <summary>
            возвратить стандартный шаблон для штриховых линий
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetDefaultDashPatternForComment">
            <summary>
            возвратить стандартный шаблон для штриховых линий типа комментария
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetDirectedPoint(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            Возвращает точку, лежащую на данном отрезке, ближе к концу, отстоящую на некоторую константу
            </summary>
            <param name="a">Начальная точка</param>
            <param name="b">Конечная точка</param>
            <param name="d_offset">Величина, на которую мы удалимся от конца отрезка</param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetPerpendicularPoint(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            Возвращает точку, лежащую на перпендикуляре, выходящем из точки a данного отрезка 
            </summary>
            <param name="a">Начало отрезка</param>
            <param name="b">Конец отрезка</param>
            <param name="offset">Величина, на которую мы удалимся от отрезка по направлению перпендикуляра</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetPerpendicularPoint(System.Drawing.PointF,System.Drawing.PointF,System.Double)">
            <summary>
            Возвращает точку, лежащую на перпендикуляре, выходящем из точки a данного отрезка 
            </summary>
            <param name="a">Начало отрезка</param>
            <param name="b">Конец отрезка</param>
            <param name="d_offset">Величина, на которую мы удалимся от отрезка по направлению перпендикуляра</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.SolveSquareEquation(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Функция решает квадратное уравнение ax^2 + bx + c = 0.
            Возвращает число решений
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <param name="c">c</param>
            <param name="x1">первое решение</param>
            <param name="x2">второе решение</param>
            <returns>число рещений</returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.IsEllipseContainPoint(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Возвращает, принадлежит ли точка эллипсу. Эллипс задан прямоугольником, его ограничивающим
            </summary>
            <param name="rectangle">границы эллипса</param>
            <param name="testPoint">проверяемая точка</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLineParams(System.Drawing.Point,System.Drawing.Point,System.Double@,System.Double@)">
            <summary>
            Вычисляет параметры линии ( y = k * x + b ), заданной двумя точками. В случае невозможности задания линии возвращается false.
            </summary>
            <param name="A">первая точка</param>
            <param name="B">вторая точка</param>
            <param name="k">коэффициент линни (тангенс угла наклона)</param>
            <param name="b">координата y при пересечении с осью ординат</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLineValue(System.Double,System.Double,System.Drawing.Point)">
            <summary>
            просто возвращает значение выражения k * x + b - y, где x,y задается точкой на плоскости
            </summary>
            <param name="k"></param>
            <param name="b"></param>
            <param name="testPoint"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.IsRombContainPoint(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Возвращает, принадлежит ли точка ромбу. Ромб задан прямоугольником, его ограничивающим
            </summary>
            <param name="rectangle"></param>
            <param name="testPoint"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.IsBoundsOfRectangleContainPoint(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Возвращает. принадлежит ли точка некоторой окрестности границы прямоугольника
            </summary>
            <param name="rectangle"></param>
            <param name="testPoint"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetNoiseWidthForLine">
            <summary>
            данный метод рекомендуется использовать во всех местах, где необходимо проверить, попадает ли мышка на линию, 
            в качестве радиуса некоторой окрестности данной линии
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetAroundRegion(System.Drawing.Rectangle)">
            <summary>
            Возвращает регион для функции RegionToRedraw
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetAroundRegionF(System.Drawing.RectangleF)">
            <summary>
            Возвращает регион для функции RegionToRedraw
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetRightNearestPointWithTheSameResidue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Возвращает ближайщее число, большее или равное NeededValue, с остатком от деления 
            на Base равным остатку от деления RightValue на Base.
            </summary>
            <param name="RightValue"></param>
            <param name="NeededValue"></param>
            <param name="Base"></param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLeftNearestPointWithTheSameResidue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Возвращает ближайщее число, большее или равное NeededValue, с остатком от деления 
            на Base равным остатку от деления RightValue на Base.
            </summary>
            <param name="RightValue"></param>
            <param name="NeededValue"></param>
            <param name="Base"></param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.GetLeftAbsNearestPointWithTheSameResidue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Возвращает ближайщее число, большее или равное NeededValue, с остатком от деления 
            на Base равным остатку от деления RightValue на Base.
            </summary>
            <param name="RightValue"></param>
            <param name="NeededValue"></param>
            <param name="Base"></param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.IsBoundOfLineContainPoint(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Проверить, принадлежит ли точка некоторой окрестности прямой
            </summary>
            <param name="p1"> первая точка прямой </param>
            <param name="p2"> вторая точка прямой </param>
            <param name="hitpoint"> проверяемая точка </param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.UpdateRectangleOfEllipseWithRectangleOfText(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            возвращает прямоугольник, пропорциональный исходному прямоугольнику эллипса, эллипс которого точно описывает прямоугольник текста
            </summary>
            <param name="ellipseRect">прямоугольник исходного эллипса</param>
            <param name="txtRect">прямоугольник с текстом</param>
            <returns>результирующий прямоугольник.</returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFeatures.UpdateRectangleOfEllipseWithRectangleOfText(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32)">
            <summary>
            возвращает прямоугольник, пропорциональный исходному прямоугольнику эллипса, эллипс которого точно описывает прямоугольник текста
            </summary>
            <param name="ellipseRect">прямоугольник исходного эллипса</param>
            <param name="txtRect">прямоугольник с текстом</param>
            <returns>результирующий прямоугольник.</returns>
        </member>
        <member name="T:STORMCASE.Primitives.Intersection">
            <summary>
            Класс со статическими методами для нахождения пересечения отрезка со всякими простыми геометрическими фигурами
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.prv_FindIntersect(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point@)">
            <summary>
            Найти пересечение двух отрезков, заданных точками 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.prv_FindIntersectLineWithEllipse(System.Double,System.Double,System.Double,System.Drawing.PointF,System.Double,System.Double,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Возвращает все точки пересечения линии, заданной в виде y = k * x + d с эллипсом, заданным в виде
            a * ( x - p.X ) ^ 2 + b * ( y - p.Y ) ^ 2 = c ^ 2. Возвращает количество точек пересечения [0..2]
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="p"></param>
            <param name="k"></param>
            <param name="d"></param>
            <param name="firstPoint">возвращаемая первая точка</param>
            <param name="secondPoint">возвращаемая точка</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.prv_FindIntersectVerticalLineWithEllipse(System.Double,System.Double,System.Double,System.Drawing.PointF,System.Double,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Возвращает все точки пересечения линии, заданной в виде x = const (e) с эллипсом, заданным в виде
            a * ( x - p.X ) ^ 2 + b * ( y - p.Y ) ^ 2 = c ^ 2. Возвращает количество точек пересечения [0..2]
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="p"></param>
            <param name="e"></param>
            <param name="firstPoint">возвращаемая первая точка</param>
            <param name="secondPoint">возвращаемая точка</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithPolygonEx(System.Drawing.Point[],System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками с полигоном, заданным массивом точек (последняя точка соединяется с первой)
            </summary>
            <param name="pts">массив вершин полигона</param>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithPolygon(System.Drawing.Point[],System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками с полигоном, заданным массивом точек (последняя точка соединяется с первой)
            </summary>
            <param name="pts">массив вершин полигона</param>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.prv_FindIntersectWithPolygon(System.Drawing.Point[],System.Drawing.Point,System.Drawing.Point,System.Boolean@)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками с полигоном, заданным массивом точек (последняя точка соединяется с первой)
            </summary>
            <param name="pts"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithRectangleEx(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с прямоугольником
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithRectangle(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с прямоугольником
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithRombEx(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с ромбом. Ромб задан прямоугольником, его ограничивающим
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithRomb(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с ромбом. Ромб задан прямоугольником, его ограничивающим
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithEllipseEx(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с эллипсом. Эллипс задан прямоугольником, его ограничивающим
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.FindIntersectWithEllipse(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с эллипсом. Эллипс задан прямоугольником, его ограничивающим
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.prv_FindIntersectWithEllipse(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point,System.Boolean@)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с эллипсом. Эллипс задан прямоугольником, его ограничивающим
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Intersection.GetNoOfIntersectionLine(System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Вернуть номер ребра прямоугольника, с которым пересекае--тся линия, заданная двумя точками. Номер возвращается следующий: 
            0 - верхняя грань, 1 - правая грань, 2 - нижняя грань, 3 - левая грань
            </summary>
            <param name="rectangle">границы прямоугольника</param>
            <param name="a1">первая точка линии</param>
            <param name="a2">вторая точка линии</param>
            <returns></returns>
        </member>
        <member name="T:STORMCASE.Primitives.GeometryFigures">
            <summary>
            Класс со статическими методами для рисования всяких разных геометрических фигур
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawUMLMen(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            рисует человечка, обычно используемого в UML диаграмах
            </summary>
            <param name="g">куда рисовать</param>
            <param name="drawstyle">стиль, с которым рисовать</param>
            <param name="r">область, куда рисовать</param>
            <param name="needToFill">нужно ли закрашивать</param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawStateRectangle(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Рисует прямоугольник с закругленными углами
            </summary>
            <param name="g"></param>
            <param name="dr"></param>
            <param name="r"></param>
            <param name="needToFill">нужно ли закрашивать</param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawUMLComponent(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Рисует UML-компоненту
            </summary>
            <param name="g">Graphics, куда рисовать</param>
            <param name="dr">стиль рисования</param>
            <param name="needToFill">нужно ли закрашивать</param>
            <param name="r"></param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawUMLNode(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            рисуем "узел" в нотации UML
            </summary>
            <param name="g">Graphics, куда рисовать</param>
            <param name="dr">стиль, которым рисовать</param>
            <param name="r">прямоугольник, ограничивающий рисунок</param>
            <param name="needToFill">нужно ли закрашивать?</param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.GetUMLComponentParam">
            <summary>
            возвращает величину, определяющую размер "фишек" при рисовании умл-ного компонента 
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.GetUMLNodeParam">
            <summary>
            возвращает величину, определяющую "глубину" node
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawFoldedText(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle)">
            <summary>
            рисует картинку, которая показывается при свернутом текстовом блоке
            </summary>
            <param name="gr">куда рисовать</param>
            <param name="dr">как рисовать</param>
            <param name="r">Прямоугольник, в который нужно вписать картинку</param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawInfinity(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle)">
            <summary>
            рисует стандартный значок бесконечности
            </summary>
            <param name="gr">куда рисовать</param>
            <param name="dr">как рисовать</param>
            <param name="r">прямоугольник, в который нужно вписать картинку</param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawStar(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle)">
            <summary>
            рисует 6-конечную звездочку
            </summary>
            <param name="gr"></param>
            <param name="dr"></param>
            <param name="r"></param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawScriptSign(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle)">
            <summary>
            рисует 6-конечную звездочку
            </summary>
            <param name="gr"></param>
            <param name="dr"></param>
            <param name="r"></param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawFlag(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle)">
            <summary>
            рисует красный флажок - отметку того, что действие является активным
            </summary>
            <param name="gr"></param>
            <param name="dr"></param>
            <param name="r"></param>
        </member>
        <member name="M:STORMCASE.Primitives.GeometryFigures.DrawMoreClasses(System.Drawing.Graphics,STORMCASE.Primitives.DrawStyle,System.Drawing.Rectangle)">
            <summary>
            рисует троеточие - символ множества классов при наследовании
            </summary>
            <param name="gr"></param>
            <param name="dr"></param>
            <param name="r"></param>
        </member>
        <member name="T:STORMCASE.Primitives.PrimitivePropertyAttribute">
            <summary>
            Свойства примитива: иконка, название и т.п.
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.PrimitivePropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Свойства примитива
            </summary>
            <param name="name">Наименование</param>
            <param name="imageresource">Имя ресурса-картинки</param>
        </member>
        <member name="P:STORMCASE.Primitives.PrimitivePropertyAttribute.Name">
            <summary>
            Наименование
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.PrimitivePropertyAttribute.ImageResourceName">
            <summary>
            Имя ресурса-картинки
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.CaseTypeAttribute">
            <summary>
            Тип примитива для связей между диаграммами
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CaseTypeAttribute.#ctor(System.String)">
            <summary>
            Свойства примитива
            </summary>
            <param name="objecttype">Наименование</param>
        </member>
        <member name="P:STORMCASE.Primitives.CaseTypeAttribute.ObjectType">
            <summary>
            Имя типа
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.RepositoryObjectTypeAttribute">
            <summary>
            Тип объекта репозитария
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.RepositoryObjectTypeAttribute.#ctor(System.Type)">
            <summary>
            Тип объекта репозитария
            </summary>
            <param name="type">Тип</param>
        </member>
        <member name="P:STORMCASE.Primitives.RepositoryObjectTypeAttribute.Type">
            <summary>
            Тип
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.CommonTracedCommand">
            <summary>
            базовый класс для отслеживаемых действий (нужно для корректной обработки undo/redo)
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonTracedCommand.Do">
            <summary>
            в первый раз выполнить команду
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonTracedCommand.Undo">
            <summary>
            отменить выполнение комыанды
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonTracedCommand.Redo">
            <summary>
            повторно выполнить команду
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.CommonTracedCommand.bIsCheckPoint">
            <summary>
            not used
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TracedRepositoryCommand">
            <summary>
            общий класс для команд над репозитарием
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TracedSetPropertyForRepositaryObjectCommand">
            <summary>
            команда по установки свойства репозитарного объекта
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedSetPropertyForRepositaryObjectCommand.#ctor(STORMCASE.Repository.RepositoryDataObject,System.String,System.Object)">
            <summary>
            команда для установки свойства репозитарного объекта
            </summary>
            <param name="dataobject"></param>
            <param name="sPropertyName"></param>
            <param name="objvalue"></param>
        </member>
        <member name="M:STORMCASE.Primitives.TracedSetPropertyForRepositaryObjectCommand.Do">
            <summary>
            выполнение команды
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedSetPropertyForRepositaryObjectCommand.Undo">
            <summary>
            откат команды
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedSetPropertyForRepositaryObjectCommand.Redo">
            <summary>
            повтор команды после отката
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TracedConstructRepositoryCommand">
            <summary>
            команда по созданию репозитарного объекта
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedConstructRepositoryCommand.#ctor(STORMCASE.Repository.Stage,System.Type)">
            <summary>
            команда по созданию репозитарного объекта
            </summary>
            <param name="objStage">стадия, в которой будет создаваться</param>
            <param name="tp">базовый тип для создания</param>
        </member>
        <member name="M:STORMCASE.Primitives.TracedConstructRepositoryCommand.Do">
            <summary>
            выполнить команду
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedConstructRepositoryCommand.Undo">
            <summary>
            откатить команду
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedConstructRepositoryCommand.Redo">
            <summary>
            повторить команду после отката
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TracedConstructRepositoryCommand.NewObject">
            <summary>
            вновь созданный объект
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TracedObjectRefPlusCommand">
            <summary>
            команда по увеличению счетчика ссылок для репозитарного объекта
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefPlusCommand.#ctor(STORMCASE.Repository.RepositoryRefDataObject)">
            <summary>
            команда по увеличению счетчика ссылок для репозитарного объекта
            </summary>
            <param name="data_obj">исходный объект</param>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefPlusCommand.Do">
            <summary>
            выполнить команду
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefPlusCommand.Undo">
            <summary>
            откатить команду
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefPlusCommand.Redo">
            <summary>
            повторить команду после отката
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TracedObjectRefMinusCommand">
            <summary>
            команда по уменьшению счетчика ссылок репозитарного объекта
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefMinusCommand.#ctor(STORMCASE.Repository.RepositoryRefDataObject)">
            <summary>
            команда по уменьшению счетчика ссылок репозитарного объекта
            </summary>
            <param name="data_obj">исходный объект</param>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefMinusCommand.Do">
            <summary>
            выполнить команду
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefMinusCommand.Undo">
            <summary>
            откатить команду
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TracedObjectRefMinusCommand.Redo">
            <summary>
            повторить команду после отката
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.UndoRedoStack">
            <summary>
            стек с ограничением максимального размера
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.UndoRedoStack.#ctor(System.Int32)">
            <summary>
            стек с ограничением максимального размера
            </summary>
            <param name="max_elem">максимальный размер стека</param>
        </member>
        <member name="M:STORMCASE.Primitives.UndoRedoStack.Push(System.Object)">
            <summary>
            добавить элемент в стек (первый элемент может удалиться)
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:STORMCASE.Primitives.UndoRedoStack.Pop">
            <summary>
            вытолкнуть объект из стека
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.UndoRedoStack.Clear">
            <summary>
            очистить стек
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.UndoRedoStack.Peek">
            <summary>
            возвратить последний элемент без его удаления
            </summary>
            <returns></returns>
        </member>
        <member name="P:STORMCASE.Primitives.UndoRedoStack.Count">
            <summary>
            число элементов в стеке
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.ShowStatusInformation">
            <summary>
            Делегат события о попытке показать контекстное меню
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.ShowStatusInformationArgs">
            <summary>
            аргументы события выбора контекстного меню
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.ShowStatusInformationArgs.Text">
            <summary>
            имя меню
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.ShowStatusInformationArgs.#ctor(System.String)">
            <summary>
            аргументы события выбора контекстного меню
            </summary>
            <param name="Text"></param>
        </member>
        <member name="T:STORMCASE.Primitives.LEInformation">
            <summary>
            Класс, в котором хранится информация об одном конце линии
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.segmno">
            <summary>
            номер сегмента, к которому мы приконнектились (в случае коннекта с коннектором)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.percent">
            <summary>
            доля, с которой мы делим сегмент, к которому привязалиьс (в случае коннекта с коннектором)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.points">
            <summary>
            полигон для окончания
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.drawstyle">
            <summary>
            стиль для рисования окончания
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.parent">
            <summary>
            ссылка на родитель (коннектор)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.isstart">
            <summary>
            является ли данная информация информацией о начале
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.primitive">
            <summary>
            примитив, к которому мы привязались
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.LEInformation.borderpoint">
            <summary>
            точка пересечения нашего коннектора с примитивом
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.LEInformation.#ctor(STORMCASE.Primitives.Connector,System.Boolean)">
            <summary>
            информация об одном из концов линии
            </summary>
            <param name="parent">коннектор</param>
            <param name="isstart">является ли данная информация информацией о начале линии?</param>
        </member>
        <member name="M:STORMCASE.Primitives.LEInformation.#ctor(STORMCASE.Primitives.Connector,STORMCASE.Primitives.DrawStyle,System.Boolean)">
            <summary>
            информация об одном из концов линии
            </summary>
            <param name="parent">коннектор</param>
            <param name="drawstyle">стиль для рисования</param>
            <param name="isstart">является ли данная информация информацией о начале линии</param>
        </member>
        <member name="M:STORMCASE.Primitives.LEInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            информация об одном из концов линии (конструктор десериализации)
            </summary>
            <param name="info">параметры десериализации</param>
            <param name="context">параметры десериализации</param>
        </member>
        <member name="M:STORMCASE.Primitives.LEInformation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            реализация стандартного интерфейса десериализации - сохранение данных
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.SegmNo">
            <summary>
            Номер сегмента линии, к которой мы привязаны (используется только при привязке к линии)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.Percent">
            <summary>
            0..1. Доля, в соответствии с которой наш коннектор делит сегмент, к которому мы присоеденены
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.Points">
            <summary>
            Массив точек - полигон для рисования окончания (ну там ромбик или еще чего)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.DrawStyle">
            <summary>
            Стиль для рисования окончания. Если отсутствует - будет рисоваться стандартным стилем коннектора
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.Parent">
            <summary>
            Ссылка на родителя (коннектор) для определения начальной и конечной точки
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.IsStart">
            <summary>
            Является ли эта информация информацией о начале или о конце
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.Primitive">
            <summary>
            Примитив, к которому мы подконнектились
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.BorderPoint">
            <summary>
            Точка, лежащая на пересечении нашей линии и объекта, к которому мы приконнектились
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.LEInformation.Point">
            <summary>
            Точка, куда реально ткнулся юзер при присоединении коннектора
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.Connector">
            <summary>
            Базовый класс -- примитив, предок любых UML-элементов СВЯЗЕЙ (ассоциации, агрегации и т.п.).
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.Primitive">
            <summary>
            Базовый класс -- примитив, предок всех UML-ных
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.CommonBase">
            <summary>
            Самый общий класс, содержащий базовые методы для всего визуального
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.CommonBase.drawstyle">
            <summary>
            стиль, определяющий то, как нужно рисовать
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.CommonBase.controllerproperties">
            <summary>
            ссылка на глобальные визуальные свойства контроллера (контрола, на который мы намазаны)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.CommonBase.stopevents">
            <summary>
            определяет, нужно ли в данный момент обрабатывать события
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.CommonBase.controllerpropertiesfordeserialization">
            <summary>
            статическая переменная - используется для десериализации - фактически чего-то типа глобальной переменной
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Primitives.VisualControllerProperties)">
            <summary>
            конструктор для намазыавния на диаграмму
            </summary>
            <param name="drawstyle">стиль для рисования</param>
            <param name="controllerproperties">глобальные параметры контроллера</param>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            конструктор для десериализации
            </summary>
            <param name="info">информация о десериализации</param>
            <param name="context">контекст</param>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.GetCursorForMouseMove(System.Drawing.Point)">
            <summary>
            контроллер спрашивает примитив, для отображения курсора, когда возникает событие MouseMove
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Отрисовка
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.RegionToRedraw">
            <summary>
            Возвращает регион, который нужно перерисовывать
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.OwnRegion">
            <summary>
            собственный регион, где реально находится объект в данный момент 
            (без учета всяких старых положений и размеров)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.HitTest(System.Drawing.Point)">
            <summary>
            Проверка, попадает ли указанная точка (код для выделения объекта)
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.DropTest(System.Drawing.Point)">
            <summary>
            Проверка, попадает ли указанная точка в объект (код для "бросания" на объект). 
            По умолчанию совпадает с HitTest. Используется для объектов с "дырками", когда в дырках объект не будет выделяться, но 
            примитивы на него все равно можно будет ложить (см. CompositeState в STD)
            </summary>
            <param name="droppoint"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.MouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) нажатии клавиши мыши
            </summary>	
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.MouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) перемещении мыши
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.MouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) отпускании клавиши мыши
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.DoubleClick(System.EventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) двойном нажатии мыши
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.OnMovedSized(STORMCASE.Primitives.MovedSizedEventArgs)">
            <summary>
            Генерация эвента изменения положения/размера
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.MovedSizedHanlerExist">
            <summary>
            Проверка, привязаны ли обработчики к MovedSizedHandler
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.MovedSizedHanlerExist(System.Type)">
            <summary>
            Проверка, привязаны ли обработчики к MovedSizedHandler для какого-либо класса
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.OnWantPlacePrimitive(STORMCASE.Primitives.WantPlaceArgs)">
            <summary>
            генерация события о том, что мы хотим намазать 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.OnWantAddComnmandToUndoArray(STORMCASE.Primitives.WantAddCommandToUndoStackEventArgs)">
            <summary>
            генерация события о том, что мы хотим добавить комманду в стек Undo
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.OnPrepareRedraw(STORMCASE.Primitives.PrepareRedrawEventArgs)">
            <summary>
            Генерация эвента подготовки к перерисовке
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.Invalidate(STORMCASE.Primitives.PrepareRedrawEventArgs)">
            <summary>
            Генерация эвента немедленной(*) перерисовки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.PrepareRedrawHandlerExist">
            <summary>
            Проверка, привязаны ли обработчики к PrepareRedrawHandler
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.InvalidateHandlerExist">
            <summary>
            Проверка, привязаны ли обработчики к InvalidateHandler
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Реализация стандартного интерфейса сериализации -- получение данных 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.Refresh">
            <summary>
            обновить контрол
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.prv_RecalcDependencies">
            <summary>
            пересчитать все зависимое
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.CommonBase.GetToolTipText(System.Windows.Forms.MouseEventArgs)">
            <summary>
            получить текст для подсветки объекта
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:STORMCASE.Primitives.CommonBase.ControllerPropertiesForDeserialization">
            <summary>
            установка VisualControllerProperties для десериализации
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.CommonBase.DrawStyle">
            <summary>
            Стиль отображения
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.CommonBase.StopEvents">
            <summary>
            Если установить в true, то сообщения не будут генерироваться
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.CommonBase.MovedSizedHandler">
            <summary>
            Эвент изменения положения/размера
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.CommonBase.PrepareRedrawHandler">
            <summary>
            Эвент подготовки к перерисовке
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.CommonBase.InvalidateHandler">
            <summary>
            Эвент немедленной(*) перерисовки
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.CommonBase.WantPlacePrimitiveHandler">
            <summary>
            событие для контроллера, говорящее о том, что нужно намазать новый примитив
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.CommonBase.WantAddCommandToUndoStackHandler">
            <summary>
            событие для контроллера, говорящее о том, что нужно намазать новый примитив
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.color_dlg">
            <summary>
            статический диалог для выбора цветов (чтобы кустом колоры можно было сохранять между показами)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.bIsNeedToChangeColor">
            <summary>
            нужно ли менять цвета
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.property">
            <summary>
            дополнительные свойства
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.Repositoryobject">
            <summary>
            объект в репозитарии
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.diagram">
            <summary>
            ссылка на диаграмму
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.diagramfordeserialization">
            <summary>
            используется для десериализации
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.bHighlighted">
            <summary>
            показывает, выделен ли объект
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.bChanged">
            <summary>
            показывает, были ли изменения с данным объектом со времени последнего сохранения
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.key">
            <summary>
            ключ для перенумерования при сохранении
            используется для идентификации примитива (например, можно составить список выделенных объектов)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.statMoveCursor">
            <summary>
            статический курсор для показа перемещения
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.m_arrLinkedDiagramKeys">
            <summary>
            список ключей подвязанных диаграмм к примитиву
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Primitive.m_bSelectInnerControls">
            <summary>
            выделение только если весь примитив охвачен
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.GetPrimitiveInformation">
            <summary>
            возвращает информацию о примитиве (показывается в статусной строке при наведении мыши на него)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.GetPlaceInformation">
            <summary>
            Возвращает подсказку пользователю относительно того, куда можно поместить данный примитив
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.ShadowMove(System.Drawing.Point)">
            <summary>
            параллельно перенести весь примитив на определенную величину
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_CorrectIntByGrid(System.Int32)">
            <summary>
            скорректировать одну координату по размеру сетки
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Repository.Diagram,STORMCASE.Primitives.VisualControllerProperties)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            конструктор десериализации
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_UpdateMoveCursor">
            <summary>
            обновить курсор для перемещения
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.GetContextMenuItems(System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Виртуальный метод, который возвращает состав строчек для показывания в контекстном меню
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.GetTextBlockForStartEdit">
            <summary>
            Возвращает текстовый блок, который нужно поредактировать при намазывании на диаграмму данного примитива
            Если вернулся null, то ничего не надо редактировать
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.CheckStageAndProperties">
            <summary>
            Проверка, всё ли в порядке со свойствами стадии
            </summary>
            <returns>
            True - все необходимые свойства установлены
            </returns>
            <exception cref="T:System.Exception">
            Если стадия прогружена, а свойства AdditionalPluginsSettingsStr в ней не загружено
            </exception>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.FireContextMenu(System.String)">
            <summary>
            Этот метод вызывает контроллер, когда хочет, чтобы объект отработал нажатие юзера по контекстному меню
            </summary>
            <param name="MenuName"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.SetTextColor(System.Drawing.Color)">
            <summary>
            установить цвет текста
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.SetFillColor(System.Drawing.Color)">
            <summary>
            установить цвет закраски
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_UpdateTextColor">
            <summary>
            виртуальная функция, которая обновляет цвет текста всех полей редактирования
            примитива в соответствии с соответствующим значением в this.drawstyle
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.MouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            данный метод вызывается контроллером, когда хочет, чтобы примитив обработал событие нажатия кнопки мыши
            </summary>
            <param name="e"></param>
            <param name="eg"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.OnCreated">
            <summary>
            данную функцию вызывает контроллер после того, как объект намазался на диаграмму
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.CheckTextEdit(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            контроллер спрашивает у примитива, может нужно редактировать текст (фактически проверяется, есть ли у примитива какой-нибудь текст под мышкой и инициируется его редактирование)
            </summary>
            <param name="e"></param>
            <param name="eg"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.Highlight">
            <summary>
            Выделение элемента
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.Unhighlight">
            <summary>
            Отмена выделения элемента
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_PrepareInteractors">
            <summary>
            Виртуальная функция, возвращающая состав интеракторов
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.RegionToRedraw">
            <summary>
            Возвращает регион, который нужно перерисовывать
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.OnThrowInteractors(STORMCASE.Primitives.ThrowInteractorsEventArgs)">
            <summary>
            Генерация эвента "выброски" управляющих контролов (интеракторов)
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.OnUnthrowInteractors">
            <summary>
            Генерация эвента удаления управляющих контролов (интеракторов)
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.ThrowInteractorsHandlerExist">
            <summary>
            Проверка, есть ли обработчики, привязанные к ThrowInteractorsHandler
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.OnWantEditTextBlock(STORMCASE.Primitives.WantEditTextBlockArgs)">
            <summary>
            Генерация эвента, сообщающего о желании поредактировать текст в TextBlock
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_SetLockToRepObject(STORMCASE.Repository.RepositoryDataObject,System.Boolean@)">
            <summary>
            Генерация эвента, сообщающего о желании поредактировать текст в TextBlock
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.SetRepositoryObject">
            <summary>
            установить репозитарный объект
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.Save">
            <summary>
            вызывается при сохранении примитива
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.CancelSave">
            <summary>
            вызывается при отказе от сохранения примитива
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.SetRepositoryObjectDefsToTextBlocks(System.Boolean)">
            <summary>
            общий метод для синхронизации текстовых блоков примитива с объектом из репозитария
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.SetTextBlocksToRepositioryObjectDefs">
            <summary>
            общий метод дл синхронизации объекта репозитария с текстовыми блоками
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.WantEditTextBlockHandlerExist">
            <summary>
            Проверка, есть ли обработчики, привязанные к WantEditTextBlockHandler
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.Delete">
            <summary>
            удалить примитив с диаграммы
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.OnWantDelete(System.EventArgs)">
            <summary>
            Генерация эвента, сообщающего о желании удалить данный примитив
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.OnPrimitiveChanging(STORMCASE.Primitives.PrimitiveChangingEventArgs)">
            <summary>
            Генерация эвента, сообщающего о изменении примитива
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.WantDeleteHandlerExist">
            <summary>
            Проверка, есть ли обработчики, привязанные к WantDeleteHandler
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Реализация стандартного интерфейса сериализации -- получение данных 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_RecalcDependencies">
            <summary>
            пересчитать все параметры
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.ContextMenuDeleteClick(System.Object,System.EventArgs)">
            <summary>
            Выбран пункт меню для удаления
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.CanBePlacedToPrimitive(STORMCASE.Primitives.Primitive)">
            <summary>
            Виртуальная функция, перед бросанием примитива на диаграмму у примитива спрашивается, может ли быть брошен на диаграмму
            И передается примитив, на который пытаются бросить наш примитив
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_SetRepProp(STORMCASE.Repository.RepositoryDataObject,System.String,System.Object)">
            <summary>
            сохраняемая в стеке undo команда на изменении свойства репозитарного объекта
            </summary>
            <param name="data_obj"></param>
            <param name="PropName"></param>
            <param name="PropValue"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_ConstructRepObj(STORMCASE.Repository.Stage,System.Type)">
            <summary>
            сохраняемая в стеке undo команда на создание репозитарного объекта
            </summary>
            <param name="Stage"></param>
            <param name="BaseObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_RepObjRefPlus(STORMCASE.Repository.RepositoryRefDataObject)">
            <summary>
            сохраняемая в стеке undo команда на увеличении счетчика ссылок у репозитарного объекта
            </summary>
            <param name="data_obj"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Primitive.prv_RepObjRefMinus(STORMCASE.Repository.RepositoryRefDataObject)">
            <summary>
            сохраняемая в стеке undo команда на уменьшение счетчика ссылок у репозитарного объекта
            </summary>
            <param name="data_obj"></param>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.WithLinkedDiagrams">
            <summary>
            может иметь связанные диаграммы
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.Changed">
            <summary>
            показывает, были ли изменения с данным объектом со времени последнего сохранения
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.Key">
            <summary>
            ключ для перенумерования при сохранении
            используется для идентификации примитива (например, можно составить список выделенных объектов)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.ZOrder">
            <summary>
            возвращает z-order по расположению данного объекта (чем меньше, тем ближе к пользоателю объект)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.Valid">
            <summary>
            пропертя, показывающая нужно ли сохранять данный объект (имеет ли право быть сохраненным)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.DiagramForDeserialization">
            <summary>
            Статической свойство диаграммы, которое следует установить для "правильной" десериализации, используется в десериализующем конструкторе
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.Property">
            <summary>
            свойство
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.RepositoryObject">
            <summary>
            Объект репозитария, "привязанный" к данному примитиву
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.Diagram">
            <summary>
            Диаграмма, на которой отрисован данный примитив
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.ChosenPalette">
            <summary>
            Gets or sets выбранную палитру для стадии
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.Highlighted">
            <summary>
            Позволяет установить, выделен ли данный объект (примитив считается выделенным, если к его MovedSizedHandler привязан хотя бы один обработчик от интерактора)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Primitive.CaseName">
            <summary>
            имя для вычисления зависимостей между диаграммами. Используется в связке с атрибутом CaseType примитива
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Primitive.ThrowInteractorsHandler">
            <summary>
            событие по выбросу интеракторов
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Primitive.UnthrowInteractorsHandler">
            <summary>
            событие по удалению интеракторов
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Primitive.WantEditTextBlockHandler">
            <summary>
            событие по инициированию редактирования текстового блока
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Primitive.WantDeleteHandler">
            <summary>
            событие по удалению объекта
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Primitive.WantPasteMemoryStreamEvent">
            <summary>
            событие по удалению объекта
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Primitive.PrimitiveChangingHandler">
            <summary>
            событие по удалению объекта
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Primitive.SetLockHandler">
            <summary>
            событие по установки блокировок
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.pts">
            <summary>
            массив точек перегиба, включая начальную и конечную точки
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.oldpts">
            <summary>
            массив старых точек перегиба
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.aroundregion">
            <summary>
            регион для перерисовки
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.ownregion">
            <summary>
            регион для перерисовки
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.startle">
            <summary>
            информация о начале линии
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.endle">
            <summary>
            информация о конце линии
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.addedpointindex">
            <summary>
            индекс последней добавленной точки
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.deletedpointindex">
            <summary>
            индекс последней удаленной точки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Repository.Diagram,STORMCASE.Primitives.VisualControllerProperties)">
            <summary>
            Коннектор
            </summary>
            <param name="drawstyle">стиль</param>
            <param name="diagram">диаграмма</param>
            <param name="controllerproperties">визуальные свойства контроллера</param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор коннектора для десериализации
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetPointByIndex(System.Int32)">
            <summary>
            возвращает точку по индексу. Если точка является или начальной (0) или конечной (count-1), 
            то возвращаются соответственно <see cref="P:STORMCASE.Primitives.Connector.StartBorderPoint"/> и <see cref="P:STORMCASE.Primitives.Connector.EndBorderPoint"/>
            </summary>
            <param name="index">индекс требуемой точки</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetPointByIndexF(System.Int32)">
            <summary>
            возвращает точку по индексу. Если точка является или начальной (0) или конечной (count-1), 
            то возвращаются соответственно <see cref="P:STORMCASE.Primitives.Connector.StartBorderPoint"/> и <see cref="P:STORMCASE.Primitives.Connector.EndBorderPoint"/>
            </summary>
            <param name="index">индекс требуемой точки</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetStartPrimitiveInformation">
            <summary>
            возвращает подсказку пользователю относительно примитивов, которые 
            могут использоваться в качестве начального примитива для данного коннектора
            Выводится в статусную строку.
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetEndPrimitiveInformation">
            <summary>
            возвращает подсказку пользователю относительно примитивов, которые 
            могут использоваться в качестве конечного примитива для данного коннектора
            Выводится в статусную строку.
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetPlaceInformation">
            <summary>
            Возвращает информацию для того, куда можно "бросать" элемент. Для коннектора неактуально.
            </summary>
            <returns></returns>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.indexOfPointToDelete">
            <summary>
            индекс точки для удаления (при удалении через контекстное меню)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.indexOfPointToAdd">
            <summary>
            индекс точки для добавления (при добавлении точки через контекстное меню)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.bAllowToDeletePoint">
            <summary>
            временная переменная, показывает, можно ли удалять точку
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.pointToInsert">
            <summary>
            координаты точки для добавления
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetContextMenuItems(System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            вызывается контроллером при формировании контекстного меню
            </summary>
            <param name="eg"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.FireContextMenu(System.String)">
            <summary>
            вызывается контроллером при срабатывании контекстного меню
            </summary>
            <param name="MenuName"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_DeletePoints">
            <summary>
            удалить выделенные точки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.DeletePoints(System.Collections.ArrayList)">
            <summary>
            удалить точки
            </summary>
            <param name="point_indexes"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_AddPoint">
            <summary>
            добавляет точку с индексом indexOfPointToAdd и координатами pointToInsert
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_PrepareToAddPoint(System.Drawing.Point)">
            <summary>
            вычисляет индекс точки для добавления по координатам
            </summary>
            <param name="eg"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.AddPoint(System.Drawing.Point)">
            <summary>
            добавить точку по координатам
            </summary>
            <param name="eg"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_SetEvents(STORMCASE.Primitives.Primitive)">
            <summary>
            установка евентов
            </summary>
            <param name="primitive"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_ConnectToPrimitive(STORMCASE.Primitives.Primitive,System.Boolean)">
            <summary>
            Подписка на евент элемента, сообщающий о перемещении/изменении размера
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.ConnectToConnector(STORMCASE.Primitives.Connector,System.Boolean)">
            <summary>
            присоединить данный коннектор к другому коннектору
            определяется сегмент, как наиболее близкий к концу данного коннектора
            </summary>
            <param name="conn">коннектор, к которому мы присоединяемся</param>
            <param name="isStartPrimitive">какой конец данного коннектора мы прикрепляем</param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_DisconnectToPrimitive(STORMCASE.Primitives.Primitive)">
            <summary>
            Отписка от евента элемента, сообщающий о перемещении/изменении размера
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.OnWantDelete(System.EventArgs)">
            <summary>
            обработка события удаления коннектора
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.ConnectedPrimitiveMovedSized(STORMCASE.Primitives.CommonBase,STORMCASE.Primitives.MovedSizedEventArgs)">
            <summary>
            Реакция на евент элемента, сообщающий о перемещении/изменении размера
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_ConnectedPrimitiveMovedSized(STORMCASE.Primitives.LEInformation,STORMCASE.Primitives.CommonBase,STORMCASE.Primitives.MovedSizedEventArgs)">
            <summary>
            реакция на событие перемещения подсоединенного примитива
            </summary>
            <param name="le"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.ConnectedPrimitiveDeleted(STORMCASE.Primitives.Primitive,System.EventArgs)">
            <summary>
            Реакция на евент элемента, сообщающий об удалении
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.ConnectedPrimitiveAddedPoint(STORMCASE.Primitives.Connector,STORMCASE.Primitives.AddDeletePointArgs)">
            <summary>
            реакция на событие добавления точки у присоединенного коннектора
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.ConnectedPrimitiveDeletedPoint(STORMCASE.Primitives.Connector,STORMCASE.Primitives.AddDeletePointArgs)">
            <summary>
            реакция на событие удаления точки у присоединенного коннектора
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.OnAddedPoint(STORMCASE.Primitives.AddDeletePointArgs)">
            <summary>
            Генерация события добавления точки 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.OnDeletedPoint(STORMCASE.Primitives.AddDeletePointArgs)">
            <summary>
            Генерация события удаления точки 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.CanConnectTo(STORMCASE.Primitives.Primitive)">
            <summary>
            Функция, которую запрашивает контроллер при рисовании связи: 
            может ли данный коннектор присоединяться к некоторому примитиву
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Отрисовка
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.RegionToRedraw">
            <summary>
            Возвращает регион, который нужно перерисовывать
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.OwnRegion">
            <summary>
            возвращает собственный регион (без учета предыдущих состояний)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.OwnVisibleRegion">
            <summary>
            возвращает видимый регион коннектора (т.е. от границ привязанных объектов)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.HitTest(System.Drawing.Point)">
            <summary>
            Проверка, попадает ли указанная точка
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.iHighlightingPointIndex">
            <summary>
            индекс подсвеченной точки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.MouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) нажатии клавиши мыши
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.MouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Реакция на отпускание кнопки мыши
            </summary>
            <param name="e"></param>
            <param name="eg"></param>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.bAllHighlighted">
            <summary>
            выделены ли все точки коннектора
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.bNeedToSkipUnhighlight">
            <summary>
            временная переменная
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.m_arrHighlightedPoints">
            <summary>
            список выделенных точек
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.Unhighlight">
            <summary>
            снять выделение с коннектора
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.Highlight">
            <summary>
            Выделение коннектора
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.Highlight(System.Int32)">
            <summary>
            Выделение точки в коннекторе по её индексу
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_UpdateHighlightedPointsArray">
            <summary>
            обновить список выделенных точек по реально существующим интеракторам
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Connector.m_arrPointsIndexesToMove">
            <summary>
            список вершин для перемещения (когда коннектор находится внутри составного объекта)
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_PrepareInteractors">
            <summary>
            Создать и подготовить все интеракторы для перемещения точек 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_PrepareInteractorForPoint(System.Int32)">
            <summary>
            Создать и подготовить интерактор для точки 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.InteractorMovedSized(STORMCASE.Primitives.CommonBase,STORMCASE.Primitives.MovedSizedEventArgs)">
            <summary>
            Перехватчик события изменения размера/положения интерактора
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_GetRectangleOverPoints(System.Collections.ArrayList)">
            <summary>
            Вычислить минимальный прямоугольник, в котором расположены все точки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_GetRectangleOverPoints(System.Drawing.PointF[])">
            <summary>
            получить прямоугольник, полностью покрывающий нашу линию
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetRectangleOverPoints">
            <summary>
            возвращает прямоугольник, ограничивающий линию
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_GetStartBorderPoint">
            <summary>
            виртуальная функция, которая возвращает положение стартовой точки. По умолчанию, мы просто спрашиваем об этом у объекта, к которому
            мы приконнектились.
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_GetStartBorderPointEx">
            <summary>
            виртуальная функция, которая возвращает положение стартовой точки. По умолчанию, мы просто спрашиваем об этом у объекта, к которому
            мы приконнектились.
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_GetEndBorderPoint">
            <summary>
            виртуальная функция, которая возвращает положение конечной точки. По умолчанию, мы просто спрашиваем об этом у объекта, к которому
            мы приконнектились.
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_GetEndBorderPointEx">
            <summary>
            виртуальная функция, которая возвращает положение конечной точки. По умолчанию, мы просто спрашиваем об этом у объекта, к которому
            мы приконнектились.
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_RecalcDependencies">
            <summary>
            Вычислить всё зависимое от точек: граничные точки, пересчитать регион
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_RecalcStartLEPoints">
            <summary>
            Виртуальный метод для пересчета региона фигуры на начале линии
            Здесь нужно использовать стандартный массив startlepoints
            Обязательно обновить aroundregion для обновления региона, где мы будем рисовать
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_RecalcEndLEPoints">
            <summary>
            Виртуальный метод для пересчета региона фигуры на конце линии
            Здесь нужно использовать стандартный массив endlepoints
            Обязательно обновить aroundregion для обновления региона, где мы будем рисовать
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_getStartLEPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            упрощенная функция для получения начальных точек
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_getEndLEPoints(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            упрощенная функция для получения конечных точек
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Реализация стандартного интерфейса сериализации -- получение данных 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Connector.prv_GetConnectedConnectorVisualInformation(System.Drawing.Point,System.Int32@,System.Double@,System.Drawing.Point@)">
            <summary>
            по координатам точки возвращает номер ближайшего отрезка, проекцию точки на отрезок и процент от начала отрезка
            </summary>
            <param name="point">Исходная точка</param>
            <param name="outsegmno">Возвращаемый номер отрезка, на который падает данная точка</param>
            <param name="outpercent">Возвращаемый процент от начала отрезка </param>
            <param name="outpoint">Возвращаемая точка на отрезке</param>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.StartLE">
            <summary>
            информация о начале коннектора (куда прикреплен, стиль для рисования, полигон для завершения)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.EndLE">
            <summary>
            информация о конце коннектора (куда прикреплен, стиль для рисования, полигон для завершения)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.StartBorderPoint">
            <summary>
            Точка, лежащая на пересечении начала нашей линии и объекта, к которому мы приконнектились
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.EndBorderPoint">
            <summary>
            Точка, лежащая на пересечении конца нашей линии и объекта, к которому мы приконнектились
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.StartPoint">
            <summary>
            Стартовая точка связи
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.EndPoint">
            <summary>
            Конечная точка связи
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.StartPrimitive">
            <summary>
            Примитив, к которому привязана стартовая точка связи
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.EndPrimitive">
            <summary>
            Примитив, к которому привязана конечная точка связи
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.Points">
            <summary>
            Точки 
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.OldPoints">
            <summary>
            Старые точки 
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Connector.PointsIndexesToMove">
            <summary>
            список вершин для перемещения (когда коннектор находится внутри составного объекта)
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Connector.AddedPointHandler">
            <summary>
            событие по добавлению точки
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Connector.DeletedPointHandler">
            <summary>
            событие по удалению точки
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.IEndObjectToConnect">
            <summary>
            Интерфейс для поддержки соединения коннекторов с объектами. 
            Должен поддерживаться всеми объектами, которые могут выступать в качестве подсоединяемого объекта
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.IEndObjectToConnect.CanToBeConnected(STORMCASE.Primitives.Connector)">
            <summary>
            Контроллер опрашивает вызовом этого метода примитив: можно ли к
            нему присоединить указанный коннектор.
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.IEndObjectToConnect.FindIntersectWithSegment(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с объектом
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.IEndObjectToConnect.FindIntersectWithSegmentEx(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Найти пересечение отрезка, заданного двумя точками, с объектом, с учетом внутренней связи
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.PrepareRedrawEventArgs">
            <summary>
            Класс эвента, сообщающего о том, что нечто должно быть перерисовано	/// 
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.PrepareRedrawEventArgs.regiontoredraw">
            <summary>
            регион для перерисовки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.PrepareRedrawEventArgs.#ctor(System.Drawing.Region)">
            <summary>
            регион для перерисовки
            </summary>
            <param name="region"></param>
        </member>
        <member name="P:STORMCASE.Primitives.PrepareRedrawEventArgs.RegionToRedraw">
            <summary>
            регион для перерисовки
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TextBlockEditFinishedEventArgs">
            <summary>
            класс, показывающий
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.ThrowInteractorsEventArgs">
            <summary>
            Класс эвента "выброски" управляющих интеракторов
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.ThrowInteractorsEventArgs.#ctor(System.Collections.ArrayList)">
            <summary>
            аргумент по выбросу интеракторов
            </summary>
            <param name="controls">коллекция интеракторов</param>
        </member>
        <member name="P:STORMCASE.Primitives.ThrowInteractorsEventArgs.Controls">
            <summary>
            Список контролов, которые "выбрасываются"
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantAddCommandToUndoStackEventArgs">
            <summary>
            Класс эвента, сообщающего о том, что нужно добавить команду в стек undo
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.WantAddCommandToUndoStackEventArgs.#ctor(STORMCASE.Primitives.CommonTracedCommand)">
            <summary>
            аргумент по добавлению команды в стек undo
            </summary>
            <param name="objCommand">добавляемая команда</param>
        </member>
        <member name="P:STORMCASE.Primitives.WantAddCommandToUndoStackEventArgs.Command">
            <summary>
            команда
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantLockRepObjArgs">
            <summary>
            Класс эвента, сообщающего о том, что нужно добавить блокировку на репозитарный объект
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.WantLockRepObjArgs.#ctor(STORMCASE.Repository.RepositoryDataObject,System.Boolean)">
            <summary>
            аргумент по блокировки репозитарных объектов
            </summary>
            <param name="bCancel">возвращаемый индикатор неуспешность блокировки</param>
            <param name="obj">объект для блокировки</param>
        </member>
        <member name="P:STORMCASE.Primitives.WantLockRepObjArgs.RepositoryDataObject">
            <summary>
            репозитарный объект для блокировки
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.WantLockRepObjArgs.Cancel">
            <summary>
            возвращаемый индикатор неуспешность блокировки
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.WantLockRepObjArgs.AlreadyExist">
            <summary>
            был ли уже заблокирован данный объект
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.PrimitiveChangingEventArgs">
            <summary>
            аргумент для события об изменении примитива
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.PrimitiveChangingEventArgs.#ctor(STORMCASE.Primitives.Primitive)">
            <summary>
            конструктор
            </summary>
            <param name="objPrimitive">коллекция интеракторов</param>
        </member>
        <member name="P:STORMCASE.Primitives.PrimitiveChangingEventArgs.Primitive">
            <summary>
            примитив
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantEditTextBlockArgs">
            <summary>
            Класс эвента для сообщения о желании поредактировать текст в TextBlockе
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.WantEditTextBlockArgs.#ctor(STORMCASE.Primitives.TextBlock,System.Int32)">
            <summary>
            аргумент для инициирования редактирования текстового блока
            </summary>
            <param name="textblock">текстовый блок, который необходимо редактировать</param>
            <param name="startselection"></param>
        </member>
        <member name="M:STORMCASE.Primitives.WantEditTextBlockArgs.#ctor(STORMCASE.Primitives.TextBlock,System.Type)">
            <summary>
            аргумент для инициирования редактирования списка
            </summary>
            <param name="textblock">текстовый блок, который необходимо редактировать</param>
            <param name="enumforcomboedit"></param>
        </member>
        <member name="M:STORMCASE.Primitives.WantEditTextBlockArgs.#ctor(STORMCASE.Primitives.TextBlock,System.Collections.Specialized.StringCollection)">
            <summary>
            аргумент для инициирования редактирования списка
            </summary>
            <param name="textblock">текстовый блок, который необходимо редактировать</param>
            <param name="items">коллекция, которую будет выводиться</param>
        </member>
        <member name="P:STORMCASE.Primitives.WantEditTextBlockArgs.TextBlock">
            <summary>
            Текстовый блок, который редактируется
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.WantEditTextBlockArgs.EnumForComboEdit">
            <summary>
            Enumeration, чьи Caption необходимо показывать при выборе одного из значений
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.WantEditTextBlockArgs.Items">
            <summary>
            коллекция строк, которые необходимо показывать в раскрывающемся списке
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.WantEditTextBlockArgs.StartSelection">
            <summary>
            место курсора, куда попадает мыша в начале редактирования 
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.MovedSizedEventArgs">
            <summary>
            Класс эвента изменения размеров или положения
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.MovedSizedEventArgs.#ctor">
            <summary>
            аргумент по изменению размеров или положения
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.MovedSizedEventArgs.#ctor(System.Drawing.Point,System.Drawing.Size,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            аргумент по изменению размеров или положения
            </summary>
            <param name="location">новое положение</param>
            <param name="size">новый размер</param>
            <param name="oldlocation">старое положение</param>
            <param name="oldsize">старый размер</param>
        </member>
        <member name="M:STORMCASE.Primitives.MovedSizedEventArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            аргумент по изменению размеров или положения
            </summary>
            <param name="rect">новое положение/размер</param>
            <param name="oldrect">старое положение/размер</param>
        </member>
        <member name="M:STORMCASE.Primitives.MovedSizedEventArgs.#ctor(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            аргумент по изменению размеров или положения
            </summary>
            <param name="rect">новое положение/размер</param>
            <param name="oldrect">старое положение/размер</param>
        </member>
        <member name="M:STORMCASE.Primitives.MovedSizedEventArgs.#ctor(System.Drawing.Point,System.Drawing.Size,System.Drawing.Point,System.Drawing.Size,System.Int32)">
            <summary>
            аргумент по изменению размеров или положения
            </summary>
            <param name="location">новое положение</param>
            <param name="size">новый размер</param>
            <param name="oldlocation">старое положение</param>
            <param name="oldsize">старый размер</param>
            <param name="param">дополнительный параметр</param>
        </member>
        <member name="M:STORMCASE.Primitives.MovedSizedEventArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32)">
            <summary>
            аргумент по изменению размеров или положения
            </summary>
            <param name="rect">новое положение/размер</param>
            <param name="oldrect">старое положение/размер</param>
            <param name="param">дополнительный параметр</param>
        </member>
        <member name="M:STORMCASE.Primitives.MovedSizedEventArgs.#ctor(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Int32)">
            <summary>
            аргумент по изменению размеров или положения
            </summary>
            <param name="rect">новое положение/размер</param>
            <param name="oldrect">старое положение/размер</param>
            <param name="param">дополнительный параметр</param>
        </member>
        <member name="P:STORMCASE.Primitives.MovedSizedEventArgs.Location">
            <summary>
            Размещение
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.MovedSizedEventArgs.Size">
            <summary>
            Размер
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.MovedSizedEventArgs.OldLocation">
            <summary>
            Размещение перед перемещением
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.MovedSizedEventArgs.OldSize">
            <summary>
            Размер перед изменением
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.MovedSizedEventArgs.Param">
            <summary>
            дополнительный параметр
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.AddDeletePointArgs">
            <summary>
            Класс для хранения аргументов при вызове события добавления или удаления точки на линии
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.AddDeletePointArgs.segmnum">
            <summary>
            номер сегмента в котором произошло добавление точки
            номер сегмента, на конце которого произошло удаление точки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.AddDeletePointArgs.#ctor(System.Int32)">
            <summary>
            аргумент по добавлению точки на линии
            </summary>
            <param name="numsegm">номер сегмента, где произошло добавление точки</param>
        </member>
        <member name="P:STORMCASE.Primitives.AddDeletePointArgs.SegmNum">
            <summary>
            номер сегмента в котором произошло добавление точки
            номер сегмента, на конце которого произошло удаление точки
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.UnconnectConnectorArgs">
            <summary>
            Класс для хранения аргументов при вызове события отсоединения коннектора от объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.UnconnectConnectorArgs.connector">
            <summary>
            коннектор, у которого происходит отсоединение 
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.UnconnectConnectorArgs.bIsStart">
            <summary>
            происходит ли отсоединение начала
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.UnconnectConnectorArgs.#ctor(STORMCASE.Primitives.Connector,System.Boolean)">
            <summary>
            аргумент по отсединению коннектора
            </summary>
            <param name="connector">отсоединяемый коннектор</param>
            <param name="bIsStart">отсоединяется начало?</param>
        </member>
        <member name="P:STORMCASE.Primitives.UnconnectConnectorArgs.Connector">
            <summary>
            коннектор, у которого оторвали один из концов
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.UnconnectConnectorArgs.IsStart">
            <summary>
            стартовый конец отсоединяется?
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantPlaceArgs">
            <summary>
            аргументы для намазывания примитива на диаграмму
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.WantPlaceArgs.#ctor(STORMCASE.Primitives.Primitive,System.Drawing.Point)">
            <summary>
            аргументы для намазывания примитива на диаграмму
            </summary>
            <param name="primitivetocreate"></param>
            <param name="point"></param>
        </member>
        <member name="P:STORMCASE.Primitives.WantPlaceArgs.PrimitiveToCreate">
            <summary>
            примитив для намазывания
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.WantPlaceArgs.PointToCreate">
            <summary>
            точка, куда следует намазать примитив
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.ThrowInteractorsEventHandler">
            <summary>
            Делегат для эвента "выброски" управляющих контролов (интеракторов)
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.UnthrowInteractorsEventHandler">
            <summary>
            Делегат для удаления управляющих контролов (интеракторов)
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.MovedSizedEventHandler">
            <summary>
            Делегат для эвента изменения положения/размера
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.PrepareRedrawEventHandler">
            <summary>
            Делегат для эвента подготовки к перерисовке
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.InvalidateControlEventHandler">
            <summary>
            Делегат для эвента для немедленной(*) перерисовки
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantEditTextBlockEventHandler">
            <summary>
            Делегат для эвента, сообщающего о желании поредактировать текст
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantDeleteEventHandler">
            <summary>
            Делегат для эвента, сообщающего о желании удалить этот примитив
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TextEditFinishedEventHandler">
            <summary>
            Делегат эвента для TextBlock, чтобы он мог сообщать об окончании редактирования, когда его попросят
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.AddedPointEventHandler">
            <summary>
            Делегат события для коннектора, когда в нем добавляется точка
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.DeletedPointEventHandler">
            <summary>
            Делегат события для коннектора, когда в нем удаляется точка
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.UnconnectConnectorEventHandler">
            <summary>
            Делегат события для коннектора, когда в нем удаляется точка
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantPlacePrimitiveEventHandler">
            <summary>
            Делегат события, сообщающего, что хочется намазать новый контрол на диаграмму
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantAddCommandToUndoStackEventHandler">
            <summary>
            Делегат события, сообщающего, что хочется добавить команду в undo-стек 
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.PrimitiveChangingEventHandler">
            <summary>
            Делегат события, сообщающего, что хочется добавить команду в undo-стек 
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantLockRepositoryObject">
            <summary>
            Делегат события, сообщающего, что хочется заблокировать для редактировани объект репозитария
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.WantPasteMemoryStreamHandler">
            <summary>
            Делегат события, сообщающего, что хочется вставить чего-нибудь на диаграмму
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.DrawStyle">
            <summary>
            Стиль рисования диаграмм, шрифты, цвета и т.п.
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.DrawStyle.font">
            <summary>
            шрифт для рисования текста
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.DrawStyle.textcolor">
            <summary>
            цвет текста
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.DrawStyle.drawpen">
            <summary>
            перо
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.DrawStyle.drawbrush">
            <summary>
            кисть
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.DrawStyle.GetBoldedPenWidth">
            <summary>
            возвращает рекомендованную ширину "толстых" линий
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.DrawStyle.#ctor">
            <summary>
            стиль для рисования
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.DrawStyle.#ctor(System.Drawing.Color,System.Drawing.Pen,System.Drawing.Brush,System.Drawing.Font)">
            <summary>
            стиль для рисования
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.DrawStyle.#ctor(STORMCASE.Primitives.DrawStyle)">
            <summary>
            стиль для рисования
            </summary>
            <param name="drawstyle"></param>
        </member>
        <member name="M:STORMCASE.Primitives.DrawStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор десериализации
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.DrawStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            поддержка интерфейса сериализации - заполнение данных при сериализации
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:STORMCASE.Primitives.DrawStyle.Font">
            <summary>
            Шрифт
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.DrawStyle.TextColor">
            <summary>
            Цвет текста
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.DrawStyle.DrawPen">
            <summary>
            Кисть, с помощью которого будет производиться рисование
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.DrawStyle.DrawBrush">
            <summary>
            Bsrush
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.InformationPrimitive">
            <summary>
            Базовый класс для т.н. "информационных" примитивов - примитивы, которые не появляются на экране 
            и не участвуют в дальнейшем в коллекции примитивов диаграммы. Они предназначены для обозначения не
            которой информации (или команды). Например, это может быть добавление точки к коннектору.
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.InformationPrimitive.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Repository.Diagram,STORMCASE.Primitives.VisualControllerProperties)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.InformationPrimitive.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор для десериализации
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.InformationPrimitive.CanBePlacedToPrimitive(STORMCASE.Primitives.Primitive)">
            <summary>
            можно ли положить данный примитив на диаграмму
            </summary>
            <param name="primitive"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.InformationPrimitive.DoAction(STORMCASE.Primitives.Primitive,System.Drawing.Point)">
            <summary>
            абстрактный метод для выполнения действия
            </summary>
            <param name="primitive"></param>
            <param name="eg"></param>
        </member>
        <member name="M:STORMCASE.Primitives.InformationPrimitive.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            подавляем всякую отрисовку
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:STORMCASE.Primitives.InteractorType">
            <summary>
            Тип действия, которое должен совершать интерактор
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.InteractorType.Move">
            <summary>
            движение присоединенного объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.InteractorType.Size">
            <summary>
            изменение размера присоединенного объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.InteractorType.SizeHor">
            <summary>
            изменение размера по горизонтали присоединенного объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.InteractorType.SizeVer">
            <summary>
            изменение размера по вертикали присоединенного объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.InteractorType.Unconnect">
            <summary>
            (для коннектора) - отсоединение соответствующего конца коннектора
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.Interactor">
            <summary>
            Реализация всякого рода выделений. Квадратик, за который пользователь может дёргать.
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.csize">
            <summary>
            размер в относительных координатах (когда масштаб 1:1)
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.csize_real">
            <summary>
            реальный размер в терминах диаграммы
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.location">
            <summary>
            положение
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.size">
            <summary>
            размер
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.oldlocation">
            <summary>
            старое положение
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.oldsize">
            <summary>
            старый размер
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.itype">
            <summary>
            тип интерактора
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.interactcontrol">
            <summary>
            присоединенный примитив
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.cursor">
            <summary>
            тип курсора мыши при наведении на интерактор
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.oldmousepos">
            <summary>
            старое положение мыши
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.bLeftButtonHoldsDown">
            <summary>
            было ли нажатие левой кнопки мыши
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.capture">
            <summary>
            захвачено ли отслеживание мыши данным интерактором
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.tag">
            <summary>
            просто дополнительный параметр
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.isgroupoperation">
            <summary>
            будет ли вызывать перемещение данного интерактора перемещение других интеракторов данного типа
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.isfirstlocation">
            <summary>
            для отслеживания, в первый раз изменяется положение или нет
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Primitives.VisualControllerProperties)">
            <summary>
            квадратик, за который пользователь может дергать
            </summary>
            <param name="drawstyle"></param>
            <param name="controllerproperties"></param>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.GetSizeByGraphics(System.Drawing.Graphics)">
            <summary>
            получить реальный размер
            </summary>
            <param name="gr"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Отрисовка
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.RegionToRedraw">
            <summary>
            регион для перерисовки
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.HitTest(System.Drawing.Point)">
            <summary>
            Проверка, попадает ли указанная точка на интерактор
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.prv_RecalcDependencies">
            <summary>
            пересчитаем размер нашего объекта - вдруг изменился масштаб и нужно изменить наши размеры
            ( интерактор должен выглядеть одинаково независимо от масштаба)
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.UMLControlMovedSized(STORMCASE.Primitives.CommonBase,STORMCASE.Primitives.MovedSizedEventArgs)">
            <summary>
            Обработчик события изменения расположения\размера управляемого примитива
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.primitives_to_move">
            <summary>
            примитивы, которые нужно двигать при движении сложных объектов
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.MouseDown(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) нажатии клавиши мыши
            </summary>	
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.MouseMove(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) перемещении мыши
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.MouseUp(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Вызывать, если хотим имитировать (или сообщить о) отпускании клавиши мыши
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.m_bInKeyboardMove">
            <summary>
            находимся в режиме мувания клавиатурой
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Interactor.m_bKeyboardMoving">
            <summary>
            непосредственно движение клавой
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Interactor.OnUnconnectConnector(STORMCASE.Primitives.UnconnectConnectorArgs)">
            <summary>
            Генерация эвента изменения положения/размера
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.cSize">
            <summary>
            реальный размер (с учетом масштаба интерактора)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.Location">
            <summary>
            Размещение
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.Size">
            <summary>
            Размер
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.OldLocation">
            <summary>
            Размещение старое
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.OldSize">
            <summary>
            Размер старый
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.ActionType">
            <summary>
            Тип действия, которое должен совершать интерактор
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.Cursor">
            <summary>
            Курсор мыши при попадании ею в интерактор
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.InteractPrimitive">
            <summary>
            Ссылка на примитив, которым управляет данный интерактор
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.Capture">
            <summary>
            По этому свойству контроллер определяет, передавать команды мыши только когда она непосредственно (false) над интерактором или всегда (true)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.IsGroupOperation">
            <summary>
            Контроллер проверяет это свойство при перемещении группы интеракторов. Если True, то операция применяется для всех однотипных (ActionType) интеракторов, иначе, не применяется
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Interactor.Tag">
            <summary>
            Что-либо, связанное с интерактором
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.Interactor.UnconnectConnectorHandler">
            <summary>
            Эвент подготовки к перерисовке
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TextBlockEditType">
            <summary>
            Тип редактирования текстового блока
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlockEditType.TextEdit">
            <summary>
            текстовый блок
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlockEditType.ComboBox">
            <summary>
            комбобокс
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.SelectionType">
            <summary>
            перечислимый тип для определения, как считать регион для рисования выделения
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.SelectionType.left">
            <summary>
            нужно посчитать положение курсора | как левая граница получившегося прямоугольника
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.SelectionType.right">
            <summary>
            нужно посчитать положение курсова | как правая граница получившегося прямоугольника
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.SelectionType.all">
            <summary>
            нужно посчитать полноценный регион для выделенного текста
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.TextBlock">
            <summary>
            Блок текста
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.text">
            <summary>
            текст 
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.rect">
            <summary>
            положение/размер
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.oldrect">
            <summary>
            старое положение/размер
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.sf">
            <summary>
            формат строки
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.borderwidth">
            <summary>
            ширина бордера
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.drawempty">
            <summary>
            нужно ли подсвечивать, если текста нет
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.canshrink">
            <summary>
            может ли ширина автоматически уменьшаться под ширину текста
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.edittype">
            <summary>
            тип редактирования
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.visible">
            <summary>
            нужно ли отображать данный текст
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.bFirst">
            <summary>
            для определения, только что создан объект или нет
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.bIsEditMode">
            <summary>
            находимся ли мы в режиме редактирования
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.selRange">
            <summary>
            выделенное множество символов
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.bIsBracket">
            <summary>
            нужно ли отображать текст в скобках
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.bIsFolded">
            <summary>
            скрыт ли текст
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Primitives.VisualControllerProperties,System.String,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            текстовый блок
            </summary>
            <param name="drawstyle">стиль для рисования</param>
            <param name="controllerproperties">визуальные свойства контроллера</param>
            <param name="text">текст</param>
            <param name="rect">размер блока</param>
            <param name="sf">стиль текста</param>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Primitives.VisualControllerProperties,System.String)">
            <summary>
            текстовый блок
            </summary>
            <param name="drawstyle">стиль</param>
            <param name="controllerproperties">визуальные свойства контроллера</param>
            <param name="text">текст</param>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Primitives.VisualControllerProperties,System.String,System.Drawing.RectangleF)">
            <summary>
            текстовый блок
            </summary>
            <param name="drawstyle">стиль</param>
            <param name="controllerproperties">визуальные свойства</param>
            <param name="text">текст</param>
            <param name="rect">размер блока</param>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.prv_GetRectangleForMeasuringRanges">
            <summary>
            возвращает прямоугольник для вычисления регинонов выделения
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Отрисовка
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.IsCursorOnText">
            <summary>
            находится ли курсор с положением, переданным в последнем вызове GetStartSelectionByMousePosition, находящимся на тексте
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.GetStartSelectionByMousePosition(System.Drawing.Point)">
            <summary>
            возвращает номер символа по координатам мыши
            </summary>
            <param name="mousePoint"> координаты мыши </param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.prv_DivideRange(System.Drawing.CharacterRange,System.Drawing.CharacterRange@,System.Drawing.CharacterRange@)">
            <summary>
            делит часть текста на 2 части (поровну) и помещает их соответственно в левую и правую части
            </summary>
            <param name="range"></param>
            <param name="leftrange"></param>
            <param name="rightrange"></param>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.prv_PaintSelectedText(System.Drawing.CharacterRange,System.Windows.Forms.PaintEventArgs)">
            <summary>
            рисует выделение и выделенный текст
            </summary>
            <param name="range"></param>
            <param name="e"></param>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.RegionToRedraw">
            <summary>
            Возвращение региона для перерисовки
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.OwnRegion">
            <summary>
            регион, который в действительности занимает контрол (без учета предыдущих состояний)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.RealFontByGraphics(System.Drawing.FontFamily,System.Single,System.Drawing.Graphics,System.Drawing.FontStyle)">
            <summary>
            возвращает масштабированный в соответствии с полотном фонт
            </summary>
            <param name="fm"></param>
            <param name="fontsize"></param>
            <param name="gr"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.prv_GetCorrectRectSize(System.Drawing.RectangleF)">
            <summary>
            получить "корректный" размер нашего текстболка исходя из текста и выбранных параметров отображения
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.HitTest(System.Drawing.Point)">
            <summary>
            Проверка, попадает ли указанная точка в интерактор
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.TextBlock.OnTextEditFinished(System.String,System.String)">
            <summary>
            реакция на окончание редактирования
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.TextBlock.bNeedToContinueEditing">
            <summary>
            устанавливается при окончании редактирования, позволяет продолжить редактирование
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.Visible">
            <summary>
            показывает, нужно ли выводить на экран данный текстовый блок
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.IsFolded">
            <summary>
            "свернут" ли текст
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.CanShrink">
            <summary>
            будет ли автоматически уменьшаться размер тестового блока с уменьшением ширины текста
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.Text">
            <summary>
            Текст
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.Rect">
            <summary>
            Прямоугольник, в который вписан текст
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.OldRect">
            <summary>
            Старый прямоугольник
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.Location">
            <summary>
            Узнать/установить расположение
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.Size">
            <summary>
            Узнать/установить размер
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.OldLocation">
            <summary>
            Узнать старое расположение
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.OldSize">
            <summary>
            Узнать старый размер
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.BorderWidth">
            <summary>
            Величина бордюра вокруг текстового блока, устанавливается, если требуется отрисовать текст на основе фона. Если 0, то не учитывается и фон не отрисовывается
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.TextBlockEditType">
            <summary>
            Тип контрола редактирования, который должен применяться
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.StringFormat">
            <summary>
            Формат
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.DrawEmpty">
            <summary>
            Если true, то отрисовывать рамку для пустого блока
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.IsEditMode">
            <summary>
            находится ли элемент в режиме редактирования
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.SelectionRange">
            <summary>
            множество выделенных символов
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.IsBracket">
            <summary>
            нужно ли рисовать скобки
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.RealFont">
            <summary>
            получить нормально настроенный фонт (нормального размера для отрисовки с необходимым масщтабом)
            </summary>
        </member>
        <member name="E:STORMCASE.Primitives.TextBlock.TextEditFinished">
            <summary>
            событие по окончанию редактирования текста
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.TextBlock.NeedToContinueEditing">
            <summary>
            устанавливается при окончании редактирования, позволяет продолжить редактирование
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.IDiagramMethod">
            <summary>
            Интерфейс, который должны имплементировать диаграммные методы
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.IDiagramMethod.Name">
            <summary>
            Имя диаграммного метода
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.IDiagramMethod.PrimitiveTypes">
            <summary>
            Типы доступных примитивов
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.IDiagramMethod.Primitives">
            <summary>
            Расположенные на диаграмме примитивы
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.IDiagramMethod.HelpKeyword">
            <summary>
            Ключевое слово для поиска по индексу файла помощи
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.InitialVisualType">
            <summary>
            тип визуального выбора
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.InitialVisualType.check">
            <summary>
            булевское значение - да/нет
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.InitialVisualType.list">
            <summary>
            список - целочисленное значение
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.BaseInitialAttribute.TooltipText">
            <summary>
            подсвечиваемый текст на тулбаре
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.BaseInitialAttribute.PropertyName">
            <summary>
            имя свойства в коллекции свойств по умолчанию
            </summary>
        </member>
        <member name="T:STORMCASE.Primitives.Rect">
            <summary>
            Базовый класс -- примитив, предок любых UML-элементов НЕ СВЯЗЕЙ (классы, сценарии и т.п.).
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Rect.location">
            <summary>
            положение объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Rect.size">
            <summary>
            размер объкта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Rect.oldlocation">
            <summary>
            старое положение объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Rect.oldsize">
            <summary>
            старый размер объекта
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Rect.defaultsize">
            <summary>
            размер по умолчанию
            </summary>
        </member>
        <member name="F:STORMCASE.Primitives.Rect.bNeedToDragOthersControls">
            <summary>
            нужно ли перемещать контролы, полностью
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.#ctor(STORMCASE.Primitives.DrawStyle,STORMCASE.Repository.Diagram,STORMCASE.Primitives.VisualControllerProperties)">
            <summary>
            Конструктор
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Конструктор для десериализации
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.GetCenteredPoint">
            <summary>
            возвращает "центр" объекта - может использоваться, например, при автоматическом приконнективании
            коннектора
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.prv_CorrectSizeByGrid(System.Drawing.Size)">
            <summary>
            скорректировать размер по размеру сетки
            </summary>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Отрисовка
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.prv_CorrectSizeForFoldedObject">
            <summary>
            сделать размер состояния - как минимальный размер, включающий все входящие и исходящие из него стрелки, без изменения
            их положения
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.CanBeFilled">
            <summary>
             закрашивать можно только простые объекты
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.prv_NeedToFill">
            <summary>
            функция показывает, нужно ли закрашивать данный объект
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.HitTest(System.Drawing.Point)">
            <summary>
            Проверка, попадает ли указанная точка
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.Highlight">
            <summary>
            Выделение элемента
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.RegionToRedraw">
            <summary>
            Возвращает регион, который нужно перерисовывать
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.OwnRegion">
            <summary>
            собственный регион (без учета предыдущих состояний)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.prv_PrepareInteractors">
            <summary>
            Создает и подготавливает четыре интерактора 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.InteractorMovedSized(STORMCASE.Primitives.CommonBase,STORMCASE.Primitives.MovedSizedEventArgs)">
            <summary>
            Реакция на перемещение интерактора
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Реализация стандартного интерфейса сериализации -- получение данных 
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.CanToBeConnected(STORMCASE.Primitives.Connector)">
            <summary>
            Контроллер опрашивает вызовом этого метода прямоугольный примитив: можно ли к
            нему присоединить указанный коннектор.
            </summary>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.FindIntersectWithSegment(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Возвращаем пересечение линии с нашим объектом. Точка a - конечная точка
            По умолчанию - берем все Location со всем Size
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Primitives.Rect.FindIntersectWithSegmentEx(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Возвращаем пересечение линии с нашим объектом. Точка a - конечная точка
            По умолчанию - берем все Location со всем Size
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:STORMCASE.Primitives.Rect.NeedToDragOthersControls">
            <summary>
            нужно ли двигать объекты, геометрически расположенные внутри данного объекта при интерактивном движении 
            данного примитива
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Rect.Location">
            <summary>
            Размещение
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Rect.Size">
            <summary>
            Размер
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Rect.OldLocation">
            <summary>
            Размещение старое (действительно только во время движения)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Rect.OldSize">
            <summary>
            Размер старый (действителен только во время движения)
            </summary>
        </member>
        <member name="P:STORMCASE.Primitives.Rect.DefaultSize">
            <summary>
            Размер по-умолчанию
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.AccessModifier">
            <summary>
            Модификатор доступа
            </summary>
        </member>
        <member name="F:STORMCASE.Repository.AccessModifier.Public">
            <summary>
            public
            </summary>
        </member>
        <member name="F:STORMCASE.Repository.AccessModifier.Private">
            <summary>
            private
            </summary>
        </member>
        <member name="F:STORMCASE.Repository.AccessModifier.Protected">
            <summary>
            protected
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.RepositoryBrowserDataObject">
            <summary>
             Абстрактный класс, который наследуется от RepositoryDataObject, дополняя свойствами даты создания,
             пользователя, который изменил данный объект и т.к. От него наследуются класс System, RepositoryBrowserDataObjectWithACL и т.д.
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryBrowserDataObject.CreateDate">
            <summary>
             Дата создания
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryBrowserDataObject.CreateUser">
            <summary>
            Пользователь, который создал объект
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryBrowserDataObject.ChangeDate">
            <summary>
             Дата изменения
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryBrowserDataObject.ChangeUser">
            <summary>
             Пользователь, который изменил объект
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.RepositoryBrowserDataObjectWithACL">
            <summary>
             Репозитарный объект со списком прав доступа
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryBrowserDataObjectWithACL.ACL">
            <summary>
            список прав доступа к объекту
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.RepositoryRefDataObject">
            <summary>
            Предок репозитарных классов, содержащих счётчик ссылок, собственно тех, которые могут располагаться на диаграммах
            </summary>
        </member>
        <member name="F:STORMCASE.Repository.RepositoryRefDataObject.referencecount">
            <summary>
            счетчик  ссылок
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryRefDataObject.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.RepositoryRefDataObject.ReferenceCount">
            <summary>
            Счётчик ссылок на репозитарный объект. Если равно 0, объект должен удалиться 
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Diagram">
            <summary>
            Диаграмма
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.ObjectInSystem">
            <summary>
            предок всех детейловых объектов в системе (system). Например для Diagram или FileLink.
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.ObjectInSystem.System">
            <summary>
            аггрегирующий мастер на систему
            </summary>
        </member>
        <member name="F:STORMCASE.Repository.Diagram.elements">
            <summary>
            список элементов диаграммы
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Diagram.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Diagram.System">
            <summary>
            система, где хранится данная диаграмма (аггрегирующий мастер)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Diagram.PrimitivesStream">
            <summary>
            поток для сериализованных данных диаграммы
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Diagram.PrimitivesStreamString">
            <summary>
            сериализованный данные в виде строки
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Diagram.CaseObjectsString">
            <summary>
            строка показывает наличие в диаграмме case-объектов с именами. 
            Используется для более быстрой прокачки информации о связях между диаграммами
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfDiagram">
            <summary>
            Диаграммы
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfDiagram.#ctor(STORMCASE.Repository.System)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfDiagram.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить диаграмму 
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfDiagram.Item(System.Object)">
            <summary>
            возвратить диаграмму по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfDiagram.Item(System.Int32)">
            <summary>
            возвратить диаграмму по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Filelink">
            <summary>
            Ссылка из репозитария на файл
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Filelink.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Filelink.FileName">
            <summary>
            не хранимое свойство с именем файла. Осуществляется перенаправление на стандартное свойство Name
            (не используется)
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DiagramLink">
            <summary>
            Ссылка из репозитария на диаграмму
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DiagramLink.#ctor">
            <summary>
            Конструктор по-умолчанию
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DiagramLink.#ctor(System.String,System.String)">
            <summary>
             Конструктор
            </summary>
            <param name="diagramPrimaryKey">PrimaryKey диаграммы</param>
            <param name="diagramType">Тип диаграммы (AsseblyQualifiedName)</param>
        </member>
        <member name="P:STORMCASE.Repository.DiagramLink.DiagramPrimaryKey">
            <summary>
             Диаграмма, на которую указывает ярлык (обязательно не null)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DiagramLink.DiagramType">
            <summary>
            Тип диаграммы, на которую указывает ярлык (обязательно не null)
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.FileIconProvider">
            <summary>
            вспомогательный класс для предоставления иконки по имени файла
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.FileIconProvider.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.FileIconProvider.GetImage(System.Type,System.String)">
            <summary>
            возвратить иконку по имени файла 
            </summary>
            <param name="DataObjectType"></param>
            <param name="objectsignature"></param>
            <returns></returns>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfFilelink">
            <summary>
            Ссылки на файлы
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfFilelink.#ctor(STORMCASE.Repository.System)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfFilelink.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить в массив детейлов файловую ссылку
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfFilelink.Item(System.Object)">
            <summary>
            возвратить ссылку на файл по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfFilelink.Item(System.Int32)">
            <summary>
            возвратить ссылку на файл по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfDiagramLink">
            <summary>
            Ссылки на диаграммы
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfDiagramLink.#ctor(STORMCASE.Repository.System)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="system"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfDiagramLink.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить в массив детейлов ссылку на диаграмму
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfDiagramLink.Item(System.Object)">
            <summary>
            возвратить ссылку на диаграмму по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfDiagramLink.Item(System.Int32)">
            <summary>
            возвратить ссылку на диаграмму по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Repository">
            <summary>
            Репозитарий
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.RepositoryObjectWithPlugins">
            <summary>
            Summary description for RepositoryObjectWithPlugins.
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Repository.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Repository.Projects">
            <summary>
            проекты
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Project">
            <summary>
            Проект
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Project.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Project.Configurations">
            <summary>
            конфигурации
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Project.Repository">
            <summary>
            репозитарий, в котором находится проект.
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfProject">
            <summary>
            Проекты
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfProject.#ctor(STORMCASE.Repository.Repository)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfProject.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить проект
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfProject.Item(System.Object)">
            <summary>
            возвратить проект по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfProject.Item(System.Int32)">
            <summary>
            возвратить проект по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Configuration">
            <summary>
            Конфигурация
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Configuration.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Configuration.Project">
            <summary>
            проект, в котором находится конфигурация (агрегирующий мастер)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Configuration.Stages">
            <summary>
            стадии конфигурации
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfConfiguration">
            <summary>
            Конфигурации
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfConfiguration.#ctor(STORMCASE.Repository.Project)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfConfiguration.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить конфигурацию
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfConfiguration.Item(System.Object)">
            <summary>
            возвратить конфигурацию по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfConfiguration.Item(System.Int32)">
            <summary>
            возвратить конфигурацию по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Stage">
            <summary>
            Стадия
            </summary>
            
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetStandardEditScript">
            <summary>
             Возвращает скрипт на редактирование
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetStandardListScript">
            <summary>
             Возвращает списковый скрипт
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetClassByName(System.String)">
            <summary>
            Возвращает класс по имени
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Stage.EqualNameStr(System.String,System.String)">
            <summary>
            Проверяет на совпадение имен (учитывается "/")
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.EqualNameStr(System.String,System.String,System.Boolean)">
            <summary>
            Проверяет на совпадение имен (учитывается "/") регистронезависимый
            </summary>
            <param name="s1">Имя</param>
            <param name="s2">Имя</param>
            <param name="caseSensitive">Регистрозависимость</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.EqualAssocNameStr(System.String,System.String)">
            <summary>
             Проверяет имена ассоциаций на совпадение имен (учитывается "/") 
            </summary>
            <param name="s1">Имя</param>
            <param name="s2">Имя</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetClassByNameStr(System.String,System.Boolean)">
            <summary>
             Возвращает класс по имени
            </summary>
            <param name="classnamestr">Имя</param>
            <param name="caseSensitive">Регистрозависимость</param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetClassByNameStr(System.String)">
            <summary>
            Возвращает класс по имени, по-умолчанию регистрозависимый поиск
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetScriptByName(System.String)">
            <summary>
            возвращает скрипт по имени
            </summary>
            <param name="scriptname"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetScriptByKey(System.Object)">
            <summary>
            Возвращает скрипт по ключу
            </summary>
            <param name="key"> Первичный ключ, по которому ищется скрипт </param>
            <returns> Скрипт, имеющий необходимый ключ </returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetScriptByKey(System.Object,System.Boolean)">
            <summary>
            Возвращает скрипт по ключу с учётом прототипизации
            </summary>
            <param name="key"> Первичный ключ, по которому ищется скрипт </param>
            <param name="checkPrototipization">
            Флаг, определяющий, осуществлять ли проверку по ключу прототипизации 
            (необходимо, например, при десериализации)
            </param>
            <returns> Скрипт, имеющий необходимый ключ </returns>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetAssociationByClassesNameRoles(STORMCASE.Repository.Class,STORMCASE.Repository.Class,System.String,System.String,System.Type)">
            <summary>
            Возвращает ассоциацию по связываемым классам и ролям. 
            Ассоциация уникальна в пределах связываемых классов и обязательном отличии обоих имён ролей, 
            т.е. данная функция найдёт ассоциацию, если совпадут классы и совпадёт хотя бы одно имя роли.
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetAssociationByClassesNameRolesStr(STORMCASE.Repository.Class,STORMCASE.Repository.Class,System.String,System.String,System.String,System.Type)">
            <summary>
            Возвращает ассоциацию по связываемым классам и ролям. 
            Ассоциация уникальна в пределах связываемых классов и обязательном отличии обоих имён ролей, 
            т.е. данная функция найдёт ассоциацию, если совпадут классы и совпадёт хотя бы одно имя роли.
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Stage.GetInheritanceByClassesNameRoles(STORMCASE.Repository.Class,STORMCASE.Repository.Class,System.String)">
            <summary>
            Возвращает наследование по связываемым классам и имени
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Stage.ConstructRepositioryObject(System.Type)">
            <summary>
            создает репозитарный объект по базовому типу - для наследников здесь можно создавать специфические
            репозитарные объекты
            </summary>
            <param name="baseType">базовый тип репозитария</param>
            <returns>возвращаемая инстанция объекта. Должна приводиться к базовому типу</returns>
        </member>
        <member name="P:STORMCASE.Repository.Stage.ChosenPalette">
            <summary>
            Выбранная настройка палитры (данное свойство не используется; свойство переопределено в потомках)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Stage.Configuration">
            <summary>
            Конфигурация, в которой находится данная стадия
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Stage.Classes">
            <summary>
            Классы
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Stage.Associations">
            <summary>
            Ассоциации и агрегации
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Stage.Inheritances">
            <summary>
            Наследования
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Stage.Systems">
            <summary>
            Системы
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Stage.Scripts">
            <summary>
             Список скриптов
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfStage">
            <summary>
            Стадии
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfStage.#ctor(STORMCASE.Repository.Configuration)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfStage.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить стадию
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfStage.Item(System.Object)">
            <summary>
            возвращает стадию по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfStage.Item(System.Int32)">
            <summary>
            возвращает стадию по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.System">
            <summary>
            Система
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.System.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.System.Stage">
            <summary>
            стадия, в которой находится система
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.System.Diagrams">
            <summary>
            диаграммы
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.System.Filelinks">
            <summary>
            файловые ссылки
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.System.DiagramLinks">
            <summary>
            ссылки на диаграммы
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfSystem">
            <summary>
            Системы
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfSystem.#ctor(STORMCASE.Repository.Stage)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="stage"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfSystem.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавляет систему
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfSystem.Item(System.Object)">
            <summary>
            возвращает систему по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfSystem.Item(System.Int32)">
            <summary>
            возвращает систему по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Class">
            <summary>
            Класс
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Class.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Class.GetStereotypes">
            <summary>
            возвратить стандартные стереотипы для данного класса
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Class.prv_GetInitialStereotype">
            <summary>
             Стереотип, который задается при инициализации
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Class.IsImplementation">
            <summary>
            проверяет, является ли стереотип класса implementation (или пустое значение)
            Генерируется как потомок от штормового класса DataObject
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Class.IsOther">
            <summary>
             Проверяет, является ли стереотип класса "нестандартным"
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Class.IsEnum">
            <summary>
            является ли класс объявлением перечислимого типа (стереотип enumeration)
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Class.IsInterface">
            <summary>
            является ли класс интерфейсом ( стереотип interface )
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Class.IsType">
            <summary>
            является ли класс объявлением типа. Тип, который генерируется в код как class
            </summary>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.Class.IsTypeDef">
            <summary>
            является ли класс объявлением типа. Синоним типа. Не генерируется в код, заменяется на языковой по карте типов
            </summary>
            <returns></returns>
        </member>
        <member name="P:STORMCASE.Repository.Class.Stage">
            <summary>
            Стадия
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Class.NameStr">
            <summary>
            Полное имя, как оно выглядит на диаграмме (с пометками типа хранимости, модификатора доступа)
            хранится в базе и является "оригиналом", т.е., по нему происходит генерация
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Class.AttributesStr">
            <summary>
            строка с атрибутами (хранится в базе)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Class.MethodsStr">
            <summary>
            строка с методами (хранится)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Class.Stored">
            <summary>
            Хранимый ли данный класс
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Class.Stereotype">
            <summary>
            Стереотип класса
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfClass">
            <summary>
            Классы
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfClass.#ctor(STORMCASE.Repository.Stage)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="stage"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfClass.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить класс
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfClass.Item(System.Object)">
            <summary>
            возвратить класс по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfClass.Item(System.Int32)">
            <summary>
            возвратить класс по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Association">
            <summary>
            Ассоциация
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.BaseAssociation">
            <summary>
            абстрактный класс для ассоциации, композиции
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.BaseAssociation.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.Stage">
            <summary>
            Стадия, где описана данная ассоциация
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.StartRoleStr">
            <summary>
            Полное имя роли-начала, как оно выглядит на диаграмме (с пометками типа хранимости, модификатора доступа)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.EndRoleStr">
            <summary>
            Полное имя роли-конца, как оно выглядит на диаграмме (с пометками типа хранимости, модификатора доступа)
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.StartRole">
            <summary>
            Имя роли-начала
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.EndRole">
            <summary>
            Имя роли-конца
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.StartMultiplicity">
            <summary>
            Мощность ассоциации у начала
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.NotNullStart">
            <summary>
            Проверяет множественность стартового конца ассоциации, если допустима множественность 0, тогда возвращает false, иначе true
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.EndMultiplicity">
            <summary>
            Мощность ассоциации у конца
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.StartClass">
            <summary>
            Класс, связываемый ассоциацией со стороны начала
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.EndClass">
            <summary>
            Класс, связываемый ассоциацией со стороны конца
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.StartRoleStored">
            <summary>
            Хранима ли данная ассоциация со стороны начала
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.EndRoleStored">
            <summary>
            Хранима ли данная ассоциация со стороны конца
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.StartRoleAccessModifier">
            <summary>
            Модификатор доступа к этой ассоциации со стороны начала
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.BaseAssociation.EndRoleAccessModifier">
            <summary>
            Модификатор доступа к этой ассоциации со стороны конца
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Aggregation">
            <summary>
            Агрегация
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfBaseAssociation">
            <summary>
            Ассоциации и агрегации
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfBaseAssociation.#ctor(STORMCASE.Repository.Stage)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="stage"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfBaseAssociation.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить ассоциацию
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfBaseAssociation.Item(System.Object)">
            <summary>
            возвратить ассоциацию по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfBaseAssociation.Item(System.Int32)">
            <summary>
            возвратить ассоциацию по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.Inheritance">
            <summary>
            Наследование
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.Inheritance.#ctor">
            <summary>
            конструктор по умолчанию
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Inheritance.Stage">
            <summary>
            Стадия, где описано данное наследование
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Inheritance.Parent">
            <summary>
            Класс -- родитель
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.Inheritance.Child">
            <summary>
            Класс -- потомок
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.DetailArrayOfInheritance">
            <summary>
            Наследования
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfInheritance.#ctor(STORMCASE.Repository.Stage)">
            <summary>
            конструктор по умолчанию
            </summary>
            <param name="stage"></param>
        </member>
        <member name="M:STORMCASE.Repository.DetailArrayOfInheritance.Add(ICSSoft.STORMNET.DataObject)">
            <summary>
            добавить наследование
            </summary>
            <param name="dataobject"></param>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfInheritance.Item(System.Object)">
            <summary>
            возвратить наследование по ключу
            </summary>
        </member>
        <member name="P:STORMCASE.Repository.DetailArrayOfInheritance.Item(System.Int32)">
            <summary>
            возвратить наследование по индексу
            </summary>
        </member>
        <member name="T:STORMCASE.Repository.RepositoryHelper">
            <summary>
             Класс, который содержит статические дополнительные методы для Repository
            </summary>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.GetStringByMemoryStream(System.IO.MemoryStream)">
            <summary>
             Возвращает строковое представление MemoryStream
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.GetMemoryStreamByString(System.String)">
            <summary>
             Возвращает MemoryStream по String
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.Compress(System.IO.MemoryStream)">
            <summary>
             Сжимает MemoryStream при помощи SharpZipLib
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.Decompress(System.IO.MemoryStream)">
            <summary>
             Разархивирует MemoryStream при помощи SharpZipLib
            </summary>
            <param name="ms"></param>
            <returns></returns>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.GetCaseStringForPrimitives(System.Collections.ArrayList)">
            <summary>
             Возвращает строку, в которой перечислены примитивы, например, "Class1:(имя);Class2:(имя);"
            </summary>
            <param name="prs"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.SaveDiagramAsCaseDiagram(STORMCASE.Repository.Diagram,System.String)">
            <summary>
             Сохраняет диаграмму в XML.
            </summary>
            <param name="dg">Диаграмма, которую необходимо сохранить.</param>
            <param name="sFileName">Имя файла, куда необходимо сохранить диаграмму.</param>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.SaveDiagramAsCaseDiagram(STORMCASE.Repository.Diagram,System.String,ICSSoft.STORMNET.Business.IDataService)">
            <summary>
             Сохраняет диаграмму в XML.
            </summary>
            <param name="dg">Диаграмма, которую необходимо сохранить.</param>
            <param name="sFileName">Имя файла, куда необходимо сохранить диаграмму.</param>
            <param name="dataService">Сервис данных.</param>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.LoadAndAddDiagramToSystem(STORMCASE.Repository.System,System.String)">
            <summary>
             Загрузка из файла и добавление Диаграммы в систему
            </summary>
            <param name="sys">Система</param>
            <param name="sFileName">Имя файла с диаграммой</param>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.LoadAndAddDiagramToSystem(STORMCASE.Repository.System,System.String,System.String)">
            <summary>
             Загрузка из файла и добавление Диаграммы в систему.
            </summary>
            <param name="sys">Система.</param>
            <param name="sFileName">Имя файла с диаграммой.</param>
            <param name="sDiagramName">Имя диаграммы.</param>
        </member>
        <member name="M:STORMCASE.Repository.RepositoryHelper.LoadAndAddDiagramToSystem(STORMCASE.Repository.System,System.String,System.String,ICSSoft.STORMNET.Business.IDataService)">
            <summary>
             Загрузка из файла и добавление Диаграммы в систему.
            </summary>
            <param name="sys">Система.</param>
            <param name="sFileName">Имя файла с диаграммой.</param>
            <param name="sDiagramName">Имя диаграммы.</param>
             <param name="dataService">Сервис данных.</param>
        </member>
        <member name="T:STORMCASE.RepositoryForms.RepositoryACLAddRole">
            <summary>
            Summary description for RepositoryACLAddRole.
            </summary>
        </member>
        <member name="F:STORMCASE.RepositoryForms.RepositoryACLAddRole.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.RepositoryACLAddRole.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.RepositoryACLAddRole.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:STORMCASE.RepositoryForms.RepositoryACLControl">
            <summary>
            Summary description for RepositoryACLControl.
            </summary>
        </member>
        <member name="F:STORMCASE.RepositoryForms.RepositoryACLControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.RepositoryACLControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.RepositoryACLControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:STORMCASE.RepositoryForms.RepositoryACLEdit">
            <summary>
            Summary description for RepositoryACLEdit.
            </summary>
        </member>
        <member name="F:STORMCASE.RepositoryForms.RepositoryACLEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.RepositoryACLEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:STORMCASE.RepositoryForms.RepositoryACLEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
